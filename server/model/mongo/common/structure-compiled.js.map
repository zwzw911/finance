{"version":3,"sources":["structure.js"],"names":[],"mappings":"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","file":"structure-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2015-07-08.\r\n */\r\n//var inputDefine=require('../assist/input_define').inputDefine;\r\n/*var uploadDefine=require('../assist/upload_define').uploadDefine;\r\nvar ueditor_config=require('../assist/ueditor_config').ue_config;\r\nvar input_validate=require('../error_define/input_validate').input_validate;*/\r\n//var micellaneous=require('../assist_function/miscellaneous').func\r\nvar regex=require('../../../define/regex/regex').regex\r\nvar mongoose=require('./connection').mongoose;\r\n\r\n\r\nvar mongoSetting=require('../../../config/global/defaultGlobalSetting').mongoSetting\r\n\r\nvar inputRule=require('../../../define/validateRule/inputRUle').inputRule\r\n\r\n\r\nvar collections=['department','employee','billType','bill']\r\n\r\n\r\nvar schemaOptions={\r\n    autoIndex:true, //if true,每次app启动，moogoose都会发送ensureIndex给每个index，可能影响性能。\r\n    bufferCommands:false,\t//如果mongodb没有启动，moogoose会缓存命令。\r\n\t//capped:\t//本collection为capped（环形集合，超出最大数量后，新的覆盖老的。插入速度极快）\r\n\t//collection: //collection默认名字是在Model中设置的，为了自定义collection的名称，可以设置此选项\r\n\t//emitIndexErrors：\t//设为true，则当mongoose发出ensureIndex，但是失败后，会在model产生一个error事件\r\n\t//id:\t//vitual getter，用model初始化后的document，可以通过这个方法直接获得objectId（这是mogoose产生的，还没有存入mongodb）\r\n    _id:true,//schema中不用显示设置objectid，mongoose会自动产生objectId\r\n    minimize:true,\t//如果schema中的field是对象，则minimize=true时，当document中此field为空**对象**，此doc被save时，空对象的字段不会被保存\r\n\t//read:,\t//设置read的优选项：primary(default 只从primary读)/primaryPrefered（主要从P，如果P挂掉，从S读）/secondary/secondaryPrefered/nearest（从网络延迟最下的读,需要在connect时候设置var options = { replset: { strategy: 'ping' }};）\r\n    safe:true,\t//设为true，如果出错，返回error到callback。设为{j:1,w:2,wtimeout:5000}，除了error返回callback，还能保证写操作被提交到日志和至少2个rep中，并且写操作超过5秒就超时\r\n    Strict:true,//默认true，如果要保存的数据中，字段没有在schema中定义，数据将无法保存。也可以设置成throw，如此便抛出错误，而不是仅仅drop数据。\r\n\t//shardKey:{f1:1,f2:1}\t\t//为collection设置shardKey（每个schema不同）\r\n\t//toJSON,\t\t//类似toObject，除了还可以使用JSON.stringify(doc)\r\n\t//toObject,\r\n    validateBeforeSave:mongoSetting.schemaOptions.validateBeforeSaveFlag,\t\t//true: 在保存（save or update）数据到DB的时候自动调用validate方法进行验证（包括mongoose内定和用户自定义validator）并保存；false:需要手工调用validate方法进行验证（内定和自定义），并且可以保存不合格数据（即需要自己做数据验证来决定是否可以保存；不做自定义验证的话，任何数据都可以保存了）\r\n\t//versionKey,\t\t//（**不要设成false除非你知道自己在干啥**）。 设置version key的名称，默认是__v,可以生成任意字符串。\r\n\t//skipVersion,\t\t//**不要设置除非你知道自己在干啥**\r\n\t//timestamps:{createAt:'cDate',updateAt:'uDate'},\t\t//mongoose为schema包含createAt和updateAt字段，当然名字可以自己设定。但是可能需要手工填充日期时间。所以还是直接在schema中显示设置对应field，并为field设置default，以便可以自动填充日期\r\n\t//useNestedStrict:\t//当false的时候，使用schema顶层的strict设置；true的时候，使用sub-document的strict设置\r\n};\r\n//convert mongodb data to objet, so that nodejs can manipulate directly\r\nvar toObjectOptions={\r\n    getters:true,//apply all getters (path and virtual getters)\r\n    virtuals:true,//apply virtual getters (can override getters option)\r\n    minimize:true,// remove empty objects (defaults to true)\r\n    depopulate:false,//depopulate any populated paths, replacing them with their original refs (defaults to false)\r\n    versionKey:false,//whether to include the version key (defaults to true)        //not include version key in result\r\n    retainKeyOrder:false // keep the order of object keys. If this is set to true, Object.keys(new Doc({ a: 1, b: 2}).toObject()) will always produce ['a', 'b'] (defaults to false)\r\n}\r\n\r\n\r\n/*\r\n* schema definition\r\n* 内置validator的定义放在ruleDefine中\r\n* required(all)/min_max(number)/enum_match_minLength_maxLength()\r\n* */\r\n\r\n/*                           department                        */\r\nlet fieldDefine={\r\n    department:{//采用和inputRule一样的名字，以便之后用for循环添加内置validator\r\n        name:{type:String,unique:true},//全部设成{}，即使只有type定义，以便之后添加validator\r\n        parentDepartment:{type:mongoose.Schema.Types.ObjectId,ref:\"departments\"},\r\n        cDate:{type:Date,default:Date.now},\r\n        uDate:{type:Date,default:Date.now},\r\n        dDate:{type:Date},\r\n    },\r\n    employee:{\r\n        name:{type:String},\r\n        leader:{type:mongoose.Schema.Types.ObjectId,ref:\"employees\"},\r\n        gender:{type:String},\r\n        birthDay:{type:Date},\r\n        department:{type:mongoose.Schema.Types.ObjectId,ref:\"departments\"},\r\n        onBoardDate:{type:Date},\r\n        cDate:{type:Date,default:Date.now},\r\n        uDate:{type:Date,default:Date.now},\r\n        dDate:{type:Date},\r\n    },\r\n    billType:{\r\n        name:{type:String,unique:true},\r\n        parentBillType:{type:mongoose.Schema.Types.ObjectId,ref:\"billTypes\"},\r\n        cDate:{type:Date,default:Date.now},\r\n        uDate:{type:Date,default:Date.now},\r\n        dDate:{type:Date},\r\n    },\r\n    bill: {\r\n        title:{type:String},\r\n        content:{type:String},\r\n        billType:{type:mongoose.Schema.Types.ObjectId,ref:\"billTypes\"},\r\n        billDate:{type:Date},\r\n        amount:{type:Number},\r\n        reimburser:{type:mongoose.Schema.Types.ObjectId,ref:\"employees\"},\r\n        cDate:{type:Date,default:Date.now},\r\n        uDate:{type:Date,default:Date.now},\r\n        dDate:{type:Date},\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n* 根据define/validateRule/validateRule的rule设置schema的rule\r\n* */\r\n//validateInput中的rule，在mongoose中对应的validator\r\nlet ruleMatch={\r\n    require:'required',\r\n    min:'min',\r\n    max:'max',\r\n    minLength:'minlength',\r\n    maxLength:'maxlength',\r\n    format:'match',\r\n}\r\n//console.log(fieldDefine['department']['parentDepartment'])\r\n/*                          将inputRule中的rule定义转换成设置validator                          */\r\n//根据flag确实是否要为field设置内建validator\r\nif(true===mongoSetting.schemaOptions.validateFlag){\r\n    for(let singleCollectionsName in inputRule){//读取每个collection\r\n        for(let singleFiled in inputRule[singleCollectionsName]){//读取每个collection下的字段（path）\r\n            for(let singleItem in inputRule[singleCollectionsName][singleFiled]){//读取每个字段下的rule\r\n                if(ruleMatch[singleItem]){//rule是否在mongo中有对应的内建validator\r\n                    let singleRuleValue=inputRule[singleCollectionsName][singleFiled][singleItem]\r\n\r\n                    //如果define是format，且value为ObjectID，则无需在mongo上设置对应的内建validator（因为type为objectId的字段会自动判断输入值是否为objectId,er无需添加额外的validator）\r\n                    if('format'===singleItem){\r\n                        if(regex.objectId===singleRuleValue['define']){\r\n                            continue\r\n                        }\r\n                    }\r\n\r\n                    if(false!==singleRuleValue['define']) {//一般而言，有define就可以判断为有validator，但是require比较特殊，只有true才认为有对应的定义\r\n                        if(fieldDefine[singleCollectionsName][singleFiled]){//对应的field在mongo中有定义，则为此field添加validator\r\n                            fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]]=[]\r\n                            fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]].push(singleRuleValue['define'])\r\n                            //fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]].push(singleRuleValue['mongoError'])\r\n                            let errorMsg=`错误代码${singleRuleValue['mongoError']['rc']}:${singleRuleValue['mongoError']['msg']}`\r\n                            fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]].push(errorMsg)//只能接受字符串\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconsole.log(fieldDefine['department']['name'])\r\nconsole.log(fieldDefine['employee']['leader'])\r\n\r\nvar departmentSchema=new mongoose.Schema(\r\n    fieldDefine['department'],\r\n    schemaOptions\r\n)\r\n\r\nvar employeeSchema=new mongoose.Schema(\r\n    fieldDefine['employee'],\r\n    schemaOptions\r\n)\r\nvar billTypeSchema=new mongoose.Schema(\r\n    fieldDefine['billType'],\r\n    schemaOptions\r\n)\r\n\r\nvar billSchema=new mongoose.Schema(\r\n    fieldDefine['bill'],\r\n    schemaOptions\r\n)\r\n\r\n\r\nvar departmentModel=mongoose.model('departments',departmentSchema)\r\nvar employeeModel=mongoose.model('employees',employeeSchema)\r\nvar billTypeModel=mongoose.model('billTypes',billTypeSchema)\r\nvar billModel=mongoose.model('bills',billSchema)\r\n\r\nmodule.exports={\r\n    departmentModel,\r\n    employeeModel,\r\n    billTypeModel,\r\n    billModel,\r\n    //以下export，为了mongoValidate\r\n    collections:collections,\r\n    fieldDefine,\r\n} //\r\n/*\r\n/!*                              user                        *!/\r\nvar userSch=new mongoose.Schema({\r\n        name:{type:String, unique:true},\r\n        password:String,\r\n        mobilePhone:Number,\r\n        thumbnail:{type:String,default:'b10e366431927231a487f08d9d1aae67f1ec18b4.png'},\r\n        //articles:[{type:mongoose.Schema.Types.ObjectId,ref:'articles'}],\r\n        cDate:{type:Date,default:Date()},\r\n        mDate:{type:Date,default:Date()},\r\n        dDate:Date\r\n    },\r\n    schemaOptions\r\n);\r\n\r\nuserSch.set('toObject',toObjectOptions)\r\n\r\nuserSch.path('name').validate(function(value){\r\n    if(input_validate.user.name.require.define){\r\n        return input_validate.user.name.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.user.name.type.define.test(value))\r\n    }\r\n})\r\n//password had been hashed\r\nuserSch.path('password').validate(function(value){\r\n    if(input_validate.user.password.require.define){\r\n        return input_validate.user.password.encryptedPassword.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.user.password.encryptedPassword.define.test(value))\r\n    }\r\n})\r\nuserSch.path('mobilePhone').validate(function(value){\r\n    if(input_validate.user.mobilePhone.require.define){\r\n        return input_validate.user.mobilePhone.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.user.mobilePhone.type.define.test(value))\r\n    }\r\n})\r\nuserSch.path('thumbnail').validate(function(value){\r\n    if(input_validate.user.thumbnail.require.define){\r\n        return input_validate.user.thumbnail.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.user.thumbnail.type.define.test(value))\r\n    }\r\n})\r\nuserSch.virtual('mDateConv').get(function(){\r\n    return this.mDate.toLocaleString()\r\n    //return this.mDate.toLocaleDateString()+' '+this.mDate.toLocaleTimeString()\r\n})\r\n/!*userSch.virtual('cDateConv').get(function(){\r\n    return this.cDate.toLocaleString()\r\n    //return this.mDate.toLocaleDateString()+' '+this.mDate.toLocaleTimeString()\r\n})*!/\r\nvar userModel=mongoose.model('users',userSch)//mongoose auto convert user to users, so directly use users as collection name\r\n\r\n\r\n\r\n/!*                              key                             *!/\r\nvar keySch=new mongoose.Schema({\r\n    key:{type:String,unique:true},\r\n    cDate:Date,\r\n    mDate:{type:Date,default:Date()},\r\n    dDate:Date\r\n},schemaOptions);\r\nkeySch.set('toObject',toObjectOptions);\r\n\r\nkeySch.path('key').validate(function(value){\r\n    if(input_validate.key.key.require.define){\r\n        return input_validate.key.key.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.key.key.type.define.test(value))\r\n    }\r\n})\r\nvar keyModel=mongoose.model('keys',keySch);\r\n\r\n/!*                              attachment                             *!/\r\nvar attachmentSch=new mongoose.Schema({\r\n    hashName:{type:String,unique:true},//hashName sha1 40+4 ~ 40+5\r\n    name:String,//100  compatilbe with windows\r\n    storePath:String,// 1024 for linux(don't care windows,since server use Linux as OS)\r\n    size:Number,//in byte\r\n    cDate:Date,\r\n    mDate:{type:Date,default:Date()},\r\n    dDate:Date\r\n},schemaOptions);\r\nattachmentSch.set('toObject',toObjectOptions);\r\nattachmentSch.path('hashName').validate(function(value){\r\n    if(input_validate.attachment.hashName.require.define){\r\n        return input_validate.attachment.hashName.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.attachment.hashName.type.define.test(value))\r\n    }\r\n    //return (value != null && value.length>=input_validate.attachment.hashName.minLength.define && value.length<=input_validate.attachment.hashName.maxLength.define );// 44 ~ 45,后缀为3～4个字符\r\n});\r\nattachmentSch.path('name').validate(function(value){\r\n    return (value != null && value.length<input_validate.attachment.name.maxLength.define &&  value.length>=input_validate.attachment.name.minLength.define);\r\n});\r\nattachmentSch.path('storePath').validate(function(value){\r\n    return (value != null && value.length<input_validate.attachment.storePath.maxLength.define);\r\n});\r\nattachmentSch.path('size').validate(function(value){\r\n    if(input_validate.attachment.size.define){\r\n        return ((value != null) && (value<input_validate.attachment.size.maxLength.define));\r\n    }else{\r\n        return ((value === null) || (value<input_validate.attachment.size.maxLength.define));\r\n    }\r\n});\r\n\r\nattachmentSch.virtual('cDateConv').get(function(){\r\n    return this.cDate.toLocaleString()\r\n    //return this.mDate.toLocaleDateString()+' '+this.mDate.toLocaleTimeString()\r\n})\r\nvar attachmentModel=mongoose.model('attachments',attachmentSch);\r\n\r\n/!*                          inner_image                                 *!/\r\n/!*\r\n*   用户可能upload图片后又删除，所以需要对上传的文本和数据库进行同步\r\n*   因此需要单独表（而不是和attachment混在一起，否则处理麻烦）\r\n*   结构和attachment基本一致\r\n* *!/\r\nvar innerImageSch=new mongoose.Schema({\r\n    hashName:{type:String,unique:true},//sha1 40+5\r\n    name:String,//100   compatilbe with windows\r\n    storePath:String,// 1024 for linux(don't care windows,since server use Linux as OS)\r\n    size:Number,//in byte\r\n    cDate:Date,\r\n    mDate:{type:Date,default:Date()},\r\n    dDate:Date\r\n},schemaOptions);\r\ninnerImageSch.set('toObject',toObjectOptions);\r\ninnerImageSch.path('hashName').validate(function(value){\r\n    if(input_validate.innerImage.hashName.require.define){\r\n        return input_validate.innerImage.hashName.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.innerImage.hashName.type.define.test(value))\r\n    }\r\n    //return (value != null && value.length>=input_validate.innerImage.hashId.minLength.define && value.length<=input_validate.innerImage.hashId.maxLength.define);//44 ~ 45,后缀为3～4个字符\r\n});\r\ninnerImageSch.path('name').validate(function(value){\r\n    return (value != null && value.length<input_validate.innerImage.name.maxLength.define && value.length>=input_validate.innerImage.name.minLength.define);\r\n});\r\ninnerImageSch.path('storePath').validate(function(value){\r\n    return (value != null && value.length<input_validate.innerImage.storePath.maxLength.define);\r\n});\r\ninnerImageSch.path('size').validate(function(value){\r\n    return ((value != null) && (value<=input_validate.innerImage.size.maxLength.define));//此处采用ueditor_config中的设置\r\n});\r\n\r\ninnerImageSch.virtual('mDateConv').get(function(){\r\n    return this.mDate.toLocaleString()\r\n    //return this.mDate.toLocaleDateString()+' '+this.mDate.toLocaleTimeString()\r\n})\r\n\r\nvar innerImageModel=mongoose.model('innerImages',innerImageSch);\r\n\r\n\r\n/!*                          comment                                 *!/\r\n/!*\r\n *   传统方式，无父-子关系\r\n * *!/\r\nvar commentSch=new mongoose.Schema({\r\n    //_id:mongoose.Schema.Types.ObjectId,\r\n    //为了方便populate出user的内容，需要添加articleId，以便直接查找comment，然后populate\r\n    articleId:{type:mongoose.Schema.Types.ObjectId,ref:\"articles\"},\r\n    user:{type:mongoose.Schema.Types.ObjectId,ref:\"users\"},\r\n    content:String,// 255\r\n    cDate:Date,\r\n    mDate:{type:Date,default:Date()},\r\n    dDate:Date\r\n},schemaOptions);\r\ncommentSch.set('toObject',toObjectOptions);\r\ncommentSch.path('articleId').validate(function(value){\r\n    if(input_validate.comment.articleId.require.define){\r\n        return input_validate.comment.articleId.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.comment.articleId.type.define.test(value))\r\n    }\r\n    //return (value != null || input_validate.comment.articleId.type.define.test(value));\r\n});\r\ncommentSch.path('user').validate(function(value){\r\n    //return (value != null || value.length<input_validate.comment.user.type.define.test(value));\r\n    if(input_validate.comment.user.require.define){\r\n        return input_validate.comment.user.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.comment.user.type.define.test(value))\r\n    }\r\n});\r\ncommentSch.path('content').validate(function(value){\r\n    return (value == null || value.length<input_validate.comment.content.maxLength.define);\r\n});\r\n\r\ncommentSch.virtual('mDateConv').get(function(){\r\n    return this.mDate.toLocaleString()\r\n    //return this.mDate.toLocaleDateString()+' '+this.mDate.toLocaleTimeString()\r\n})\r\nvar commentModel=mongoose.model('comments',commentSch);\r\n\r\n/!*                                      article                                  *!/\r\nvar articleSch=new mongoose.Schema({\r\n    //_id:objectId(),\r\n    hashId:{type:String,unique:true}, //hash id 40\r\n    title:String,\r\n    state:{type:String,enum:['正在编辑','编辑完成'],default:'正在编辑'},\r\n    author:{type:mongoose.Schema.Types.ObjectId,ref:\"users\"},\r\n    //keys:[{type:mongoose.Schema.Types.ObjectId,ref:'keys'}],\r\n    keys:[String],\r\n    innerImage:[{type:mongoose.Schema.Types.ObjectId,ref:'innerImages'}], //采用_id作为外键\r\n    attachment:[{type:mongoose.Schema.Types.ObjectId,ref:'attachments'}],\r\n    pureContent:String,\r\n    htmlContent:String,\r\n    comment:[{type:mongoose.Schema.Types.ObjectId,ref:'comments'}],\r\n    cDate:Date,\r\n    mDate:{type:Date,default:Date()},\r\n    dDate:Date\r\n}, schemaOptions);\r\narticleSch.set('toObject',toObjectOptions);\r\narticleSch.path('hashId').validate(function(value){\r\n    if(input_validate.article.hashId.require.define){\r\n        return input_validate.article.hashId.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.article.hashId.type.define.test(value))\r\n    }\r\n    //return value!=null && input_validate.article.hashId.type.define.test(value);\r\n})\r\narticleSch.path('title').validate(function(value){\r\n    return value!=null && value.length>=input_validate.article.title.minLength.define && value.length<=input_validate.article.title.maxLength.define ;\r\n})\r\narticleSch.path('author').validate(function(value){\r\n    if(input_validate.article.author.require.define){\r\n        return input_validate.article.author.type.define.test(value)\r\n    }else{\r\n        return (null===value || input_validate.article.author.type.define.test(value))\r\n    }\r\n    //return value!=null && input_validate.article.author.type.define.test(value)\r\n})\r\narticleSch.path('keys').validate(function(value){\r\n    if( value==[] || null===value ){return true}\r\n    if(value.length<=input_validate.article.keys.maxSize.define){\r\n        for(var i=0;i<value.length;i++){\r\n            if(!input_validate.article.keys.type.define.test(value[i])){\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n})\r\n\r\narticleSch.path('innerImage').validate(function(value){\r\n    if( value==[] || null===value ){return true}\r\n    if(value.length<=input_validate.article.innerImage.maxSize.define){\r\n        for(var i=0;i<value.length;i++){\r\n            if(!input_validate.article.innerImage.type.define.test(value[i])){\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n})\r\narticleSch.path('attachment').validate(function(value){\r\n    if( value==[] || null===value ){return true}\r\n    if(value.length<=input_validate.article.attachment.maxSize.define){\r\n        for(var i=0;i<value.length;i++){\r\n            if(!input_validate.article.attachment.type.define.test(value[i])){\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n})\r\narticleSch.path('pureContent').validate(function(value){\r\n    return null===value || value.length<input_validate.article.pureContent.maxLength.define\r\n})\r\narticleSch.path('htmlContent').validate(function(value){\r\n    return null===value || value.length<input_validate.article.htmlContent.maxLength.define;\r\n})\r\n\r\narticleSch.virtual('mDateConv').get(function(){\r\n    return this.mDate.toLocaleString()\r\n})\r\ninnerImageSch.virtual('cDateConv').get(function(){\r\n    return this.cDate.toLocaleString()\r\n    //return this.mDate.toLocaleDateString()+' '+this.mDate.toLocaleTimeString()\r\n})\r\n\r\nvar articleModel=mongoose.model('articles',articleSch);\r\n//var commentModel=mongoose.model('comment',commentSch);\r\n\r\n/!*                  folder                      *!/\r\nvar folderSch=new mongoose.Schema({\r\n        folderName:{type:String},//255 infact, in Linux, the max lenght can be 1024, but for easy to use, just use 255\r\n        owner:{type:mongoose.Schema.Types.ObjectId,ref:'users'},\r\n        parentId:{type:mongoose.Schema.Types.ObjectId,ref:'folders'},\r\n        level:Number,//当前目录的层数,从1开始计算\r\n        cDate:Date,\r\n        mDate:{type:Date,default:Date()},\r\n        dDate:Date\r\n    },\r\n    schemaOptions\r\n);\r\nfolderSch.set('toObject',toObjectOptions)\r\nfolderSch.path('folderName').validate(function(value){\r\n    return (value!=null && input_validate.folder.folderName.type.define.test(value))\r\n})\r\nfolderSch.path('owner').validate(function(value){\r\n    return (value!=null && input_validate.folder.owner.type.define.test(value))\r\n})\r\nfolderSch.path('parentId').validate(function(value){\r\n    //对于用户的根目录,是没有parent目录的\r\n    return (value==null || input_validate.folder.parentId.type.define.test(value))\r\n})\r\nfolderSch.path('level').validate(function(value){\r\n    return (value!=null && input_validate.folder.level.range.define.min<=value &&  input_validate.folder.level.range.define.max>=value)\r\n})\r\nfolderSch.virtual('mDateConv').get(function(){\r\n    return this.mDate.toLocaleString()\r\n})\r\n/!*folderSch.virtual('cDateConv').get(function(){\r\n    return this.cDate.toLocaleString()\r\n})*!/\r\nvar folderModel=mongoose.model('folders',folderSch);\r\n\r\n/!**********************************************************************!/\r\n/!**********************************************************************!/\r\n/!*                          relation                                    *!/\r\n/!**********************************************************************!/\r\n/!**********************************************************************!/\r\n\r\n\r\n/!*                      key-article                                     *!/\r\n//为了搜索方便\r\nvar keyArticleSch=new mongoose.Schema({\r\n    articleId:{type:mongoose.Schema.Types.ObjectId,ref:'articles'},\r\n    keyId:{type:mongoose.Schema.Types.ObjectId,ref:'keys'}\r\n},schemaOptions)\r\nkeyArticleSch.set('toObject',toObjectOptions)\r\nkeyArticleSch.path('articleId').validate(function(value){\r\n    return (value!=null && input_validate.keyArticle.articleId.validateError.define.test(value))\r\n})\r\nkeyArticleSch.path('keyId').validate(function(value){\r\n    return (value!=null && input_validate.keyArticle.keyId.validateError.define.test(value))\r\n})\r\nvar keyArticleModel=mongoose.model('keyArticles',keyArticleSch);\r\n\r\n\r\n/!*                           article in folder                       *!/\r\nvar articleFolderSch=new mongoose.Schema({\r\n        articleId:{type:mongoose.Schema.Types.ObjectId,ref:'articles'},\r\n        folderId:{type:mongoose.Schema.Types.ObjectId,ref:'personalArticles'},\r\n        cDate:Date,\r\n        mDate:{type:Date,default:Date()},\r\n        dDate:Date\r\n    },\r\n    schemaOptions\r\n);\r\narticleFolderSch.set('toObject',toObjectOptions)\r\narticleFolderSch.path('articleId').validate(function(value){\r\n    return (value!=null &&input_validate.articleFolder.articleId.type.define.test(value))\r\n})\r\narticleFolderSch.path('folderId').validate(function(value){\r\n    return (value!=null &&input_validate.articleFolder.folderId.type.define.test(value))\r\n})\r\nvar articleFolderModel=mongoose.model('articleFolders',articleFolderSch);\r\n\r\n\r\nvar errorSch=new mongoose.Schema({\r\n    errorCode:Number, //new define file\r\n    errorMsg:String, //new define file\r\n    category:String,// which page\r\n    subCategory:String,\r\n    desc:String,//more detail information\r\n    priority:String,\r\n    cDate:Date,\r\n    mDate:{type:Date,default:Date()},\r\n    dDate:Date\r\n},schemaOptions);\r\nerrorSch.set('toObject',toObjectOptions);\r\nvar errorModel=mongoose.model('errors',errorSch);\r\n\r\n\r\n\r\n\r\n\r\nexports.userModel=userModel;\r\nexports.articleModel=articleModel;\r\nexports.keyModel=keyModel;\r\nexports.attachmentModel=attachmentModel;\r\nexports.innerImageModel=innerImageModel;\r\nexports.errorModel=errorModel;\r\nexports.commentModel=commentModel;\r\nexports.folderModel=folderModel;\r\nexports.keyArticleModel=keyArticleModel;\r\nexports.articleFolderModel=articleFolderModel\r\n//exports.readArticle=readArticle;*/\r\n"]}