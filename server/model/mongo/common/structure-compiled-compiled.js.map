{"version":3,"sources":["structure-compiled.js"],"names":[],"mappings":"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","file":"structure-compiled-compiled.js","sourcesContent":["'use strict';\n\n/**\r\n * Created by wzhan039 on 2015-07-08.\r\n */\n\nvar mongoose = require('mongoose');\nvar fs = require('fs');\nvar regex = require('../../../define/regex/regex').regex;\nvar dbFinance = require('./connection').dbFinance;\n\n//使用ES6的promise\n//mongoose.Promise=Promise\n//mongoose.Promise = Promise\nvar mongoSetting = require('../../../config/global/globalSettingRule').mongoSetting;\n\nvar inputRule = require('../../../define/validateRule/inputRUle').inputRule;\n\nvar collections = ['department', 'employee', 'billType', 'bill'];\n\nvar schemaOptions = {\n    autoIndex: true, //if true,每次app启动，moogoose都会发送ensureIndex给每个index，可能影响性能。\n    bufferCommands: true, //如果mongodb没有启动，moogoose会缓存命令。//必须\n    //capped:\t//本collection为capped（环形集合，超出最大数量后，新的覆盖老的。插入速度极快）\n    //collection: //collection默认名字是在Model中设置的，为了自定义collection的名称，可以设置此选项\n    //emitIndexErrors：\t//设为true，则当mongoose发出ensureIndex，但是失败后，会在model产生一个error事件\n    //id:\t//vitual getter，用model初始化后的document，可以通过这个方法直接获得objectId（这是mogoose产生的，还没有存入mongodb）\n    _id: true, //schema中不用显示设置objectid，mongoose会自动产生objectId\n    minimize: true, //如果schema中的field是对象，则minimize=true时，当document中此field为空**对象**，此doc被save时，空对象的字段不会被保存\n    //read:,\t//设置read的优选项：primary(default 只从primary读)/primaryPrefered（主要从P，如果P挂掉，从S读）/secondary/secondaryPrefered/nearest（从网络延迟最下的读,需要在connect时候设置var options = { replset: { strategy: 'ping' }};）\n    safe: true, //设为true，如果出错，返回error到callback。设为{j:1,w:2,wtimeout:5000}，除了error返回callback，还能保证写操作被提交到日志和至少2个rep中，并且写操作超过5秒就超时\n    Strict: true, //默认true，如果要保存的数据中，字段没有在schema中定义，数据将无法保存。也可以设置成throw，如此便抛出错误，而不是仅仅drop数据。\n    //shardKey:{f1:1,f2:1}\t\t//为collection设置shardKey（每个schema不同）\n    //toJSON,\t\t//类似toObject，除了还可以使用JSON.stringify(doc)\n    //toObject,\n    validateBeforeSave: mongoSetting.schemaOptions.validateBeforeSaveFlag };\n//convert mongodb data to objet, so that nodejs can manipulate directly\nvar toObjectOptions = {\n    getters: true, //apply all getters (path and virtual getters)\n    virtuals: true, //apply virtual getters (can override getters option)\n    minimize: true, // remove empty objects (defaults to true)\n    depopulate: false, //如果有外键，直接使用外键而不是外键对应的记录(defaults to false)\n    versionKey: false, //whether to include the version key (defaults to true)        //not include version key in result\n    retainKeyOrder: false // keep the order of object keys. If this is set to true, Object.keys(new Doc({ a: 1, b: 2}).toObject()) will always produce ['a', 'b'] (defaults to false)\n};\n\n/*\r\n* schema definition\r\n* 内置validator的定义放在ruleDefine中\r\n* required(all)/min_max(number)/enum_match_minLength_maxLength()\r\n* */\n\n/*                           department                        */\nvar fieldDefine = {\n    user: {\n        name: { type: String, unique: true },\n        salt: { type: String },\n        encryptedPassword: { type: String },\n        cDate: { type: Date, default: Date.now },\n        uDate: { type: Date, default: Date.now },\n        dDate: { type: Date }\n    },\n    department: { //采用和inputRule一样的名字，以便之后用for循环添加内置validator\n        name: { type: String, unique: true }, //全部设成{}，即使只有type定义，以便之后添加validator\n        parentDepartment: { type: mongoose.Schema.Types.ObjectId, ref: \"departments\" },\n        cDate: { type: Date, default: Date.now },\n        uDate: { type: Date, default: Date.now },\n        dDate: { type: Date }\n    },\n    employee: {\n        name: { type: String },\n        leader: { type: mongoose.Schema.Types.ObjectId, ref: \"employees\" },\n        gender: { type: String },\n        birthDay: { type: Date },\n        department: { type: mongoose.Schema.Types.ObjectId, ref: \"departments\" },\n        onBoardDate: { type: Date },\n        cDate: { type: Date, default: Date.now },\n        uDate: { type: Date, default: Date.now },\n        dDate: { type: Date }\n    },\n    billType: {\n        name: { type: String, unique: true },\n        parentBillType: { type: mongoose.Schema.Types.ObjectId, ref: \"billTypes\" },\n        cDate: { type: Date, default: Date.now },\n        uDate: { type: Date, default: Date.now },\n        dDate: { type: Date }\n    },\n    bill: {\n        title: { type: String },\n        content: { type: String },\n        billType: { type: mongoose.Schema.Types.ObjectId, ref: \"billTypes\" },\n        billDate: { type: Date },\n        amount: { type: Number },\n        reimburser: { type: mongoose.Schema.Types.ObjectId, ref: \"employees\" },\n        cDate: { type: Date, default: Date.now },\n        uDate: { type: Date, default: Date.now },\n        dDate: { type: Date }\n    }\n};\n\n/*\r\n* 根据define/validateRule/validateRule的rule设置schema的rule\r\n* */\n//validateInput中的rule，在mongoose中对应的validator\nvar ruleMatch = {\n    require: 'required',\n    min: 'min',\n    max: 'max',\n    minLength: 'minlength',\n    maxLength: 'maxlength',\n    format: 'match',\n    'enum': 'enum'\n};\n//console.log(fieldDefine['department']['parentDepartment'])\n/*                          将inputRule中的rule定义转换成mongoose内置validator                          */\n//根据flag确实是否要为field设置内建validator\nif (true === mongoSetting.schemaOptions.validateFlag) {\n    for (var singleCollectionsName in fieldDefine) {\n        //读取每个collection\n        for (var singleFiled in fieldDefine[singleCollectionsName]) {\n            //读取每个collection下的字段（path）\n            for (var singleItem in inputRule[singleCollectionsName][singleFiled]) {\n                //读取每个字段下对应在inputRule下的每个rule\n                if (ruleMatch[singleItem]) {\n                    //rule是否在mongo中有对应的内建validator\n                    var singleRuleValue = inputRule[singleCollectionsName][singleFiled][singleItem];\n\n                    //如果define是format，且value为ObjectID，则无需在mongo上设置对应的内建validator（因为type为objectId的字段会自动判断输入值是否为objectId,er无需添加额外的validator）\n                    if ('format' === singleItem) {\n                        if (regex.objectId === singleRuleValue['define']) {\n                            continue;\n                        }\n                    }\n\n                    if (false !== singleRuleValue['define']) {\n                        //一般而言，有define就可以判断为有validator，但是require比较特殊，只有true才认为有对应的定义\n                        if (fieldDefine[singleCollectionsName][singleFiled]) {\n                            //对应的field在mongo中有定义，则为此field添加validator\n                            fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]] = [];\n                            fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]].push(singleRuleValue['define']);\n                            //fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]].push(singleRuleValue['mongoError'])\n                            var errorMsg = '错误代码' + singleRuleValue['mongoError']['rc'] + ':' + singleRuleValue['mongoError']['msg'];\n                            fieldDefine[singleCollectionsName][singleFiled][ruleMatch[singleItem]].push(errorMsg); //只能接受字符串\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// fs.writeFile('mongodb.txt',JSON.stringify(fieldDefine))\n//console.log(fieldDefine['department']['name'])\n//console.log(fieldDefine['employee']['gender']['enum'])\n//console.log(JSON.stringify(fieldDefine['billType']))\n\nvar userSchema = new mongoose.Schema(fieldDefine['user'], schemaOptions);\n\nvar departmentSchema = new mongoose.Schema(fieldDefine['department'], schemaOptions);\n\nvar employeeSchema = new mongoose.Schema(fieldDefine['employee'], schemaOptions);\nvar billTypeSchema = new mongoose.Schema(fieldDefine['billType'], schemaOptions);\n\nvar billSchema = new mongoose.Schema(fieldDefine['bill'], schemaOptions);\n\nvar userModel = dbFinance.model('users', userSchema);\nvar departmentModel = dbFinance.model('departments', departmentSchema);\nvar employeeModel = dbFinance.model('employees', employeeSchema);\nvar billTypeModel = dbFinance.model('billTypes', billTypeSchema);\nvar billModel = dbFinance.model('bills', billSchema);\n\n//console.log(billModel)\nmodule.exports = {\n    userModel: userModel,\n    departmentModel: departmentModel,\n    employeeModel: employeeModel,\n    billTypeModel: billTypeModel,\n    billModel: billModel,\n    //以下export，为了mongoValidate\n    collections: collections,\n    fieldDefine: fieldDefine\n}; //\n\n//# sourceMappingURL=structure-compiled.js.map"]}