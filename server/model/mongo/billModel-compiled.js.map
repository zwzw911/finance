{"version":3,"sources":["billModel.js"],"names":[],"mappings":"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","file":"billModel-compiled.js","sourcesContent":["/**\r\n * Created by Ada on 2016/9/28.\r\n */\r\n'use strict'\r\nrequire(\"babel-polyfill\");\r\nrequire(\"babel-core/register\")\r\n\r\nvar billTypeModel=require('./common/structure-compiled').billTypeModel\r\nvar mongooseErrorHandler=require('../../define/error/mongoError').mongooseErrorHandler\r\n\r\nvar pageSetting=require('../../config/global/globalSettingRule').pageSetting\r\n\r\n\r\nvar updateOptions={\r\n    'new':true,//是否返回更新后的doc。默认false，返回原始doc。设为true，返回更新后的数据（给client）\r\n    'select':'', //返回哪些字段\r\n    'upsert':false,//如果doc不存在，是否创建新的doc，默认false\r\n    runValidators:false,//更新时是否执行validator。因为默写cavert，默认false\r\n    setDefaultsOnInsert:false,//当upsert为true && 设为true，则插入文档时，使用default。\r\n    'sort':'_id',//如果找到多个文档（应该不太可能），按照什么顺序选择第一个文档进行update。\r\n}\r\n\r\n//populate的选项\r\n// var populateOpt=\r\n\r\nfunction create(values){\r\n    //不能直接返回promise，而是通过callback捕获可能错误，并转换成可读格式\r\n    //return billModel.insertMany(values)\r\n    return new Promise(function(resolve,reject){\r\n        // console.log(`inserted values ${values}`)\r\n\r\n        billModel.insertMany(values,function(err,result){\r\n            if(err){\r\n                //console.log(JSON.stringify(err))\r\n                //能返回自定义错误，所以用resolve而不是reject\r\n                resolve( mongooseErrorHandler(err))\r\n            }else{\r\n                resolve({rc:0,msg:result})\r\n            }\r\n        })\r\n    })\r\n}\r\nfunction update(id,values){\r\n\r\n    values['uDate']=Date.now()\r\n    return new Promise(function(resolve,reject){\r\n        billModel.findByIdAndUpdate(id,values,updateOptions).exec(function(err,result){\r\n            if(err){\r\n                //console.log(`db err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            //update成功，返回的是原始记录，需要转换成可辨认格式\r\n            resolve({rc:0,msg:result})\r\n        })\r\n    })\r\n}\r\n\r\n//根据Id删除文档\r\nfunction remove(id){\r\n    return new Promise(function(resolve,reject){\r\n/*        billModel.findByIdAndRemove(id,function(err,result){\r\n            if(err){\r\n                //console.log(`db err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            //console.log(`success result is ${result}`)\r\n            //remove成功，返回的是原始记录，需要转换成可辨认格式\r\n            resolve({rc:0})\r\n        })*/\r\n        let values={}\r\n        values['dDate']=Date.now()\r\n        billModel.findByIdAndUpdate(id,values,updateOptions,function(err,result){\r\n            if(err){\r\n                // console.log(`db err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }else{\r\n                // console.log(`department insert result is ${JSON.stringify(result)}`)\r\n                //resolve({rc:0,msg:result})\r\n                //只需返回是否执行成功，而无需返回update后的doc\r\n                resolve({rc:0})\r\n            }\r\n\r\n        })\r\n    })\r\n}\r\n\r\n//只做测试用\r\nfunction removeAll(){\r\n    return new Promise(function(resolve,reject){\r\n        billModel.remove({},function(err,result){\r\n            if(err){\r\n                console.log(`bill removeAll err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            //console.log(`success result is ${result}`)\r\n            //remove成功，返回的是原始记录，需要转换成可辨认格式\r\n            resolve({rc:0})\r\n        })\r\n    })\r\n}\r\n\r\nfunction readAll(populateOpt){\r\n    return new Promise(function(resolve,reject){\r\n        let condition={dDate:{$exists:false}}\r\n        let selectField=null\r\n        let option={}\r\n        option.limit=pageSetting.bill.limit\r\n        billModel.find(condition,selectField,option).populate(populateOpt).exec(function (err,result) {\r\n            if(err){\r\n                // console.log(`db err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            resolve({rc:0,msg:result})\r\n        })\r\n    })\r\n}\r\n\r\n//无需readName，因为不做其他collection的外键\r\n/*function readName(nameToBeSearched){\r\n    return new Promise(function(resolve,reject){\r\n        let condition={}\r\n        if(undefined!==nameToBeSearched && ''!== nameToBeSearched.toString()){\r\n            condition['name']=new RegExp(nameToBeSearched)\r\n        }\r\n        let selectField='name'\r\n        let option={}\r\n        option.limit=pageSetting.billType.limit\r\n        billModel.find(condition,selectField,option,function(err,result){\r\n            if(err){\r\n                //console.log(`db err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            //console.log(`success result is ${result}`)\r\n            resolve({rc:0,msg:result})\r\n        })\r\n    })\r\n}*/\r\n\r\n//作为外键时，是否存在\r\nfunction findById(id,selectedFields='-cDate -uDate -dDate'){\r\n    return new Promise(function(resolve,reject){\r\n        billModel.find(id,selectedFields,function(err,result){\r\n            if(err){\r\n                //console.log(`db err is ${err}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            resolve({rc:0,msg:result})\r\n        })\r\n    })\r\n}\r\n\r\nfunction  search(searchParams) {\r\n    return new Promise(function(resolve,reject){\r\n        console.log(`billType search in with params ${searchParams}`)\r\n        billModel.find(searchParams,function(err,result){\r\n            if(err){\r\n                console.log(`db err is ${JSON.stringify(err)}`)\r\n                resolve( mongooseErrorHandler(err))\r\n            }\r\n            console.log(`bill find result is ${JSON.stringify(result)}`)\r\n            resolve({rc:0,msg:result})\r\n        })\r\n    })\r\n}\r\n\r\nmodule.exports={\r\n    create,\r\n    update,\r\n    remove,\r\n    removeAll,\r\n    readAll,\r\n    // readName,\r\n    findById,\r\n    search,\r\n}"]}