{"version":3,"sources":["mongoError.js"],"names":[],"mappings":"AAAA;;;;;AAKA;;;;AACA,QAAQ,gBAAR;AACA,QAAQ,qBAAR;AACI;AACJ,IAAI,YAAU,QAAQ,2BAAR,EAAqC,SAAnD;AACA,IAAI,iBAAe,QAAQ,cAAR,EAAwB,IAAxB,CAA6B,UAAhD;;AAEA;;;;;AAKA,IAAI,uBAAqB,SAArB,oBAAqB,CAAS,UAAT,EAA2B;AAAA,QAAP,GAAO,yDAAH,EAAG;;AAChD;AACA,YAAQ,UAAR;AACI,aAAK,eAAe,UAApB;AACI,gBAAG,IAAI,IAAJ,IAAY,UAAQ,IAAI,IAA3B,EAAgC;AAC5B,uBAAO,YAAY,MAAZ,CAAmB,SAAnB,CAA6B,IAAI,MAAjC,CAAP;AACH;AACD;AACJ;AACI,gBAAG,IAAI,IAAP,EAAa;AACT,uBAAO,YAAY,MAAZ,CAAmB,gBAAnB,CAAoC,GAApC,CAAP;AACH;AATT;AAWA;AACA,QAAG,IAAI,MAAP,EAAc;AACV,aAAI,IAAI,MAAR,IAAkB,IAAI,MAAtB,EAA6B;AACzB,gBAAG,IAAI,MAAJ,CAAW,MAAX,EAAmB,SAAnB,CAAH,EAAiC;AAC7B,oBAAI,KAAG,EAAP;AACA,oBAAI,MAAI,IAAI,MAAJ,CAAW,MAAX,EAAmB,SAAnB,EAA8B,KAA9B,CAAoC,GAApC,CAAR;AACA,oBAAI,eAAa,IAAI,CAAJ,EAAO,KAAP,CAAa,WAAb,CAAjB;AACA,oBAAI,aAAW,aAAa,CAAb,CAAf;AACA,mBAAG,IAAH,IAAS,UAAT;AACA,mBAAG,KAAH,IAAU,IAAI,CAAJ,CAAV;AACA,uBAAO,EAAP;AACH;AACJ;AACD;AACH;;AAED;AACA,YAAQ,GAAR,oBAA6B,KAAK,SAAL,CAAe,UAAf,CAA7B;AACA,WAAO,YAAY,QAAZ,EAAsB,UAAtB,EAAkC,GAAlC,CAAP;AACH,CAhCD;;AAkCA;AACA,IAAI,cAAY;AACZ,YAAO;AACH,0BAAiB,0BAAS,GAAT,EAAa;AAC1B,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,kBAAD,EAAmB,aAAU,KAAK,SAAL,CAAe,GAAf,CAA7B,EAAd,EAAP;AACH,SAHE;AAIH,mBAAU,mBAAS,MAAT,EAAgB;AACtB;AACA;AACA,oBAAQ,GAAR,+BAAwC,MAAxC;AACA,gBAAI,QAAM,sEAAV;AACA,gBAAI,QAAM,OAAO,KAAP,CAAa,KAAb,CAAV;AACA,gBAAI,cAAY,MAAM,CAAN,CAAhB;AACA,gBAAI,MAAI,YAAY,KAAZ,CAAkB,GAAlB,CAAR;;AAPsB,sCAQF,GARE;;AAAA,gBAQjB,EARiB;AAAA,gBAQd,IARc;AAAA,gBAQT,KARS;;AAStB,oBAAM,MAAM,KAAN,CAAY,GAAZ,EAAiB,CAAjB,EAAoB,OAApB,CAA4B,GAA5B,EAAgC,EAAhC,CAAN,CATsB,CASoB;AAC1C,gBAAI,WAAS,YAAY,CAAZ,CAAb;;AAEZ;;;;;AAKY;AACA;AACA;AACA,gBAAG,QAAM,KAAK,KAAK,MAAL,GAAY,CAAjB,CAAT,EAA6B;AACzB,uBAAK,KAAK,SAAL,CAAe,CAAf,EAAiB,KAAK,MAAL,GAAY,CAA7B,CAAL;AACH;;AAEb;;;;AAIY;AACA,gBAAI,oBAAJ;AACA,iBAAI,IAAI,UAAR,IAAsB,SAAtB,EAAgC;AAC5B;AACA,oBAAG,WAAW,WAAX,OAA2B,IAA9B,EAAmC;AAC/B;;AAEA,kCAAY,UAAU,UAAV,EAAsB,KAAtB,EAA6B,aAA7B,CAAZ;AACH;AACJ;AACD,oBAAQ,GAAR;AACA,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,QAAU,WAAV,WAAD,EAA+B,eAAY,IAAZ,WAAsB,KAAtB,UAAgC,QAAhC,OAA/B,EAAd,EAAP;AACH,SA5CE;AA6CH,kBAAS,kBAAS,GAAT,EAAa;AAClB,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,sBAAD,EAAuB,6BAA0B,KAAK,SAAL,CAAe,GAAf,CAAjD,EAAd,EAAP;AACH,SA/CE;AAgDH,2BAAkB,2BAAS,GAAT,EAAa;AAC3B,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,sBAAD,EAAuB,sCAAmC,KAAK,SAAL,CAAe,GAAf,CAA1D,EAAd,EAAP;AACH,SAlDE;AAmDH,gBAAO,gBAAS,GAAT,EAAa;AAChB,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,sBAAD,EAAuB,2BAAwB,KAAK,SAAL,CAAe,GAAf,CAA/C,EAAd,EAAP;AACH,SArDE;AAsDH,iBAAQ,iBAAS,GAAT,EAAa;AACjB,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,sBAAD,EAAuB,6BAA0B,KAAK,SAAL,CAAe,GAAf,CAAjD,EAAd,EAAP;AACH,SAxDE;AAyDH,kBAAS,kBAAS,GAAT,EAAa;AAClB,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,sBAAD,EAAuB,8BAA2B,KAAK,SAAL,CAAe,GAAf,CAAlD,EAAd,EAAP;AACH,SA3DE;AA4DH,gBAAO,gBAAS,GAAT,EAAa;AAChB,mBAAO,EAAC,IAAG,KAAJ,EAAU,KAAI,EAAC,sBAAD,EAAuB,2BAAwB,KAAK,SAAL,CAAe,GAAf,CAA/C,EAAd,EAAP;AACH;AA9DE;AADK,CAAhB;;AAmEA,OAAO,OAAP,GAAe;AACX,8CADW;AAEX;AAFW,CAAf","file":"mongoError-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-10-04.\r\n *\r\n * 定义mogoose操作错误\r\n */\r\n'use strict'\r\nrequire(\"babel-polyfill\");\r\nrequire(\"babel-core/register\")\r\n    //用来或侧chineseName，以便返回错误给client\r\nvar inputRule=require('../validateRule/inputRule').inputRule\r\nvar mongooseOpEnum=require('../enum/node').node.mongooseOp\r\n\r\n/*\r\n* mongoose操作错误（不包含validator的错误？？）\r\n* err:mongo返回的错误\r\n* fieldName：如果是validto人返回的错误，需要fieldName来获得err中的errormsg\r\n* */\r\nvar mongooseErrorHandler=function(mongooseOp,err={}){\r\n    //对特殊的操作做pre操作，如果有具体的error code，返回对应的error\r\n    switch (mongooseOp){\r\n        case mongooseOpEnum.insertMany:\r\n            if(err.code && 11000===err.code){\r\n                return errorDefine.common.duplicate(err.errmsg)\r\n            }\r\n            break;\r\n        default:\r\n            if(err.code ){\r\n                return errorDefine.common.unknownErrorType(err)\r\n            }\r\n    }\r\n    //mongo validator错误。将错误 \"错误代码20046:父类别不能为空\" 转换成{rc:20046,msg:‘父类别不能为空’}\r\n    if(err.errors){\r\n        for(let single in err.errors){\r\n            if(err.errors[single]['message']){\r\n                let rc={}\r\n                let tmp=err.errors[single]['message'].split(':')\r\n                let regResultTmp=tmp[0].match(/.+(\\d{5})/)\r\n                let returnCode=regResultTmp[1]\r\n                rc['rc']=returnCode\r\n                rc['msg']=tmp[1]\r\n                return rc\r\n            }\r\n        }\r\n        //return err['errors'][fieldName]['message']\r\n    }\r\n\r\n    //具体操作祥光的error\r\n    console.log(`common err is ${JSON.stringify(mongooseOp)}`)\r\n    return errorDefine['common'][mongooseOp](err)\r\n}\r\n\r\n//常见错误\r\nvar errorDefine={\r\n    common:{\r\n        unknownErrorType:function(err){\r\n            return {rc:30000,msg:{client:`未知数据操作错误`,server:`${JSON.stringify(err)}`}}\r\n        },\r\n        duplicate:function(errmsg){\r\n            //'E11000 duplicate key error index: finance.billtypes.$name_1 dup key: { : \\\"aa\\\" }'=======>finance  billType   name\r\n            //3.2.9   E11000 duplicate key error collection: finance.billtypes index: name_1 dup key: { : \"aa\" }\r\n            console.log(`mongoError->errorDefine: ${errmsg}`)\r\n            let regex=/E11000 duplicate key error index:(.*)\\sdup\\skey:\\s{\\s:\\s\\\"(.*)\\\"\\s\\}/\r\n            let match=errmsg.match(regex)\r\n            let matchResult=match[1]\r\n            let tmp=matchResult.split('.')\r\n            let [db,coll,field]=tmp\r\n            field=field.split(\"_\")[0].replace(\"$\",\"\") //$name_1===>$name\r\n            let dupValue=matchResult[2]\r\n\r\n/*            let regex=/.*collection:\\s(.*)\\sindex:\\s(.*)\\sdup\\skey:\\s{\\s:\\s\\\"(.*)\\\"\\s\\}/\r\n            let matchResult=errmsg.match(regex)\r\n            let [db,coll]=matchResult[1].split(\".\")\r\n            let field=matchResult[2].split(\"_\")[0]\r\n            let dupValue=matchResult[3]*/\r\n            // console.log(`db is ${db},coll is ${coll}, field is ${field}, dup is ${dupValue}`)\r\n            //mongoose自动将coll的名称加上s，为了和inputRule匹配，删除s\r\n            //let trueCollName\r\n            if('s'===coll[coll.length-1]){\r\n                coll=coll.substring(0,coll.length-1)\r\n            }\r\n\r\n/*            let fieldRegex=/\\$(\\w+)_.*!/\r\n            tmp=field.match(fieldRegex)\r\n            field=tmp[1]*/\r\n\r\n            //mongoose 自动将coll的名称改成全小写\r\n            let chineseName\r\n            for(let singleColl in inputRule){\r\n                // console.log(`for coll is ${singleColl}`)\r\n                if(singleColl.toLowerCase()===coll){\r\n                    // console.log(`match coll is ${singleColl}`)\r\n\r\n                    chineseName=inputRule[singleColl][field]['chineseName']\r\n                }\r\n            }\r\n            console.log(`ready to return mongooseErrorHandler`)\r\n            return {rc:30002,msg:{client:`${chineseName}的值已经存在`,server:`集合${coll}的字段${field}的值${dupValue}重复`}}\r\n        },\r\n        findById:function(err){\r\n            return {rc:30004,msg:{client:`数据库错误，请联系管理员`,server:`findById err is ${JSON.stringify(err)}`}}\r\n        },\r\n        findByIdAndUpdate:function(err){\r\n            return {rc:30006,msg:{client:`数据库错误，请联系管理员`,server:`findByIdAndUpdate err is ${JSON.stringify(err)}`}}\r\n        },\r\n        remove:function(err){\r\n            return {rc:30008,msg:{client:`数据库错误，请联系管理员`,server:`remove err is ${JSON.stringify(err)}`}}\r\n        },\r\n        readAll:function(err){\r\n            return {rc:30010,msg:{client:`数据库错误，请联系管理员`,server:`read all err is ${JSON.stringify(err)}`}}\r\n        },\r\n        readName:function(err){\r\n            return {rc:30012,msg:{client:`数据库错误，请联系管理员`,server:`read name err is ${JSON.stringify(err)}`}}\r\n        },\r\n        search:function(err){\r\n            return {rc:30014,msg:{client:`数据库错误，请联系管理员`,server:`search err is ${JSON.stringify(err)}`}}\r\n        },\r\n    }\r\n}\r\n\r\nmodule.exports={\r\n    mongooseErrorHandler,\r\n    errorDefine\r\n}"]}