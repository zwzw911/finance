{"version":3,"sources":["mongoError-compiled.js"],"names":[],"mappings":"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","file":"mongoError-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/**\r\n * Created by wzhan039 on 2016-10-04.\r\n *\r\n * 定义mogoose操作错误\r\n */\n\n//用来或侧chineseName，以便返回错误给client\nvar inputRule = require('../validateRule/inputRule').inputRule;\n\n/*\r\n* mongoose操作错误（不包含validator的错误？？）\r\n* err:mongo返回的错误\r\n* fieldName：如果是validto人返回的错误，需要fieldName来获得err中的errormsg\r\n* */\nvar mongooseErrorHandler = function mongooseErrorHandler(err) {\n    //普通mongo错误\n    if (err.code) {\n        switch (err.code) {\n            case 11000:\n                return errorDefine.common.duplicate(err.errmsg);\n            default:\n                return errorDefine.common.unknownErrorType(err);\n        }\n    }\n    //mongo validator错误。将错误 \"错误代码20046:父类别不能为空\" 转换成{rc:20046,msg:‘父类别不能为空’}\n    if (err.errors) {\n        for (var single in err.errors) {\n            if (err.errors[single]['message']) {\n                var rc = {};\n                var tmp = err.errors[single]['message'].split(':');\n                var regResultTmp = tmp[0].match(/.+(\\d{5})/);\n                var returnCode = regResultTmp[1];\n                rc['rc'] = returnCode;\n                rc['msg'] = tmp[1];\n                return rc;\n            }\n        }\n        //return err['errors'][fieldName]['message']\n    }\n};\n\n//常见错误\nvar errorDefine = {\n    common: {\n        unknownErrorType: function unknownErrorType(err) {\n            return { rc: 30000, msg: { client: '未知数据操作错误', server: '' + JSON.stringify(err) } };\n        },\n        duplicate: function duplicate(errmsg) {\n            //'E11000 duplicate key error index: finance.billtypes.$name_1 dup key: { : \\\"aa\\\" }'=======>finance  billType   name\n            var regex = /.*error\\s+index:(.*)\\s+dup.+/;\n            var match = errmsg.match(regex);\n            var matchResult = match[1];\n            var tmp = matchResult.split('.');\n            var _tmp = tmp;\n\n            var _tmp2 = _slicedToArray(_tmp, 3);\n\n            var db = _tmp2[0];\n            var coll = _tmp2[1];\n            var field = _tmp2[2];\n            //mongoose自动将coll的名称加上s，为了和inputRule匹配，删除s\n            //let trueCollName\n\n            if ('s' === coll[coll.length - 1]) {\n                coll = coll.substring(0, coll.length - 1);\n            }\n\n            var fieldRegex = /\\$(\\w+)_.*/;\n            tmp = field.match(fieldRegex);\n            field = tmp[1];\n\n            //mongoose 自动将coll的名称改成全小写\n            var chineseName = void 0;\n            for (var singleColl in inputRule) {\n                if (singleColl.toLowerCase() === coll) {\n                    chineseName = inputRule[singleColl][field]['chineseName'];\n                }\n            }\n\n            return { rc: 30002, msg: { client: chineseName + '的值已经存在', server: '集合' + coll + '的字段' + field + '的值重复' } };\n        }\n    }\n};\n\nmodule.exports = {\n    mongooseErrorHandler: mongooseErrorHandler,\n    errorDefine: errorDefine\n};\n\n//# sourceMappingURL=mongoError-compiled.js.map"]}