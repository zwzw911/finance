{"version":3,"sources":["inputRule.js"],"names":[],"mappings":"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","file":"inputRule-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-03-03.\r\n * 对浏览器传入的数据的检测定义\r\n */\r\n\r\nvar regex=require('../regex/regex').regex\r\n\r\nvar inputDataType=require('../enum/validEnum').enum.dataType\r\n/*********************************************/\r\n/* input定义，理论上应该定义单独文件中       */\r\n/*********************************************/\r\n//在server端，定义和属性放在一起（属性没几个）\r\n//chineseName和type为必需。 type:输入数据的类型，string、int、date、boolean。array，object，默认是string\r\n//结构按照mongoDB的collection进行划分，因为input的数据最终还是要存入db\r\n\r\n//mongodb的validate error是client input validate的一个子集\r\n//只需要error定义，input value的msg是由validate函数自动产生的；\r\n//每个rule都有对应的mongo error，但是具体是否使用，在mongoValidate中定义\r\n\r\n//rule分成2种：一种是逐条检测（min/max/minLength/maxLength）；另一种是一次检测（regex）。前者用在client端，以便返回详细信息给客户；后者用在server端，一次检测完，并返回所有错误信息（当然server也可以使用前者，视情况而定）\r\n/*\r\n* _id不列入rule中，而是在checkInput中加入code，如果有_id，则检查，否则忽略\r\n* cDate/uDate/dDate由后台的mongodb或者server控制，无需从前端输入，所以也不用放在inputRule中\r\n* */\r\n\r\nvar inputRule={\r\n\r\n    user:{\r\n        name:{\r\n            chineseName: '用户名',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10000},mongoError:{rc:20000,msg:'用户名不能为空'}},//mongoError在mongovalidator中，从Object转换成String，因为mongo的validtor只能接受String作为fail的返回信息\r\n            minLength:{define:2,error:{rc:10002},mongoError:{rc:20002,msg:'用户名至少2个字符'}},\r\n            maxLength:{define:20,error:{rc:10004},mongoError:{rc:20004,msg:'用户名的长度不能超过20个字符'}},\r\n            format:{define:regex.userName,error:{rc:10005},mongoError:{rc:20005,msg:'用户名必须由2-10个字符组成'}} //server端使用\r\n        },\r\n        salt:{\r\n            chineseName: '盐',\r\n            type:inputDataType.string,\r\n            //require=false：client无需此字段，server通过函数（必须有salt来sha密码）保证由此字段\r\n            require: {define: false, error: {rc: 10000},mongoError:{rc:20000,msg:'盐不能为空'}},//mongoError在mongovalidator中，从Object转换成String，因为mongo的validtor只能接受String作为fail的返回信息\r\n            minLength:{define:1,error:{rc:10002},mongoError:{rc:20002,msg:'盐至少1个字符'}},\r\n            maxLength:{define:10,error:{rc:10004},mongoError:{rc:20004,msg:'盐的长度不能超过10个字符'}},\r\n            format:{define:regex.salt,error:{rc:10005},mongoError:{rc:20005,msg:'盐必须由1-10个字符组成'}} //server端使用\r\n        },\r\n        //password会经过转换（所以不存入db）\r\n        password:{\r\n            chineseName: '密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10000},mongoError:{rc:20000,msg:'密码不能为空'}},//mongoError在mongovalidator中，从Object转换成String，因为mongo的validtor只能接受String作为fail的返回信息\r\n            minLength:{define:6,error:{rc:10002},mongoError:{rc:20002,msg:'密码至少6个字符'}},\r\n            maxLength:{define:20,error:{rc:10004},mongoError:{rc:20004,msg:'密码的长度不能超过20个字符'}},\r\n            format:{define:regex.password,error:{rc:10005},mongoError:{rc:20005,msg:'密码必须由6-20个字符组成'}} //server端使用\r\n        },\r\n        //client无法检测(通过matchList过滤掉)；server端需要，作为可能的mongodb级别的alidator\r\n        encryptedPassword:{\r\n            chineseName: '密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10000},mongoError:{rc:20000,msg:'密码不能为空'}},//mongoError在mongovalidator中，从Object转换成String，因为mongo的validtor只能接受String作为fail的返回信息\r\n/*            minLength:{define:6,error:{rc:10002},mongoError:{rc:20002,msg:'密码至少6个字符'}},\r\n            maxLength:{define:20,error:{rc:10004},mongoError:{rc:20004,msg:'密码的长度不能超过20个字符'}},*/\r\n            format:{define:regex.sha1Hash,error:{rc:10005},mongoError:{rc:20005,msg:'密码必须由6-20个字符组成'}} //加密密码只在server端使用            \r\n        },\r\n/*        cDate:{\r\n            chineseName:'创建日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10010},mongoError:{rc:20010,msg:'创建日期不能为空'}},\r\n        },\r\n        uDate:{\r\n            chineseName:'修改日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10012},mongoError:{rc:20012,msg:'修改日期不能为空'}},\r\n        },\r\n        dDate:{\r\n            chineseName:'删除日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10014},mongoError:{rc:20014,msg:'删除日期不能为空'}},\r\n        }*/\r\n    },\r\n    department:{//名称必须和mongo中的一致\r\n        name:{\r\n            chineseName: '部门名称',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10000},mongoError:{rc:20000,msg:'部门名称不能为空'}},//mongoError在mongovalidator中，从Object转换成String，因为mongo的validtor只能接受String作为fail的返回信息\r\n            minLength:{define:2,error:{rc:10002},mongoError:{rc:20002,msg:'部门名称至少2个字符'}},\r\n            maxLength:{define:20,error:{rc:10004},mongoError:{rc:20004,msg:'部门名称的长度不能超过20个字符'}},\r\n            format:{define:regex.userName,error:{rc:10005},mongoError:{rc:20005,msg:'部门名称必须由2-20个字符组成'}} //server端使用\r\n        },\r\n        parentDepartment:{\r\n            chineseName:'上级部门',\r\n            type:inputDataType.objeectId,\r\n            require: {define: false, error: {rc: 10006},mongoError:{rc:20006,msg:'上级部门不能为空'}},\r\n            format:{define:regex.objectId,error:{rc:10008},mongoError:{rc:20008,msg:'上级部门的id格式不正确'}},//format == mongodb_match\r\n        },\r\n/*        cDate:{\r\n            chineseName:'创建日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10010},mongoError:{rc:20010,msg:'创建日期不能为空'}},\r\n        },\r\n        uDate:{\r\n            chineseName:'修改日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10012},mongoError:{rc:20012,msg:'修改日期不能为空'}},\r\n        },\r\n        dDate:{\r\n            chineseName:'删除日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10014},mongoError:{rc:20014,msg:'删除日期不能为空'}},\r\n        }*/\r\n    },\r\n    employee:{\r\n        name:{\r\n            chineseName: '员工姓名',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10020},mongoError:{rc:20020,msg:'员工姓名不能为空'}},\r\n            minLength:{define:2,error:{rc:10021},mongoError:{rc:20021,msg:'员工姓名至少2个字符'}},\r\n            maxLength:{define:20,error:{rc:10022},mongoError:{rc:20022,msg:'员工姓名的长度不能超过20个字符'}},//lient或者server从使用\r\n            format:{define:regex.userName,error:{rc:10023},mongoError:{rc:20023,msg:'员工姓名必须由2-20个字符组成'}} //server端使用\r\n/*            minLength:{define:2,error:{rc:10022},mongoError:{rc:20022}},\r\n            maxLength:{define:4,error:{rc:10024},mongoError:{rc:20024}},*/\r\n        },\r\n        leader:{\r\n            chineseName: '上级主管',\r\n            type:inputDataType.objeectId,\r\n            require: {define: false, error: {rc: 10024},mongoError:{rc:20024,msg:'员工姓名不能为空'}},\r\n            format:{define:regex.objectId,error:{rc:10026},mongoError:{rc:20026,msg:'所属部门的id格式不正确'}},\r\n        },\r\n        gender:{\r\n            chineseName: '性别',\r\n            'default':'male',\r\n            type:inputDataType.string,\r\n            require: {define: false, error: {rc: 10027},mongoError:{rc:20027,msg:'性别不能为空'}},\r\n            'enum':{define:['male','female'],error:{rc:10028},mongoError:{rc:20028,msg:'性别不正确'}},\r\n        },\r\n        birthDay:{\r\n            chineseName: '出生日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10028},mongoError:{rc:20028,msg:'出生日期不能为空'}},\r\n        },\r\n        department:{\r\n            chineseName:'所属部门',\r\n            type:inputDataType.objectId,\r\n            require: {define: true, error: {rc: 10030},mongoError:{rc:20030,msg:'所属部门不能为空'}},\r\n            format:{define:regex.objectId,error:{rc:10032},mongoError:{rc:20032,msg:'所属部门的id格式不正确'}},//format == mongodb_match\r\n        },\r\n        onBoardDate:{\r\n            chineseName:'入职日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10036},mongoError:{rc:20036,msg:'入职日期不能为空'}},\r\n        },\r\n/*        cDate:{\r\n            chineseName:'创建日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10038},mongoError:{rc:20038,msg:'创建日期不能为空'}},\r\n        },\r\n        uDate:{\r\n            chineseName:'修改日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10039},mongoError:{rc:20039,msg:'修改日期不能为空'}},\r\n        },\r\n        dDate:{\r\n            chineseName:'删除日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10040},mongoError:{rc:20040,msg:'删除日期不能为空'}},\r\n        }*/\r\n    },\r\n    billType:{\r\n        name:{\r\n            chineseName: '单据类别',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10041},mongoError:{rc:20041,msg:'单据类别不能为空'}},\r\n            minLength:{define:2,error:{rc:10042},mongoError:{rc:20042,msg:'单据类别至少2个字符'}},\r\n            maxLength:{define:40,error:{rc:10044},mongoError:{rc:20044,msg:'单据类别的长度不能超过40个字符'}},\r\n        },\r\n        parentBillType:{\r\n            chineseName:'父类别',\r\n            type:inputDataType.objectId,\r\n            require: {define: false, error: {rc: 10046},mongoError:{rc:20046,msg:'父类别不能为空'}},\r\n            format:{define:regex.objectId,error:{rc:10048},mongoError:{rc:20048,msg:'父类别的id格式不正确'}},//format == mongodb_match\r\n        },\r\n/*        cDate:{\r\n            chineseName:'创建日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10050},mongoError:{rc:20050,msg:'创建日期不能为空'}},\r\n        },\r\n        uDate:{\r\n            chineseName:'修改日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10052},mongoError:{rc:20052,msg:'修改日期不能为空'}},\r\n        },\r\n        dDate:{\r\n            chineseName:'删除日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10054},mongoError:{rc:20054,msg:'删除日期不能为空'}},\r\n        }*/\r\n    },\r\n    bill:{\r\n        title:{\r\n            chineseName: '单据抬头',\r\n            type:inputDataType.string,\r\n            require: {define: false, error: {rc: 10060},mongoError:{rc:20060,msg:'单据抬头不能为空'}},\r\n            minLength:{define:2,error:{rc:10062},mongoError:{rc:20062,msg:'单据抬头至少2个字符'}},\r\n            maxLength:{define:20,error:{rc:10064},mongoError:{rc:20064,msg:'单据抬头的长度不能超过20个字符'}},\r\n        },\r\n        content:{\r\n            chineseName: '单据内容',\r\n            type:inputDataType.string,\r\n            require: {define: false, error: {rc: 10066},mongoError:{rc:20066,msg:'单据内容不能为空'}},\r\n            minLength:{define:2,error:{rc:10068},mongoError:{rc:20068,msg:'单据内容至少2个字符'}},\r\n            maxLength:{define:60,error:{rc:10070},mongoError:{rc:20070,msg:'单据内容的长度不能超过60个字符'}},\r\n        },\r\n        billType:{\r\n            chineseName:'单据类别',\r\n            type:inputDataType.objectId,\r\n            require: {define: false, error: {rc: 10072},mongoError:{rc:20072,msg:'单据类别不能为空'}},\r\n            format:{define:regex.objectId,error:{rc:10074},mongoError:{rc:20074,msg:'单据类别的id格式不正确'}},//format == mongodb_match\r\n        },\r\n        billDate:{\r\n            chineseName:'单据日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10076},mongoError:{rc:20076,msg:'单据日期不能为空'}},\r\n        },\r\n        amount:{\r\n            chineseName:'报销金额',\r\n            // default:'1.20',\r\n            type:inputDataType.float,\r\n            require: {define: true, error: {rc: 10078},mongoError:{rc:20078,msg:'报销金额不能为空'}},\r\n            min:{define:0,error: {rc: 10080},mongoError:{rc:20080,msg:'报销金额不能小于0元'}},\r\n            max:{define:100000,error: {rc: 10082},mongoError:{rc:20082,msg:'报销金额不能大于100000元'}},\r\n        },\r\n        reimburser:{\r\n            chineseName:'报销员工',\r\n            type:inputDataType.objectId,\r\n            require: {define: true, error: {rc: 10884},mongoError:{rc:20084,msg:'报销员工不能为空'}},\r\n            format:{define:regex.objectId,error:{rc:10086},mongoError:{rc:20086,msg:'报销员工的id格式不正确'}},//format == mongodb_match\r\n        },\r\n/*\r\n        cDate:{\r\n            chineseName:'创建日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10090},mongoError:{rc:20090,msg:'创建日期不能为空'}},\r\n        },\r\n        uDate:{\r\n            chineseName:'修改日期',\r\n            type:inputDataType.date,\r\n            require: {define: true, error: {rc: 10092},mongoError:{rc:20092,msg:'修改日期不能为空'}},\r\n        },\r\n        dDate:{\r\n            chineseName:'删除日期',\r\n            type:inputDataType.date,\r\n            require: {define: false, error: {rc: 10094},mongoError:{rc:20094,msg:'删除日期不能为空'}},\r\n        }*/\r\n    }\r\n}\r\n\r\nmodule.exports={\r\n    inputRule,\r\n}\r\n/*var inputRuleDefine={\r\n    user:{\r\n        userName:{\r\n            chineseName: '用户名',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10000}},\r\n            //使用min/maxLength即可，不用正则，节省cpu\r\n            minLength: {define: 2, error: {rc: 10002}},\r\n            maxLength: {define: 40, error: {rc: 10004}}\r\n            //format:{define:regex.userName,error:{rc:10006}}\r\n        },\r\n        password:{\r\n            chineseName: '密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10010}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.loosePassword, error: {rc: 10012}}\r\n        },\r\n        //由password派生出来\r\n        encryptedPassword:{\r\n            chineseName: '加密密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10014}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.encryptedPassword, error: {rc: 10016}}\r\n        },\r\n        //只是为了显示不同的chineseName\r\n        oldPassword:{\r\n            chineseName: '旧密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10017}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.loosePassword, error: {rc: 10018}}\r\n        },\r\n        rePassword:{\r\n            chineseName: '再次输入密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10019}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.loosePassword, error: {rc: 10020}}\r\n        },\r\n        mobilePhone:{\r\n            chineseName: '手机号',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10030}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.mobilePhone, error: {rc: 10032}}\r\n        },\r\n        captcha:{\r\n            chineseName: '验证码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10022}},\r\n            exactLength:{define: 4, error: {rc: 10024}}\r\n        },\r\n        originalThumbnailName:{\r\n            chineseName: '头像',\r\n            type:inputDataType.file,\r\n            require: {define: true, error: {rc: 10030}},\r\n            format:{define: regex.originalThumbnail, error: {rc: 10032}}\r\n        },\r\n        hashedThumbnailName:{\r\n            chineseName: '头像',\r\n            type:inputDataType.file,\r\n            require: {define: true, error: {rc: 10040}},\r\n            format:{define: regex.hashedThumbnail, error: {rc: 10042}}\r\n        }\r\n    },\r\n\r\n    adminLogin: {\r\n        userName: {\r\n            chineseName: '用户名',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10100}},\r\n            minLength: {define: 2, error: {rc: 10102}},\r\n            maxLength: {define: 40, error: {rc: 10104}}\r\n        },\r\n        password: {\r\n            chineseName: '密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10110}},\r\n            //minLength:{define:2,error:{rc:9006}},\r\n            //maxLength:{define:20,error:{rc:9008}},\r\n            format: {define: regex.strictPassword, error: {rc: 10112}}\r\n        },\r\n        captcha:{\r\n            chineseName: '验证码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10120}},\r\n            exactLength:{define: 4, error: {rc: 10122}}\r\n        },\r\n    }\r\n}*/\r\n\r\n// exports.inputRuleDefine=inputRuleDefine"]}