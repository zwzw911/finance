{"version":3,"sources":["inputRule-compiled.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;AAKA,IAAI,QAAQ,QAAQ,gBAAR,EAA0B,KAAtC;;AAEA,IAAI,gBAAgB,QAAQ,mBAAR,EAA6B,IAA7B,CAAkC,QAAtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,YAAY;AACZ,gBAAY,EAAE;AACV,cAAM;AACF,yBAAa,MADX;AAEF,kBAAM,cAAc,MAFlB;AAGF,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD,EAHP,EAG2F;AAC7F,uBAAW,EAAE,QAAQ,CAAV,EAAa,OAAO,EAAE,IAAI,KAAN,EAApB,EAAmC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,YAAlB,EAA/C,EAJT;AAKF,uBAAW,EAAE,QAAQ,EAAV,EAAc,OAAO,EAAE,IAAI,KAAN,EAArB,EAAoC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,kBAAlB,EAAhD;AALT,SADE;AAQR,0BAAkB;AACd,yBAAa,MADC;AAEd,kBAAM,cAAc,MAFN;AAGd,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD,EAHK;AAId,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,cAAlB,EAA5D,EAJM,EARV;AAaR,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SAbC;AAkBR,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SAlBC;AAuBR,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD;AAHN;AAvBC,KADA;AA8BZ,cAAU;AACN,cAAM;AACF,yBAAa,MADX;AAEF,kBAAM,cAAc,MAFlB;AAGF,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD,EAHP;AAIF,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,kBAAlB,EAA5D;AACR;;AALE,SADA;AASN,gBAAQ;AACJ,yBAAa,MADT;AAEJ,kBAAM,cAAc,MAFhB;AAGJ,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD,EAHL;AAIJ,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,cAAlB,EAA5D;AAJJ,SATF;AAeN,oBAAY;AACR,yBAAa,MADL;AAER,kBAAM,cAAc,MAFZ;AAGR,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD,EAHD;AAIR,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,cAAlB,EAA5D,EAJA,EAfN;AAoBN,qBAAa;AACT,yBAAa,MADJ;AAET,kBAAM,cAAc,IAFX;AAGT,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD;AAHA,SApBP;AAyBN,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SAzBD;AA8BN,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SA9BD;AAmCN,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD;AAHN;AAnCD,KA9BE;AAuEZ,cAAU;AACN,cAAM;AACF,yBAAa,MADX;AAEF,kBAAM,cAAc,MAFlB;AAGF,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD,EAHP;AAIF,uBAAW,EAAE,QAAQ,CAAV,EAAa,OAAO,EAAE,IAAI,KAAN,EAApB,EAAmC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,YAAlB,EAA/C,EAJT;AAKF,uBAAW,EAAE,QAAQ,EAAV,EAAc,OAAO,EAAE,IAAI,KAAN,EAArB,EAAoC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,kBAAlB,EAAhD;AALT,SADA;AAQN,wBAAgB;AACZ,yBAAa,KADD;AAEZ,kBAAM,cAAc,MAFR;AAGZ,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,SAAlB,EAAlD,EAHG;AAIZ,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,aAAlB,EAA5D,EAJI,EARV;AAaN,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SAbD;AAkBN,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SAlBD;AAuBN,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD;AAHN;AAvBD,KAvEE;AAoGZ,UAAM;AACF,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,MAFjB;AAGH,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD,EAHN;AAIH,uBAAW,EAAE,QAAQ,CAAV,EAAa,OAAO,EAAE,IAAI,KAAN,EAApB,EAAmC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,YAAlB,EAA/C,EAJR;AAKH,uBAAW,EAAE,QAAQ,EAAV,EAAc,OAAO,EAAE,IAAI,KAAN,EAArB,EAAoC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,kBAAlB,EAAhD;AALR,SADL;AAQF,iBAAS;AACL,yBAAa,MADR;AAEL,kBAAM,cAAc,MAFf;AAGL,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD,EAHJ;AAIL,uBAAW,EAAE,QAAQ,CAAV,EAAa,OAAO,EAAE,IAAI,KAAN,EAApB,EAAmC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,YAAlB,EAA/C,EAJN;AAKL,uBAAW,EAAE,QAAQ,EAAV,EAAc,OAAO,EAAE,IAAI,KAAN,EAArB,EAAoC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,kBAAlB,EAAhD;AALN,SARP;AAeF,kBAAU;AACN,yBAAa,MADP;AAEN,kBAAM,cAAc,MAFd;AAGN,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD,EAHH;AAIN,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,cAAlB,EAA5D,EAJF,EAfR;AAoBF,kBAAU;AACN,yBAAa,MADP;AAEN,kBAAM,cAAc,IAFd;AAGN,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD;AAHH,SApBR;AAyBF,gBAAQ;AACJ,yBAAa,MADT;AAEJ,kBAAM,cAAc,KAFhB;AAGJ,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD,EAHL;AAIJ,iBAAK,EAAE,QAAQ,CAAV,EAAa,OAAO,EAAE,IAAI,KAAN,EAApB,EAAmC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,YAAlB,EAA/C,EAJD;AAKJ,iBAAK,EAAE,QAAQ,MAAV,EAAkB,OAAO,EAAE,IAAI,KAAN,EAAzB,EAAwC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,iBAAlB,EAApD;AALD,SAzBN;AAgCF,oBAAY;AACR,yBAAa,MADL;AAER,kBAAM,cAAc,MAFZ;AAGR,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD,EAHD;AAIR,oBAAQ,EAAE,QAAQ,MAAM,QAAhB,EAA0B,OAAO,EAAE,IAAI,KAAN,EAAjC,EAAgD,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,cAAlB,EAA5D,EAJA,EAhCV;;AAsCF,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SAtCL;AA2CF,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,IAAV,EAAgB,OAAO,EAAE,IAAI,KAAN,EAAvB,EAAsC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAlD;AAHN,SA3CL;AAgDF,eAAO;AACH,yBAAa,MADV;AAEH,kBAAM,cAAc,IAFjB;AAGH,qBAAS,EAAE,QAAQ,KAAV,EAAiB,OAAO,EAAE,IAAI,KAAN,EAAxB,EAAuC,YAAY,EAAE,IAAI,KAAN,EAAa,KAAK,UAAlB,EAAnD;AAHN;AAhDL;AApGM,CAAhB;;AA4JA,OAAO,OAAP,GAAiB;AACb,eAAW;AADE,CAAjB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;;AAEA","file":"inputRule-compiled-compiled.js","sourcesContent":["'use strict';\n\n/**\r\n * Created by wzhan039 on 2016-03-03.\r\n * 对浏览器传入的数据的检测定义\r\n */\n\nvar regex = require('../regex/regex').regex;\n\nvar inputDataType = require('../enum/validEnum').enum.dataType;\n/*********************************************/\n/* input定义，理论上应该定义单独文件中       */\n/*********************************************/\n//在server端，定义和属性放在一起（属性没几个）\n//chineseName和type为必需。 type:输入数据的类型，string、int、date、boolean。array，object，默认是string\n//结构按照mongoDB的collection进行划分，因为input的数据最终还是要存入db\n\n//mongodb的validate error是client input validate的一个子集\n//只需要error定义，input value的msg是由validate函数自动产生的；\n//每个rule都有对应的mongo error，但是具体是否使用，在mongoValidate中定义\n//\nvar inputRule = {\n    department: { //名称必须和mongo中的一致\n        name: {\n            chineseName: '部门名称',\n            type: inputDataType.string,\n            require: { define: true, error: { rc: 10000 }, mongoError: { rc: 20000, msg: '部门名称不能为空' } }, //mongoError在mongovalidator中，从Object转换成String，因为mongo的validtor只能接受String作为fail的返回信息\n            minLength: { define: 2, error: { rc: 10002 }, mongoError: { rc: 20002, msg: '部门名称至少2个字符' } },\n            maxLength: { define: 10, error: { rc: 10004 }, mongoError: { rc: 20004, msg: '部门名称的长度不能超过10个字符' } }\n        },\n        parentDepartment: {\n            chineseName: '上级部门',\n            type: inputDataType.string,\n            require: { define: false, error: { rc: 10006 }, mongoError: { rc: 20006, msg: '上级部门不能为空' } },\n            format: { define: regex.objectId, error: { rc: 10008 }, mongoError: { rc: 20008, msg: '上级部门的id格式不正确' } } },\n        cDate: {\n            chineseName: '创建日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10010 }, mongoError: { rc: 20010, msg: '创建日期不能为空' } }\n        },\n        uDate: {\n            chineseName: '修改日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10012 }, mongoError: { rc: 20012, msg: '修改日期不能为空' } }\n        },\n        dDate: {\n            chineseName: '删除日期',\n            type: inputDataType.date,\n            require: { define: false, error: { rc: 10014 }, mongoError: { rc: 20014, msg: '删除日期不能为空' } }\n        }\n    },\n    employee: {\n        name: {\n            chineseName: '员工姓名',\n            type: inputDataType.string,\n            require: { define: true, error: { rc: 10020 }, mongoError: { rc: 20020, msg: '员工姓名不能为空' } },\n            format: { define: regex.userName, error: { rc: 10022 }, mongoError: { rc: 20022, msg: '员工姓名必须由2-20个字符组成' } }\n            /*            minLength:{define:2,error:{rc:10022},mongoError:{rc:20022}},\r\n                        maxLength:{define:4,error:{rc:10024},mongoError:{rc:20024}},*/\n        },\n        leader: {\n            chineseName: '上级主管',\n            type: inputDataType.string,\n            require: { define: false, error: { rc: 10024 }, mongoError: { rc: 20024, msg: '员工姓名不能为空' } },\n            format: { define: regex.objectId, error: { rc: 10026 }, mongoError: { rc: 20026, msg: '所属部门的id格式不正确' } }\n        },\n        department: {\n            chineseName: '所属部门',\n            type: inputDataType.string,\n            require: { define: true, error: { rc: 10030 }, mongoError: { rc: 20030, msg: '所属部门不能为空' } },\n            format: { define: regex.objectId, error: { rc: 10032 }, mongoError: { rc: 20032, msg: '所属部门的id格式不正确' } } },\n        onBoardDate: {\n            chineseName: '入职日期',\n            type: inputDataType.date,\n            require: { define: false, error: { rc: 10036 }, mongoError: { rc: 20036, msg: '入职日期不能为空' } }\n        },\n        cDate: {\n            chineseName: '创建日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10038 }, mongoError: { rc: 20038, msg: '创建日期不能为空' } }\n        },\n        uDate: {\n            chineseName: '修改日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10039 }, mongoError: { rc: 20039, msg: '修改日期不能为空' } }\n        },\n        dDate: {\n            chineseName: '删除日期',\n            type: inputDataType.date,\n            require: { define: false, error: { rc: 10040 }, mongoError: { rc: 20040, msg: '删除日期不能为空' } }\n        }\n    },\n    billType: {\n        name: {\n            chineseName: '单据类别',\n            type: inputDataType.string,\n            require: { define: true, error: { rc: 10041 }, mongoError: { rc: 20041, msg: '单据类别不能为空' } },\n            minLength: { define: 2, error: { rc: 10042 }, mongoError: { rc: 20042, msg: '单据类别至少2个字符' } },\n            maxLength: { define: 40, error: { rc: 10044 }, mongoError: { rc: 20044, msg: '单据类别的长度不能超过40个字符' } }\n        },\n        parentBillType: {\n            chineseName: '父类别',\n            type: inputDataType.string,\n            require: { define: true, error: { rc: 10046 }, mongoError: { rc: 20046, msg: '父类别不能为空' } },\n            format: { define: regex.objectId, error: { rc: 10048 }, mongoError: { rc: 20048, msg: '父类别的id格式不正确' } } },\n        cDate: {\n            chineseName: '创建日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10050 }, mongoError: { rc: 20050, msg: '创建日期不能为空' } }\n        },\n        uDate: {\n            chineseName: '修改日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10052 }, mongoError: { rc: 20052, msg: '修改日期不能为空' } }\n        },\n        dDate: {\n            chineseName: '删除日期',\n            type: inputDataType.date,\n            require: { define: false, error: { rc: 10054 }, mongoError: { rc: 20054, msg: '删除日期不能为空' } }\n        }\n    },\n    bill: {\n        title: {\n            chineseName: '单据抬头',\n            type: inputDataType.string,\n            require: { define: false, error: { rc: 10060 }, mongoError: { rc: 20060, msg: '单据抬头不能为空' } },\n            minLength: { define: 2, error: { rc: 10062 }, mongoError: { rc: 20062, msg: '单据抬头至少2个字符' } },\n            maxLength: { define: 20, error: { rc: 10064 }, mongoError: { rc: 20064, msg: '单据抬头的长度不能超过20个字符' } }\n        },\n        content: {\n            chineseName: '单据内容',\n            type: inputDataType.string,\n            require: { define: false, error: { rc: 10066 }, mongoError: { rc: 20066, msg: '单据内容不能为空' } },\n            minLength: { define: 2, error: { rc: 10068 }, mongoError: { rc: 20068, msg: '单据内容至少2个字符' } },\n            maxLength: { define: 60, error: { rc: 10070 }, mongoError: { rc: 20070, msg: '单据内容的长度不能超过60个字符' } }\n        },\n        billType: {\n            chineseName: '单据类别',\n            type: inputDataType.string,\n            require: { define: false, error: { rc: 10072 }, mongoError: { rc: 20072, msg: '单据类别不能为空' } },\n            format: { define: regex.objectId, error: { rc: 10074 }, mongoError: { rc: 20074, msg: '单据类别的id格式不正确' } } },\n        billDate: {\n            chineseName: '单据日期',\n            type: inputDataType.date,\n            require: { define: false, error: { rc: 10076 }, mongoError: { rc: 20076, msg: '单据日期不能为空' } }\n        },\n        amount: {\n            chineseName: '报销金额',\n            type: inputDataType.float,\n            require: { define: true, error: { rc: 10078 }, mongoError: { rc: 20078, msg: '报销金额不能为空' } },\n            min: { define: 0, error: { rc: 10080 }, mongoError: { rc: 20080, msg: '报销金额不能小于0元' } },\n            max: { define: 100000, error: { rc: 10082 }, mongoError: { rc: 20082, msg: '报销金额不能大于100000元' } }\n        },\n        reimburser: {\n            chineseName: '报销员工',\n            type: inputDataType.string,\n            require: { define: true, error: { rc: 10884 }, mongoError: { rc: 20084, msg: '报销员工不能为空' } },\n            format: { define: regex.objectId, error: { rc: 10086 }, mongoError: { rc: 20086, msg: '报销员工的id格式不正确' } } },\n\n        cDate: {\n            chineseName: '创建日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10090 }, mongoError: { rc: 20090, msg: '创建日期不能为空' } }\n        },\n        uDate: {\n            chineseName: '修改日期',\n            type: inputDataType.date,\n            require: { define: true, error: { rc: 10092 }, mongoError: { rc: 20092, msg: '修改日期不能为空' } }\n        },\n        dDate: {\n            chineseName: '删除日期',\n            type: inputDataType.date,\n            require: { define: false, error: { rc: 10094 }, mongoError: { rc: 20094, msg: '删除日期不能为空' } }\n        }\n    }\n};\n\nmodule.exports = {\n    inputRule: inputRule\n};\n/*var inputRuleDefine={\r\n    user:{\r\n        userName:{\r\n            chineseName: '用户名',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10000}},\r\n            //使用min/maxLength即可，不用正则，节省cpu\r\n            minLength: {define: 2, error: {rc: 10002}},\r\n            maxLength: {define: 40, error: {rc: 10004}}\r\n            //format:{define:regex.userName,error:{rc:10006}}\r\n        },\r\n        password:{\r\n            chineseName: '密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10010}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.loosePassword, error: {rc: 10012}}\r\n        },\r\n        //由password派生出来\r\n        encryptedPassword:{\r\n            chineseName: '加密密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10014}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.encryptedPassword, error: {rc: 10016}}\r\n        },\r\n        //只是为了显示不同的chineseName\r\n        oldPassword:{\r\n            chineseName: '旧密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10017}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.loosePassword, error: {rc: 10018}}\r\n        },\r\n        rePassword:{\r\n            chineseName: '再次输入密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10019}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.loosePassword, error: {rc: 10020}}\r\n        },\r\n        mobilePhone:{\r\n            chineseName: '手机号',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10030}},\r\n            //直接使用regex。同时判断类型和长度范围\r\n            format: {define: regex.mobilePhone, error: {rc: 10032}}\r\n        },\r\n        captcha:{\r\n            chineseName: '验证码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10022}},\r\n            exactLength:{define: 4, error: {rc: 10024}}\r\n        },\r\n        originalThumbnailName:{\r\n            chineseName: '头像',\r\n            type:inputDataType.file,\r\n            require: {define: true, error: {rc: 10030}},\r\n            format:{define: regex.originalThumbnail, error: {rc: 10032}}\r\n        },\r\n        hashedThumbnailName:{\r\n            chineseName: '头像',\r\n            type:inputDataType.file,\r\n            require: {define: true, error: {rc: 10040}},\r\n            format:{define: regex.hashedThumbnail, error: {rc: 10042}}\r\n        }\r\n    },\r\n\r\n    adminLogin: {\r\n        userName: {\r\n            chineseName: '用户名',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10100}},\r\n            minLength: {define: 2, error: {rc: 10102}},\r\n            maxLength: {define: 40, error: {rc: 10104}}\r\n        },\r\n        password: {\r\n            chineseName: '密码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10110}},\r\n            //minLength:{define:2,error:{rc:9006}},\r\n            //maxLength:{define:20,error:{rc:9008}},\r\n            format: {define: regex.strictPassword, error: {rc: 10112}}\r\n        },\r\n        captcha:{\r\n            chineseName: '验证码',\r\n            type:inputDataType.string,\r\n            require: {define: true, error: {rc: 10120}},\r\n            exactLength:{define: 4, error: {rc: 10122}}\r\n        },\r\n    }\r\n}*/\n\n// exports.inputRuleDefine=inputRuleDefine\n\n//# sourceMappingURL=inputRule-compiled.js.map"]}