{"version":3,"sources":["mainRouterController.js"],"names":[],"mappings":"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","file":"mainRouterController-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-09-30.\r\n * 因为expressjs的router只能支持callback，所有将所有的router处理都单独通过一个async函数处理，然后直接返回promise给router调用，\r\n *\r\n */\r\nvar inputRule=require('../../define/validateRule/inputRule').inputRule\r\nvar miscFunc=require('../../assist/misc-compiled').func\r\nvar validate=miscFunc.validate\r\nvar checkInterval=miscFunc.checkInterval\r\n\r\n/*                      error               */\r\nvar pageError=require('../../define/error/pageError')\r\n\r\n\r\nvar billTypeDbOperation=require('../../model/mongo/billTypeModel')\r\n/*********************  common  *******************************/\r\n//1. checkInterval\r\nasync function common(req,res,next){\r\n    let result=await checkInterval(req)\r\n    return result\r\n    //console.log(`mainController common result is ${result}`)\r\n}\r\n\r\n//判断传入的参数是否正确（只能接受object，字符要看能否转换成object）\r\nfunction inputDataFormatValidate(values){\r\n    if(false===miscFunc.dataTypeCheck.isObject(values) && false=== miscFunc.dataTypeCheck.isString(values)){\r\n        return pageError.common.inputValuesFormatWrong\r\n    }\r\n    let result=values\r\n    if(miscFunc.dataTypeCheck.isString(values)){\r\n        try{\r\n            result=JSON.parse(values)\r\n        }\r\n        catch(e){\r\n\r\n            return pageError.common.inputValuesParseFail\r\n        }\r\n    }\r\n    return {rc:0,msg:result}\r\n}\r\n\r\n//对create/update方法输入的value进行检查和转换（字符串的话）\r\n//create:false     update:true\r\nasync function sanityInput(originalInputValue,basedOnInputValue){\r\n    //1. 将post/put上来的数据（可能是字符或者其他格式）转换成Object，返回{rc:0,msg:{values}}\r\n    let convertedInput=await inputDataFormatValidate(originalInputValue)\r\n    if(convertedInput.rc>0){\r\n        //return res.json(miscFunc.formatRc(convertedInput))\r\n        return convertedInput\r\n    }\r\n    //2. 检查转换后的输入是否正确，结果是每个字段都有一个返回值。{name:{rc:0},parent:{rc:0}}\r\n    let checkResult=await validate.checkInput(convertedInput.msg,inputRule.billType,basedOnInputValue)\r\n\r\n    for(let singleField in checkResult){\r\n        if(checkResult[singleField].rc>0){\r\n/*            miscFunc.formatRc(checkResult[singleField])\r\n            return res.json(checkResult[singleField])*/\r\n            return checkResult[singleField]\r\n        }\r\n    }\r\n    return convertedInput\r\n}\r\n/*********************  billType  *******************************/\r\nlet billType={}\r\n\r\nbillType['create']=async function create(req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,false)\r\n    //console.log(`1st san ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        miscFunc.formatRc(sanitizedInputValue)\r\n        return res.json(sanitizedInputValue)\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n/*    console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)*/\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    let result=await billTypeDbOperation.create(arrayResult)\r\n    miscFunc.formatRc(result)\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n\r\n    return res.json(result)\r\n}\r\n\r\n\r\nmodule.exports={\r\n    common,\r\n    billType,\r\n}"]}