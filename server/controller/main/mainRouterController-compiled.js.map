{"version":3,"sources":["mainRouterController.js"],"names":[],"mappings":"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","file":"mainRouterController-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-09-30.\r\n * 因为expressjs的router只能支持callback，所有将所有的router处理都单独通过一个async函数处理，然后直接返回promise给router调用，\r\n *\r\n */\r\nvar appSetting=require('../../config/global/appSetting')\r\n\r\nvar inputRule=require('../../define/validateRule/inputRule').inputRule\r\nvar miscFunc=require('../../assist/misc-compiled').func\r\n// var validate=miscFunc.validate\r\nvar checkInterval=miscFunc.checkInterval\r\n\r\n/*                      error               */\r\nvar pageError=require('../../define/error/pageError')\r\n\r\n/*                      model               */\r\nvar departmentDbOperation=require('../../model/mongo/departmentModel')\r\nvar employeeDbOperation=require('../../model/mongo/employeeModel')\r\nvar billTypeDbOperation=require('../../model/mongo/billTypeModel')\r\nvar billDbOperation=require('../../model/mongo/billModel')\r\n\r\n/*                      regex               */\r\nvar coll=require('../../define/enum/node').node.coll\r\n/*                      enum                */\r\nvar nodeEnum=require('../../define/enum/node').node\r\nvar envEnum=nodeEnum.env\r\n\r\n/*                      app special param           */\r\nvar maxFieldNum={\r\n    department:3,//_id/name/parentDepartment\r\n    employee:7,\r\n    billType:3,\r\n    bill:7,\r\n}\r\n/*********************  common  *******************************/\r\n//1. checkInterval\r\nasync function common(req,res,next){\r\n    let result=await checkInterval(req)\r\n    return result\r\n    //console.log(`mainController common result is ${result}`)\r\n}\r\n\r\n//对create/update方法输入的value进行检查和转换（字符串的话）\r\n//create:false     update:true\r\nasync function sanityInput(originalInputValue,inputRule,basedOnInputValue,maxFieldNum){\r\n    // console.log(`input value type is ${typeof originalInputValue}`)\r\n    //1. 检查post/put上来的数据是否为Object，返回{rc:0,msg:{values}}\r\n    let convertedInput=await miscFunc.validateInputValue.checkInputDataValidate(originalInputValue)\r\n// console.log(`fomat result is ${JSON.stringify(convertedInput)}`)\r\n    if(convertedInput.rc>0){\r\n        //return res.json(returnResult(convertedInput))\r\n            return convertedInput\r\n    }\r\n    //2  检查是否为{field:{value:'xxxx'},field2:{value:'yyyy'}}）\r\n    let checkConvertedInput=await miscFunc.validateInputValue.checkInputDataFormat(convertedInput.msg)\r\n    if(checkConvertedInput.rc>0){\r\n        return checkConvertedInput\r\n    }\r\n    //3 检查字段数量，已经重复字段\r\n    let checkField=miscFunc.validateInputValue.checkInputValueKey(convertedInput.msg,maxFieldNum)\r\n    if(checkField.rc>0){\r\n        return checkField\r\n    }\r\n    //4. 检查转换后的输入是否正确，结果是每个字段都有一个返回值。{name:{rc:0},parent:{rc:0}}\r\n/*    console.log(`inputValue is ${JSON.stringify(convertedInput.msg)}`)\r\n\r\n    console.log(`inputRule is ${JSON.stringify(inputRule)}`)*/\r\n    let checkResult=await miscFunc.validateInputValue.checkInput(convertedInput.msg,inputRule,basedOnInputValue)\r\n    //check result 为每个field返回一个{rc,msg}\r\n/*    if(checkResult.rc>0){\r\n        return checkResult\r\n    }*/\r\n     // console.log(`check input  result is ${JSON.stringify(checkResult)}`)\r\n    for(let singleField in checkResult){\r\n        if(checkResult[singleField].rc>0){\r\n/*            returnResult(checkResult[singleField])\r\n            return res.json(checkResult[singleField])*/\r\n            return checkResult[singleField]\r\n        }\r\n    }\r\n    return convertedInput\r\n}\r\n\r\n//对returnResult做包装，通过env的判断决定res.json输出的格式\r\nfunction returnResult(rc){\r\n    if(envEnum.production===appSetting.env){\r\n        return miscFunc.formatRc(rc)\r\n    }else{\r\n        return rc\r\n    }\r\n}\r\n\r\n//fkColl：选择哪个coll进行id验证\r\n//currentColl+currentFkName：确定使用哪个error\r\nasync function checkIdExist(fkColl,currentColl,currentFkName,id){\r\n    let dbOperation\r\n    switch (fkColl){\r\n        case coll.employee:\r\n            dbOperation=employeeDbOperation;\r\n            break;\r\n        case coll.department:\r\n            dbOperation=departmentDbOperation;\r\n            break;\r\n        case coll.billType:\r\n            dbOperation=billTypeDbOperation;\r\n            break;\r\n        case coll.bill:\r\n            dbOperation=billDbOperation\r\n            break;\r\n        default:\r\n            return pageError.common.unknownColl\r\n    }\r\n//console.log(`dboperation is ${dbOperation['findById'].toString()}`)\r\n//    console.log(`id is ${id}`)\r\n    let result=await dbOperation['findById'](id)\r\n    //console.log(`result after db is ${JSON.stringify(result)}`)\r\n    if(null===result.msg){\r\n        return pageError[currentColl][currentFkName+'NotExist']\r\n    }else{\r\n        return {rc:0}\r\n    }\r\n}\r\n/*                      debug                               */\r\nlet debug={}\r\ndebug['removeAll']=async function removeAll(req,res,next){\r\n    let billRemoveResult=await billDbOperation.removeAll()\r\n    if(billRemoveResult.rc>0){\r\n        return res.json(returnResult(billRemoveResult))\r\n    }\r\n\r\n    let employeeRemoveResult=await employeeDbOperation.removeAll()\r\n    if(employeeRemoveResult.rc>0){\r\n        return res.json(returnResult(employeeRemoveResult))\r\n    }\r\n\r\n    let billTypeRemoveResult=await billTypeDbOperation.removeAll()\r\n    if(billTypeRemoveResult.rc>0){\r\n        return res.json(returnResult(billTypeRemoveResult))\r\n    }\r\n\r\n    let departmentRemoveResult=await departmentDbOperation.removeAll()\r\n    if(departmentRemoveResult.rc>0){\r\n        return res.json(returnResult(departmentRemoveResult))\r\n    }\r\n//console.log('all delete done')\r\n    return res.json({rc:0})\r\n}\r\n\r\n\r\n\r\n\r\n/*********************  user  ******************************\r\n * 操作的用户：只有创建和更新（密码）的操作，并且是在程序内部执行，而非client发起req\r\n * */\r\nlet user={}\r\nuser['create']=async function (req,res,next){\r\n\r\n}\r\n\r\nuser['update']=async function (req,res,next){\r\n\r\n}\r\n\r\n/*********************  department  ******************************\r\n * 部门\r\n * */\r\nlet department={}\r\ndepartment['create']=async function (req,res,next){\r\n    // console.log(`chinese is 中文`)\r\n    // console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,false,maxFieldNum.department)\r\n    // console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        // returnResult(sanitizedInputValue)\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    let result=await departmentDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\ndepartment['remove']=async function (req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,true,maxFieldNum.department)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json( returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id.value\r\n    //console.log(`id is ${id}`)\r\n    let result=await departmentDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\ndepartment['update']=async function (req,res,next){\r\n//1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,true,maxFieldNum.department)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式()\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n    let result=await departmentDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\ndepartment['readAll']=async function (req,res,next){\r\n    let result=await departmentDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\ndepartment['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        // console.log(`constructedValue is ${JSON.stringify(constructedValue)}`)\r\n        let validateResult=await miscFunc.validateInputValue.checkSearchValue(constructedValue,inputRule.department)\r\n        // console.log(`validateResult value is ${validateResult}`)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        // console.log(`converted search value is ${constructedValue}`)\r\n        recorder=await departmentDbOperation.readName(constructedValue)\r\n    }else{\r\n        recorder=await departmentDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n\r\n/*********************  employee  ******************************\r\n * 员工\r\n * */\r\nlet employee={}\r\nemployee['create']=async function (req,res,next){\r\n    // console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,false,maxFieldNum.employee)\r\n     // console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    //检查外键是否存在\r\n    for(let doc of arrayResult){\r\n/*        let fkResult=await departmentDbOperation.findById(doc.department)\r\n\r\n        if(null===fkResult.msg){\r\n            //console.log(pageError.employee.departmentNotExist)\r\n\r\n            //console.log(pageError.employee.departmentNotExist)\r\n            // return res.json(returnResult(pageError.employee.departmentNotExist))\r\n            return res.json(returnResult(pageError.employee.departmentNotExist))\r\n        }\r\n\r\n        if(fkResult.msg && fkResult.msg._id){\r\n            // console.log(`doc   is ${JSON.stringify(doc)}`)\r\n            // console.log(`fkResult is ${JSON.stringify(fkResult)}`)\r\n            // console.log(`doc id  is ${doc.department}`)\r\n            // console.log(`fkR id  is ${fkResult.msg._id}`)\r\n            // console.log(typeof doc.department)\r\n            // console.log(typeof fkResult.msg._id)\r\n            // console.log((fkResult.msg._id !== doc.department))\r\n            if(fkResult.msg._id.toString() !== doc.department.toString()){\r\n                // return res.json(returnResult(pageError.employee.departmentNotExist))\r\n                return res.json(pageError.employee.departmentNotExist)\r\n            }\r\n        }*/\r\n// console.log(`doc is ${JSON.stringify(doc)}`)\r\n        if(doc.department){\r\n\r\n            let result=await checkIdExist(coll.department,coll.employee,'department',doc.department)\r\n            // console.log(`fk result is ${JSON.stringify(result)}`)\r\n            if(0<result.rc){\r\n                // console.log('department fail')\r\n                return res.json(returnResult(result))\r\n            }\r\n        }\r\n    }\r\n    let result=await employeeDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nemployee['remove']=async function (req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,true,maxFieldNum.employee)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await employeeDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nemployee['update']=async function (req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,true,maxFieldNum.employee)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3. 如果有外键，需要检测外键\r\n    if(convertedResult.department){\r\n        let result=await checkIdExist(coll.department,coll.employee,'department',convertedResult.department)\r\n        if(result.rc>0){\r\n            return res.json(returnResult(result))\r\n        }\r\n    }\r\n    //4， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n\r\n    let result=await employeeDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nemployee['readAll']=async function (req,res,next){\r\n    let result=await employeeDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nemployee['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await miscFunc.validateInputValue.checkSearchValue(constructedValue,inputRule.employee)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await employeeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await employeeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n\r\n/*********************  billType  *******************************/\r\nlet billType={}\r\n\r\nbillType['create']=async function create(req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,false,maxFieldNum.billType)\r\n    //console.log(`1st san ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n/*    console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)*/\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    let result=await billTypeDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nbillType['update']=async function update(req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,true,maxFieldNum.billType)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n\r\n    let result=await billTypeDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\nbillType['remove']=async function(req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,true,maxFieldNum.billType)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await billTypeDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\nbillType['readAll']=async function(req,res,next){\r\n    let result=await billTypeDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\nbillType['readName']=async function(req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await miscFunc.validateInputValue.checkSearchValue(constructedValue,inputRule.billType)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await billTypeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await billTypeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n\r\n\r\n/*********************  bill  ******************************\r\n * 部门\r\n * */\r\nlet bill={}\r\nbill['create']=async function (req,res,next){\r\n     //console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.bill,false,maxFieldNum.bill)\r\n    //console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    //检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        /*        let fkReimburserResult=await employeeDbOperation.findById(doc.reimburser)\r\n         let fkBillTypeResult=await billTypeDbOperation.findById(doc.billType)*/\r\n        //同时执行，尽快得到结果\r\n        let [fkReimburserResult,fkBillTypeResult]=await Promise.all([checkIdExist(coll.employee,coll.bill,'reimburser',doc.reimburser),checkIdExist(coll.billType,coll.bill,'billType',doc.billType)])\r\n//console.log(`fkReimburserResult result is ${JSON.stringify(fkReimburserResult)}`)\r\n//        console.log(`fkBillTypeResult result is ${JSON.stringify(fkBillTypeResult)}`)\r\n        if(fkReimburserResult.rc>0){\r\n            return res.json(returnResult(fkReimburserResult))\r\n        }\r\n        if(fkBillTypeResult.rc>0){\r\n            return res.json(returnResult(fkBillTypeResult))\r\n        }\r\n\r\n    }\r\n/*    for(let doc of arrayResult){\r\n/!*        let fkReimburserResult=await employeeDbOperation.findById(doc.reimburser)\r\n        let fkBillTypeResult=await billTypeDbOperation.findById(doc.billType)*!/\r\n        //同时执行，尽快得到结果\r\n        let [fkReimburserResult,fkBillTypeResult]=await Promise.all([employeeDbOperation.findById(doc.reimburser),billTypeDbOperation.findById(doc.billType)])\r\n        //对结果的检查还是顺序的\r\n        if(null===fkReimburserResult.msg){\r\n            return res.json(returnResult(pageError.bill.reimburserNotExist))\r\n        }\r\n        if(null===fkBillTypeResult.msg){\r\n            return res.json(returnResult(pageError.bill.billTypeNotExist))\r\n        }\r\n\r\n        if(fkReimburserResult.msg && fkReimburserResult.msg._id){\r\n            if(fkReimburserResult.msg._id.toString() !== doc.reimburser.toString()){\r\n                // return res.json(returnResult(pageError.employee.departmentNotExist))\r\n                return res.json(pageError.bill.reimburserNotExist)\r\n            }\r\n        }\r\n\r\n        if(fkBillTypeResult.msg && fkBillTypeResult.msg._id){\r\n            if(fkBillTypeResult.msg._id.toString() !== doc.billType.toString()){\r\n                // return res.json(returnResult(pageError.employee.departmentNotExist))\r\n                return res.json(pageError.bill.billTypeNotExist)\r\n            }\r\n        }\r\n    }*/\r\n\r\n\r\n    let result=await billDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nbill['remove']=async function (req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.bill,true,maxFieldNum.bill)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await billDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nbill['update']=async function (req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.bill,true,maxFieldNum.bill)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    // console.log(`update sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n\r\n    //3. 检查可能的外键（billType/reimburser）\r\n    if(convertedResult.billType){\r\n        let fkBillTypeResult=await checkIdExist(coll.billType,coll.bill,'billType',convertedResult.billType)\r\n        if(fkBillTypeResult.rc>0){\r\n            return res.json(returnResult(fkBillTypeResult))\r\n        }\r\n    }\r\n    if(convertedResult.reimburser){\r\n        // console.log(`san result is ${JSON.stringify(sanitizedInputValue)}`)\r\n        let fkReimburserResult=await checkIdExist(coll.employee,coll.bill,'reimburser',convertedResult.reimburser)\r\n        // console.log(`check result is ${JSON.stringify(fkReimburserResult)}`)\r\n        if(fkReimburserResult.rc>0){\r\n            return res.json(returnResult(fkReimburserResult))\r\n        }\r\n    }\r\n\r\n\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //4， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n\r\n    let result=await billDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nbill['readAll']=async function (req,res,next){\r\n    let result=await billDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n//bill无需提供title\r\n/*bill['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await miscFunc.validate.checkSearchValue(constructedValue,inputRule.billType)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await billTypeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await billTypeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n}*/\r\n\r\n\r\n\r\nmodule.exports={\r\n    common,\r\n    debug,\r\n    user,\r\n    department,\r\n    employee,\r\n    billType,\r\n    bill,\r\n}"]}