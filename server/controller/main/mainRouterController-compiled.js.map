{"version":3,"sources":["mainRouterController.js"],"names":[],"mappings":"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","file":"mainRouterController-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-09-30.\r\n * 因为expressjs的router只能支持callback，所有将所有的router处理都单独通过一个async函数处理，然后直接返回promise给router调用，\r\n *\r\n */\r\nvar inputRule=require('../../define/validateRule/inputRule').inputRule\r\nvar miscFunc=require('../../assist/misc-compiled').func\r\nvar validate=miscFunc.validate\r\nvar checkInterval=miscFunc.checkInterval\r\n\r\n/*                      error               */\r\nvar pageError=require('../../define/error/pageError')\r\n\r\nvar departmentDbOperation=require('../../model/mongo/departmentModel')\r\nvar employeeDbOperation=require('../../model/mongo/employeeModel')\r\nvar billTypeDbOperation=require('../../model/mongo/billTypeModel')\r\nvar billDbOperation=require('../../model/mongo/billModel')\r\n/*********************  common  *******************************/\r\n//1. checkInterval\r\nasync function common(req,res,next){\r\n    let result=await checkInterval(req)\r\n    return result\r\n    //console.log(`mainController common result is ${result}`)\r\n}\r\n\r\n//判断传入的参数是否正确（只能接受object，字符要看能否转换成object）\r\nfunction inputDataFormatValidate(values){\r\n    if(false===miscFunc.dataTypeCheck.isObject(values) && false=== miscFunc.dataTypeCheck.isString(values)){\r\n        return pageError.common.inputValuesFormatWrong\r\n    }\r\n    let result=values\r\n    if(miscFunc.dataTypeCheck.isString(values)){\r\n        try{\r\n            result=JSON.parse(values)\r\n        }\r\n        catch(e){\r\n\r\n            return pageError.common.inputValuesParseFail\r\n        }\r\n    }\r\n    return {rc:0,msg:result}\r\n}\r\n\r\n//对create/update方法输入的value进行检查和转换（字符串的话）\r\n//create:false     update:true\r\nasync function sanityInput(originalInputValue,inputRule,basedOnInputValue){\r\n    //1. 将post/put上来的数据（可能是字符或者其他格式）转换成Object，返回{rc:0,msg:{values}}\r\n    let convertedInput=await inputDataFormatValidate(originalInputValue)\r\n// console.log(`fomat result is ${JSON.stringify(convertedInput)}`)\r\n    if(convertedInput.rc>0){\r\n        //return res.json(miscFunc.formatRc(convertedInput))\r\n        return convertedInput\r\n    }\r\n    //2. 检查转换后的输入是否正确，结果是每个字段都有一个返回值。{name:{rc:0},parent:{rc:0}}\r\n    // console.log(`inputRule is ${JSON.stringify(inputRule)}`)\r\n    let checkResult=await validate.checkInput(convertedInput.msg,inputRule,basedOnInputValue)\r\n     console.log(`check input  result is ${JSON.stringify(checkResult)}`)\r\n    for(let singleField in checkResult){\r\n        if(checkResult[singleField].rc>0){\r\n/*            miscFunc.formatRc(checkResult[singleField])\r\n            return res.json(checkResult[singleField])*/\r\n            return checkResult[singleField]\r\n        }\r\n    }\r\n    return convertedInput\r\n}\r\n\r\n\r\n/*********************  user  ******************************\r\n * 操作的用户：只有创建和更新（密码）的操作，并且是在程序内部执行，而非client发起req\r\n * */\r\nlet user={}\r\nuser['create']=async function (req,res,next){\r\n\r\n}\r\n\r\nuser['update']=async function (req,res,next){\r\n\r\n}\r\n\r\n/*********************  department  ******************************\r\n * 部门\r\n * */\r\nlet department={}\r\ndepartment['create']=async function (req,res,next){\r\n    // console.log(`chinese is 中文`)\r\n    // console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,false)\r\n    // console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        miscFunc.formatRc(sanitizedInputValue)\r\n        return res.json(sanitizedInputValue)\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    let result=await departmentDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\ndepartment['remove']=async function (req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,true)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json( miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await departmentDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\n\r\ndepartment['update']=async function (req,res,next){\r\n//1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,true)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n\r\n    let result=await departmentDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\ndepartment['readAll']=async function (req,res,next){\r\n    let result=await departmentDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\ndepartment['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await miscFunc.validate.checkSearchValue(constructedValue,inputRule.department)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await departmentDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await departmentDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n\r\n/*********************  employee  ******************************\r\n * 员工\r\n * */\r\nlet employee={}\r\nemployee['create']=async function (req,res,next){\r\n    // console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,false)\r\n     console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    //检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        let fkResult=await departmentDbOperation.findById(doc.department)\r\n\r\n        if(null===fkResult.msg){\r\n            //console.log(pageError.employee.departmentNotExist)\r\n\r\n            //console.log(pageError.employee.departmentNotExist)\r\n            // return res.json(miscFunc.formatRc(pageError.employee.departmentNotExist))\r\n            return res.json(miscFunc.formatRc(pageError.employee.departmentNotExist))\r\n        }\r\n\r\n        if(fkResult.msg && fkResult.msg._id){\r\n            // console.log(`doc   is ${JSON.stringify(doc)}`)\r\n            // console.log(`fkResult is ${JSON.stringify(fkResult)}`)\r\n            // console.log(`doc id  is ${doc.department}`)\r\n            // console.log(`fkR id  is ${fkResult.msg._id}`)\r\n            // console.log(typeof doc.department)\r\n            // console.log(typeof fkResult.msg._id)\r\n            // console.log((fkResult.msg._id !== doc.department))\r\n            if(fkResult.msg._id.toString() !== doc.department.toString()){\r\n                // return res.json(miscFunc.formatRc(pageError.employee.departmentNotExist))\r\n                return res.json(pageError.employee.departmentNotExist)\r\n            }\r\n        }\r\n    }\r\n    let result=await employeeDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\nemployee['remove']=async function (req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,true)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await employeeDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\nemployee['update']=async function (req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,true)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n\r\n    let result=await employeeDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\nemployee['readAll']=async function (req,res,next){\r\n    let result=await employeeDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\nemployee['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await miscFunc.validate.checkSearchValue(constructedValue,inputRule.employee)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await employeeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await employeeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n\r\n/*********************  billType  *******************************/\r\nlet billType={}\r\n\r\nbillType['create']=async function create(req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,false)\r\n    //console.log(`1st san ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n/*    console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)*/\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    let result=await billTypeDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\nbillType['update']=async function update(req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,true)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n\r\n    let result=await billTypeDbOperation.update(id,convertedResult)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\n\r\nbillType['remove']=async function(req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,true)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await billTypeDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\n\r\nbillType['readAll']=async function(req,res,next){\r\n    let result=await billTypeDbOperation.readAll()\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(result))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\nbillType['readName']=async function(req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await miscFunc.validate.checkSearchValue(constructedValue,inputRule.billType)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await billTypeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await billTypeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(miscFunc.formatRc(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\n\r\n\r\n/*********************  bill  ******************************\r\n * 部门\r\n * */\r\nlet bill={}\r\nbill['create']=async function (req,res,next){\r\n    // console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.bill,false)\r\n    console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(miscFunc.formatRc(sanitizedInputValue))\r\n    }\r\n    //采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg)}`)\r\n    arrayResult.push(miscFunc.convertClientValueToServerFormat(sanitizedInputValue.msg))\r\n    //检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        let fkResult=await departmentDbOperation.findById(doc.department)\r\n\r\n        if(null===fkResult.msg){\r\n            //console.log(pageError.employee.departmentNotExist)\r\n\r\n            //console.log(pageError.employee.departmentNotExist)\r\n            // return res.json(miscFunc.formatRc(pageError.employee.departmentNotExist))\r\n            return res.json(miscFunc.formatRc(pageError.employee.departmentNotExist))\r\n        }\r\n\r\n        if(fkResult.msg && fkResult.msg._id){\r\n            if(fkResult.msg._id.toString() !== doc.department.toString()){\r\n                // return res.json(miscFunc.formatRc(pageError.employee.departmentNotExist))\r\n                return res.json(pageError.employee.departmentNotExist)\r\n            }\r\n        }\r\n    }\r\n    let result=await employeeDbOperation.create(arrayResult)\r\n\r\n    //console.log(` inserted result ${JSON.stringify(result)}`)\r\n    return res.json(miscFunc.formatRc(result))\r\n}\r\n\r\nbill['remove']=async function (req,res,next){\r\n\r\n}\r\n\r\nbill['update']=async function (req,res,next){\r\n\r\n}\r\n\r\nbill['readAll']=async function (req,res,next){\r\n\r\n}\r\n\r\nbill['readName']=async function (req,res,next){\r\n\r\n}\r\n\r\n\r\n\r\nmodule.exports={\r\n    common,\r\n    user,\r\n    department,\r\n    employee,\r\n    billType,\r\n    bill,\r\n}"]}