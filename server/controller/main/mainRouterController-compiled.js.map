{"version":3,"sources":["mainRouterController.js"],"names":[],"mappings":"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","file":"mainRouterController-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-09-30.\r\n * 因为expressjs的router只能支持callback，所有将所有的router处理都单独通过一个async函数处理，然后直接返回promise给router调用，\r\n *\r\n */\r\nvar appSetting=require('../../config/global/appSetting')\r\n\r\nvar inputRule=require('../../define/validateRule/inputRule').inputRule\r\nvar validateFunc=require('../../assist/validateFunc').func\r\nvar miscFunc=require('../../assist/misc')\r\n// var validate=validateFunc.validate\r\nvar checkInterval=require('../../assist/misc-compiled').checkInterval\r\n\r\n/*                      error               */\r\nvar pageError=require('../../define/error/pageError')\r\n\r\n/*                      model               */\r\nvar departmentDbOperation=require('../../model/mongo/departmentModel')\r\nvar employeeDbOperation=require('../../model/mongo/employeeModel')\r\nvar billTypeDbOperation=require('../../model/mongo/billTypeModel')\r\nvar billDbOperation=require('../../model/mongo/billModel')\r\n//var fkAdditionalFields=require('../../model/mongo/not_used_fkAdditionalFieldsModel')\r\n\r\n/*                      func                   */\r\nvar populateSingleDoc=require('../../assist/misc-compiled').populateSingleDoc\r\n/*                      regex               */\r\nvar coll=require('../../define/enum/node').node.coll\r\n/*                      enum                */\r\nvar nodeEnum=require('../../define/enum/node').node\r\nvar envEnum=nodeEnum.env\r\n\r\n/*                      app special param           */\r\nvar maxFieldNum={\r\n    department:3,//_id/name/parentDepartment\r\n    employee:7,\r\n    billType:3,\r\n    bill:7,\r\n}\r\nvar populatedFields={\r\n    department:['parentDepartment'],\r\n    billType:['parentBillType'],\r\n    employee:['leader','department'],\r\n    bill:['reimburser','billType',''],\r\n}\r\nvar populateOpt={\r\n    department: {\r\n        path: 'parentDepartment',//需要populate的字段\r\n        select: 'name',//populate后，需要显示的字段\r\n        match: {},//populate后，过滤字段(不符合这显示null)。一般不用\r\n        options: {},//{sort:{name:-1}}\r\n    },\r\n    billType:{\r\n        path:'parentBillType',//需要populate的字段\r\n        select:'name',//populate后，需要显示的字段\r\n        match:{},//populate后，过滤字段(不符合这显示null)。一般不用\r\n        options:{},//{sort:{name:-1}}\r\n    },\r\n    employee:{\r\n        path:'leader department',//需要populate的字段\r\n        select:'name',//populate后，需要显示的字段\r\n        match:{},//populate后，过滤字段(不符合这显示null)。一般不用\r\n        options:{},//{sort:{name:-1}}\r\n    },\r\n    bill:{\r\n        path:'billType  reimburser',//需要populate的字段\r\n        select:'name',//populate后，需要显示的字段\r\n        match:{},//populate后，过滤字段(不符合这显示null)。一般不用\r\n        options:{},//{sort:{name:-1}}\r\n    },\r\n}\r\n\r\n\r\n//每个外键需要的冗余字段\r\nvar fkAdditionalFieldsConfig={\r\n    department:{\r\n        parentDepartment:{relatedColl:coll.department,nestedPrefix:'departmentFields',forSelect:'name',forSetValue:['name']}\r\n    },\r\n    employee:{\r\n        leader:{relatedColl:coll.employee,nestedPrefix:'leaderFields',forSelect:'name',forSetValue:['name']},\r\n        department:{relatedColl:coll.department,nestedPrefix:'departmentFields',forSelect:'name',forSetValue:['name']}\r\n    },\r\n    billType:{\r\n        //冗余字段（nested）的名称：具体冗余那几个字段\r\n        //parentBillType:此字段为外键，需要冗余字段\r\n        //relatedColl：外键对应的coll\r\n        //nestedPrefix： 冗余字段一般放在nested结构中\r\n        //荣誉字段是nested结构，分成2种格式，字符和数组，只是为了方便操作。 forSelect，根据外键find到document后，需要返回值的字段；forSetValue：需要设置value的冗余字段（一般是nested结构）\r\n        parentBillType:{relatedColl:coll.billType,nestedPrefix:'parentBillTypeFields',forSelect:'name',forSetValue:['name']}\r\n    },\r\n    bill:{\r\n        billType:{relatedColl:coll.billType,nestedPrefix:'billTypeFields',forSelect:'name',forSetValue:['name']},\r\n        reimburser:{relatedColl:coll.employee,nestedPrefix:'reimburserFields',forSelect:'name',forSetValue:['name']},\r\n\r\n    },\r\n}\r\n\r\n//1. checkInterval，在main中执行，所以必须定义在非main文件，否则无法编译\r\nasync function common(req,res,next){\r\n    let result=await checkInterval(req)\r\n    return result\r\n    //console.log(`mainController common result is ${result}`)\r\n}\r\n\r\n//对create/update方法输入的value进行检查和转换（字符串的话）\r\n//create:false     update:true\r\nasync function sanityInput(originalInputValue,inputRule,basedOnInputValue,maxFieldNum){\r\n     //console.log(`input value type is ${typeof originalInputValue}`)\r\n    //console.log(`input value is ${JSON.stringify( originalInputValue)}`)\r\n    //1. 检查格式\r\n    let checkFormatResult=await validateFunc.validateInputFormat(originalInputValue,inputRule,maxFieldNum)\r\n    console.log(`check format is ${JSON.stringify(checkFormatResult)}`)\r\n    if(checkFormatResult.rc>0){\r\n        return checkFormatResult\r\n    }\r\n\r\n    //2 检查输入值的内容是否正确\r\n    let checkResult=await validateFunc.validateInputValue(originalInputValue,inputRule,basedOnInputValue)\r\n     // console.log(`check input  result is ${JSON.stringify(checkResult)}`)\r\n    for(let singleField in checkResult){\r\n        if(checkResult[singleField].rc>0){\r\n/*            returnResult(checkResult[singleField])\r\n            return res.json(checkResult[singleField])*/\r\n            //return checkResult[singleField]\r\n            return {rc:99999,msg:checkResult}//返回全部检查结果，为了统一格式，设置一个非0的rc\r\n        }\r\n    }\r\n\r\n    return {rc:0}\r\n}\r\n\r\n/*\r\n* 参数：\r\n*       1.  inputSearch:{field:[value1,value2]}\r\n*       2.  fkAdditionalFieldsConfig:外键的一些设置，包括此外键对应到那个coll的哪个field\r\n*       3.  collName\r\n*       4.  inputRules：整个个inputRules，因为可能有字段是外键字段，此时需要检查外键对应的coll/field\r\n*\r\n* */\r\nasync function sanitySearchInput(inputSearch,fkAdditionalFieldsConfig,collName,inputRules){\r\n    // console.log(   `sanitySearchInput in`)\r\n    //1 检查输入格式\r\n    let formatCheckResult=await validateFunc.validateInputSearchFormat(inputSearch,fkAdditionalFieldsConfig,collName,inputRules)\r\n    // console.log(   `format resuot is ${formatCheckResult}`)\r\n    if(formatCheckResult.rc>0){\r\n        return formatCheckResult\r\n    }\r\n    //2 检查搜索值是否正确\r\n    let valueCheckResult=await validateFunc.validateInputSearchValue(inputSearch,fkAdditionalFieldsConfig,collName,inputRules)\r\n    // console.log(   `value resuot is ${valueCheckResult}`)\r\n    for(let singleFieldName in valueCheckResult){\r\n        if(valueCheckResult[singleFieldName]['rc']>0){\r\n            return {rc:9999,msg:valueCheckResult}\r\n        }\r\n    }\r\n    return {rc:0}\r\n}\r\n\r\n//对returnResult做包装，通过env的判断决定res.json输出的格式\r\nfunction returnResult(rc){\r\n    if(envEnum.production===appSetting.env){\r\n        return validateFunc.formatRc(rc)\r\n    }else{\r\n        return rc\r\n    }\r\n}\r\n\r\n//fkColl：选择哪个coll进行id验证\r\n//currentColl+currentFkName：确定使用哪个error\r\nasync function checkIdExist(fkColl,currentColl,currentFkName,id){\r\n    let dbOperation\r\n    switch (fkColl){\r\n        case coll.employee:\r\n            dbOperation=employeeDbOperation;\r\n            break;\r\n        case coll.department:\r\n            dbOperation=departmentDbOperation;\r\n            break;\r\n        case coll.billType:\r\n            dbOperation=billTypeDbOperation;\r\n            break;\r\n        case coll.bill:\r\n            dbOperation=billDbOperation\r\n            break;\r\n        default:\r\n            return pageError.common.unknownColl\r\n    }\r\n//console.log(`dboperation is ${dbOperation['findById'].toString()}`)\r\n//    console.log(`id is ${id}`)\r\n    let result=await dbOperation['findById'](id)\r\n    //console.log(`findByID result is ${JSON.stringify(result)}`)\r\n    if(null===result.msg){\r\n        return pageError[currentColl][currentFkName+'NotExist']\r\n    }else{\r\n        return {rc:0}\r\n    }\r\n}\r\n\r\n//从coll中，根据id查找到记录，然后返回其中的fields\r\n//和checkIdExist使用同样的函数，目的是为了能让代码更加清晰\r\n/*\r\n* fkFieldName：需要获得冗余字段的外键名，主要为了产生 错误信息\r\n* fkid：ObjectId\r\n* fkColl：fk对应的coll\r\n* fkAdditionalFields：需要哪些fk的冗余字段\r\n* */\r\nasync function getAdditionalFields(fkFieldName,fkId,fkColl,fkAdditionalFields){\r\n    let dbOperation\r\n    switch (fkColl){\r\n        case coll.employee:\r\n            dbOperation=employeeDbOperation;\r\n            break;\r\n        case coll.department:\r\n            dbOperation=departmentDbOperation;\r\n            break;\r\n        case coll.billType:\r\n            dbOperation=billTypeDbOperation;\r\n            break;\r\n        case coll.bill:\r\n            dbOperation=billDbOperation\r\n            break;\r\n        default:\r\n            return pageError.common.unknownColl\r\n    }\r\n//console.log(`dboperation is ${dbOperation['findById'].toString()}`)\r\n//    console.log(`id is ${id}`)\r\n    let result=await dbOperation['findById'](fkId,fkAdditionalFields)\r\n    //console.log(`findByID result is ${JSON.stringify(result)}`)\r\n    if(null===result.msg){\r\n        return pageError[fkColl][fkFieldName+'NotExist']\r\n    }else{\r\n        return {rc:0,msg:result.msg}\r\n    }\r\n}\r\n\r\n//\r\n//\r\n/*\r\n* 说明：根据外键，查找到对应的记录，并把记录中的字段保存到冗余字段中\r\n* 输入参数：\r\n* 1.singleDoc：当前要操作的doc（create或者update，从client输入的数据）\r\n* 2. fkFieldsName：要添加冗余字段的外键名。数组（可能有多个fk）\r\n* 3. fkColl：外键所在的coll（外键链接到的coll）\r\n* 4. fkAdditionalConfig: 外键冗余字段的设置（已coll为单位进行设置，可能有多个fk），包括relatedColl(当前fk对应的coll)，nestedPrefix（外键冗余字段一般放在一个nested结构中，此结构的名称），forSelect：需要返回并设置的冗余字段（用在mongoose的查询中），forSetValue（在arrayResult中设置的字段名）\r\n*\r\n* 无返回值\r\n* */\r\nasync function getFkAdditionalFields(doc,fkAdditionalConfig){\r\n\r\n        for(let fkFieldName in fkAdditionalConfig){\r\n            // console.log(`configed fk field name is ${fkFieldName}`)\r\n            //如果文档中外键存在（例如，objectId存在）\r\n            if(doc[fkFieldName]){\r\n                //console.log(`configed fk  is ${doc[fkFieldName]}`)\r\n                //console.log(`fk related coll is ${fkAdditionalConfig[fkFieldName]['relatedColl']}`)\r\n                let nestedPrefix=fkAdditionalConfig[fkFieldName].nestedPrefix\r\n                let fkAdditionalFields=await getAdditionalFields(fkFieldName,doc[fkFieldName],fkAdditionalConfig[fkFieldName]['relatedColl'],fkAdditionalConfig[fkFieldName].forSelect)\r\n                 console.log(`get fk doc ${JSON.stringify(fkAdditionalFields)}`)\r\n                if(fkAdditionalFields.rc>0){\r\n                    return fkAdditionalFields\r\n                }\r\n                // console.log(`add result is ${JSON.stringify(fkAdditionalFields)}`)\r\n                doc[nestedPrefix]={}\r\n                //将读取到的额外字段赋值给\r\n                for(let field of fkAdditionalConfig[fkFieldName].forSetValue){\r\n                    // console.log(`add field is ${field}`)\r\n                    //需要转换成parentBillTypeFields.name的格式，因为是nested\r\n                    // let tmpField='parentBillTypeFields.'+field\r\n                    doc[nestedPrefix][field]=fkAdditionalFields['msg'][field]\r\n                }\r\n            }\r\n        }\r\nreturn {rc:0}\r\n        // console.log(`added result is ${JSON.stringify(doc)}`)\r\n\r\n}\r\n/*                      debug                               */\r\nlet debug={}\r\ndebug['removeAll']=async function removeAll(req,res,next){\r\n    let billRemoveResult=await billDbOperation.removeAll()\r\n    if(billRemoveResult.rc>0){\r\n        return res.json(returnResult(billRemoveResult))\r\n    }\r\n\r\n    let employeeRemoveResult=await employeeDbOperation.removeAll()\r\n    if(employeeRemoveResult.rc>0){\r\n        return res.json(returnResult(employeeRemoveResult))\r\n    }\r\n\r\n    let billTypeRemoveResult=await billTypeDbOperation.removeAll()\r\n    if(billTypeRemoveResult.rc>0){\r\n        return res.json(returnResult(billTypeRemoveResult))\r\n    }\r\n\r\n    let departmentRemoveResult=await departmentDbOperation.removeAll()\r\n    if(departmentRemoveResult.rc>0){\r\n        return res.json(returnResult(departmentRemoveResult))\r\n    }\r\n//console.log('all delete done')\r\n    return res.json({rc:0})\r\n}\r\n\r\n\r\n\r\n\r\n/*********************  user  ******************************\r\n * 操作的用户：只有创建和更新（密码）的操作，并且是在程序内部执行，而非client发起req\r\n * */\r\nlet user={}\r\nuser['create']=async function (req,res,next){\r\n\r\n}\r\n\r\nuser['update']=async function (req,res,next){\r\n\r\n}\r\n\r\n/*********************  department  ******************************\r\n * 部门\r\n * */\r\nlet department={}\r\ndepartment['create']=async function (req,res,next){\r\n    // console.log(`chinese is 中文`)\r\n    //  console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    //1. 对输入进行检查，确保是合格的输入\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,false,maxFieldNum.department)\r\n    // console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        // returnResult(sanitizedInputValue)\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //2. 数据加入数组采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${validateFunc.convertClientValueToServerFormat(req.body.values)}`)\r\n    arrayResult.push(validateFunc.convertClientValueToServerFormat(req.body.values))\r\n\r\n    //3 检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        if(doc.parentDepartment){\r\n            let result=await checkIdExist(coll.department,coll.department,'parentDepartment',doc.parentDepartment)\r\n            // console.log(`fk result is ${JSON.stringify(result)}`)\r\n            if(0<result.rc){\r\n                // console.log('department fail')\r\n                return res.json(returnResult(result))\r\n            }\r\n        }\r\n    }\r\n    //4 删除null的字段（null说明字段为空，所以无需传入db\r\n    for(let doc of arrayResult){\r\n        validateFunc.constructCreateCriteria(doc)\r\n    }\r\n    //4.5 如果外键存在，获得外键的额外字段\r\n    // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.department)}`)\r\n    for(let idx in arrayResult) {\r\n        // console.log(`idx is ${idx}`)\r\n        let doc = arrayResult[idx]\r\n        let getFkResult=await getFkAdditionalFields(doc,fkAdditionalFieldsConfig.department)\r\n        if(getFkResult.rc>0){\r\n            return res.json(getFkResult)\r\n        }\r\n    }\r\n    //5. 对db执行操作\r\n    let result=await departmentDbOperation.create(arrayResult)\r\n    if(result.rc>0){\r\n        return res.json(result)\r\n    }\r\n    //6. 检查是否需要populate\r\n    let populateResult=await populateSingleDoc(result.msg[0],populateOpt.department,populatedFields.department)\r\n\r\n    return res.json(returnResult(populateResult))\r\n}\r\n\r\ndepartment['update']=async function (req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    // console.log(`before sanity values is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.department,true,maxFieldNum.department)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式()\r\n    // console.log(`before convert ${JSON.stringify(req.body.values)}`)\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(req.body.values)\r\n    // console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n    //4 检查输入的更新字段中，是否有需要被删除的字段（设为null的字段）\r\n    validateFunc.constructUpdateCriteria(convertedResult)\r\n    // console.log(`construct update is ${JSON.stringify(convertedResult)}`)\r\n    //5 上级不能设成自己\r\n    if(id===convertedResult.parentDepartment){\r\n        return res.json(returnResult(pageError.department.parentCantBeSelf))\r\n    }\r\n    //6 如果inputValue中外键设置，检查是否在db中存在\r\n    //4.5 如果外键存在，获得外键的额外字段\r\n    // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.department)}`)\r\n    let getFkResult=await getFkAdditionalFields(convertedResult,fkAdditionalFieldsConfig.department)\r\n    if(getFkResult.rc>0){\r\n        return res.json(getFkResult)\r\n    }\r\n    //检查外键是否存在\r\n\r\n    if(null!==convertedResult.parentDepartment && undefined!==convertedResult.parentDepartment){\r\n        let result=await checkIdExist(coll.department,coll.department,'parentDepartment',convertedResult.parentDepartment)\r\n        // console.log(`fk result is ${JSON.stringify(result)}`)\r\n        if(0<result.rc){\r\n            // console.log('department fail')\r\n            return res.json(returnResult(result))\r\n        }\r\n    }\r\n\r\n    //7 执行update操作\r\n    let result=await departmentDbOperation.update(id,convertedResult)\r\n    if(result.rc>0){\r\n        return res.json(returnResult(result))\r\n    }\r\n    //null说明没有执行任何更新\r\n    if(null===result.msg){\r\n        return res.json(returnResult(pageError.department.departmentNotExists))\r\n    }\r\n    //8 执行可能的populate操作\r\n    let populateResult=await populateSingleDoc(result.msg,populateOpt.department,populatedFields.department)\r\n    return res.json(returnResult(populateResult))\r\n}\r\n\r\ndepartment['remove']=async function (req,res,next){\r\n    //delete传参数的方式和get类似，只能放在URL中，为了复用sanityValue函数，需要将参数转换成{field:{value:'val'}}\r\n    let inputResult={}\r\n    console.log(`delete params is ${JSON.stringify(req.params.id)}`)\r\n    let checkResult=validateFunc.validateDeleteInput(req.params.id)\r\n    console.log(`delete check result is ${JSON.stringify(checkResult)}`)\r\n    if(checkResult.rc>0){\r\n        return res.json(returnResult(checkResult))\r\n    }\r\n    inputResult['_id']={value:req.params.id}\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(inputResult,inputRule.department,true,maxFieldNum.department)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json( returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(inputResult)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await departmentDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\n\r\n\r\ndepartment['readAll']=async function (req,res,next){\r\n    let result=await departmentDbOperation.readAll(populateOpt.department)\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\ndepartment['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        // console.log(`constructedValue is ${JSON.stringify(constructedValue)}`)\r\n        let validateResult=await validateFunc.checkSearchValue(constructedValue,inputRule.department)\r\n        // console.log(`validateResult value is ${validateResult}`)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        // console.log(`converted search value is ${constructedValue}`)\r\n        recorder=await departmentDbOperation.readName(constructedValue)\r\n    }else{\r\n        recorder=await departmentDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\ndepartment['search']=async function(req,res,next){\r\n    //let recorder\r\n    // console.log(`search input is ${JSON.stringify(req.body.values)}`)\r\n    /*    console.log(`escap result is ${miscFunc.escapeRegSpecialChar(req.body.values.name[0])}`)\r\n     let escapeChar=miscFunc.escapeRegSpecialChar(req.body.values.name[0])\r\n     let reg=new RegExp(escapeChar)\r\n     console.log(`reg is ${reg}`)\r\n     let str='123'\r\n     let matchRes=str.match(reg)\r\n     console.log(matchRes)*/\r\n    let sanitizedInputValue=await sanitySearchInput(req.body.values,fkAdditionalFieldsConfig.department,coll.department,inputRule)\r\n    // console.log(`santiy result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    let searchParams=validateFunc.genNativeSearchCondition(req.body.values,coll.department,fkAdditionalFieldsConfig.department,inputRule)\r\n    console.log(`convert search params id ${JSON.stringify(searchParams)}`)\r\n    let recorder=await departmentDbOperation.search(searchParams)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    //return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)m\r\n}\r\n\r\n\r\n/*********************  employee  ******************************\r\n * 员工\r\n * */\r\nlet employee={}\r\nemployee['create']=async function (req,res,next){\r\n    /*    try{    }catch(e){\r\n     console.log(`check input error is ${e}`)\r\n     }*/\r\n    // console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    //1. 对输入进行检查，确保是合格的输入\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,false,maxFieldNum.employee)\r\n    // console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 数据加入数组，采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${validateFunc.convertClientValueToServerFormat(req.body.values)}`)\r\n    arrayResult.push(validateFunc.convertClientValueToServerFormat(req.body.values))\r\n    //3 检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        if(doc.department){\r\n\r\n            let result=await checkIdExist(coll.department,coll.employee,'department',doc.department)\r\n            // console.log(`fk result is ${JSON.stringify(result)}`)\r\n            if(0<result.rc){\r\n                // console.log('department fail')\r\n                return res.json(returnResult(result))\r\n            }\r\n        }\r\n        if(doc.leader){\r\n            //checkIdExist()\r\n            let result=await checkIdExist(coll.employee,coll.employee,'leader',doc.leader)\r\n            // console.log(`fk result is ${JSON.stringify(result)}`)\r\n            if(0<result.rc){\r\n                // console.log('department fail')\r\n                return res.json(returnResult(result))\r\n            }\r\n        }\r\n    }\r\n    //4 删除null的字段（null说明字段为空，所以无需传入db\r\n    for(let doc of arrayResult){\r\n        validateFunc.constructCreateCriteria(doc)\r\n    }\r\n    //4.5 如果外键存在，获得外键的额外字段\r\n    // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.employee)}`)\r\n    for(let idx in arrayResult) {\r\n        // console.log(`idx is ${idx}`)\r\n        let doc = arrayResult[idx]\r\n        let getFkResult=await getFkAdditionalFields(doc,fkAdditionalFieldsConfig.employee)\r\n        if(getFkResult.rc>0){\r\n            return res.json(getFkResult)\r\n        }\r\n    }\r\n    //5. 对db执行操作\r\n    let result=await employeeDbOperation.create(arrayResult)\r\n    if(result.rc>0){\r\n        return res.json(result)\r\n    }\r\n\r\n    //6. 检查是否需要populate\r\n    let populateResult=await populateSingleDoc(result.msg[0],populateOpt.employee,populatedFields.employee)\r\n\r\n    return res.json(returnResult(populateResult))\r\n}\r\n\r\nemployee['update']=async function (req,res,next){\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.employee,true,maxFieldNum.employee)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(req.body.values)\r\n    //3 提取数据\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n    //4 检查输入的更新字段中，是否有需要被删除的字段（设为null的字段）\r\n    validateFunc.constructUpdateCriteria(convertedResult)\r\n    //5 上级不能设成自己\r\n    if(id===convertedResult.leader){\r\n        return res.json(returnResult(pageError.employee.leaderCantBeSelf))\r\n    }\r\n    //6. 如果有外键，需要检测外键\r\n    if(null!==convertedResult.department && undefined!==convertedResult.department ){\r\n        let result=await checkIdExist(coll.department,coll.employee,'department',convertedResult.department)\r\n        if(result.rc>0){\r\n            return res.json(returnResult(result))\r\n        }\r\n    }\r\n    if(null!==convertedResult.leader && undefined!==convertedResult.leader){\r\n        //checkIdExist()\r\n        let result=await checkIdExist(coll.employee,coll.employee,'leader',convertedResult.leader)\r\n        // console.log(`fk result is ${JSON.stringify(result)}`)\r\n        if(0<result.rc){\r\n            // console.log('department fail')\r\n            return res.json(returnResult(result))\r\n        }\r\n    }\r\n\r\n\r\n    //7 执行db操作\r\n    let result=await employeeDbOperation.update(id,convertedResult)\r\n    // console.log(`update result is ${JSON.stringify(result)}`)\r\n    if(result.rc>0){\r\n        return res.json(returnResult(result))\r\n    }\r\n    //null说明没有执行任何更新\r\n    if(null===result.msg){\r\n        return res.json(returnResult(pageError.employee.employeeNotExists))\r\n    }\r\n\r\n// console.log(`employee update in`)\r\n    //8 执行可能的populate操作\r\n    let populateResult=await populateSingleDoc(result.msg,populateOpt.employee,populatedFields.employee)\r\n    return res.json(returnResult(populateResult))\r\n}\r\n\r\n\r\nemployee['remove']=async function (req,res,next){\r\n    //delete传参数的方式和get类似，只能放在URL中，为了复用sanityValue函数，需要将参数转换成{field:{value:'val'}}\r\n    let inputResult={}\r\n    console.log(`delete params is ${JSON.stringify(req.params.id)}`)\r\n    let checkResult=validateFunc.validateDeleteInput(req.params.id)\r\n    console.log(`delete check result is ${JSON.stringify(checkResult)}`)\r\n    if(checkResult.rc>0){\r\n        return res.json(returnResult(checkResult))\r\n    }\r\n    inputResult['_id']={value:req.params.id}\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    let sanitizedInputValue=await sanityInput(inputResult,inputRule.employee,true,maxFieldNum.employee)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(req.body.values)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n    // console.log(`id is ${id}`)\r\n    let result=await employeeDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\n\r\nemployee['readAll']=async function (req,res,next){\r\n    let result=await employeeDbOperation.readAll(populateOpt.employee)\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\nemployee['readName']=async function (req,res,next){\r\n    let recorder\r\n    if(req.params.name){\r\n        // console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=await validateFunc.checkSearchValue(constructedValue,inputRule.employee)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await employeeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await employeeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\nemployee['search']=async function(req,res,next){\r\n    //let recorder\r\n    // console.log(`search input is ${JSON.stringify(req.body.values)}`)\r\n    /*    console.log(`escap result is ${miscFunc.escapeRegSpecialChar(req.body.values.name[0])}`)\r\n     let escapeChar=miscFunc.escapeRegSpecialChar(req.body.values.name[0])\r\n     let reg=new RegExp(escapeChar)\r\n     console.log(`reg is ${reg}`)\r\n     let str='123'\r\n     let matchRes=str.match(reg)\r\n     console.log(matchRes)*/\r\n    let sanitizedInputValue=await sanitySearchInput(req.body.values,fkAdditionalFieldsConfig.employee,coll.employee,inputRule)\r\n    // console.log(`santiy result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    let searchParams=validateFunc.genNativeSearchCondition(req.body.values,coll.employee,fkAdditionalFieldsConfig.employee,inputRule)\r\n    console.log(`convert search params id ${JSON.stringify(searchParams)}`)\r\n    let recorder=await employeeDbOperation.search(searchParams)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    //return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)m\r\n}\r\n\r\n\r\n/*********************  billType  *******************************/\r\nlet billType={}\r\n\r\nbillType['create']=async function(req,res,next){\r\n    //1. 对输入进行检查，确保是合格的输入\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,false,maxFieldNum.billType)\r\n    //console.log(`1st san ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //2. 数据加入数组，采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n/*    console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    console.log(`after sant ${validateFunc.convertClientValueToServerFormat(req.body.values)}`)*/\r\n    arrayResult.push(validateFunc.convertClientValueToServerFormat(req.body.values))\r\n    //3 检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        if(doc.parentBillType){\r\n            let result=await checkIdExist(coll.billType,coll.billType,'parentBillType',doc.parentBillType)\r\n            // console.log(`fk result is ${JSON.stringify(result)}`)\r\n            if(0<result.rc){\r\n                // console.log('department fail')\r\n                return res.json(returnResult(result))\r\n            }\r\n        }\r\n    }\r\n    //4 删除null的字段（null说明字段为空，所以无需传入db\r\n    for(let doc of arrayResult){\r\n        validateFunc.constructCreateCriteria(doc)\r\n    }\r\n\r\n// console.log(`arr`)\r\n    //4.5 如果外键存在，获得外键的额外字段\r\n    // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.billType)}`)\r\n    for(let idx in arrayResult) {\r\n        // console.log(`idx is ${idx}`)\r\n        let doc = arrayResult[idx]\r\n        let getFkResult=await getFkAdditionalFields(doc,fkAdditionalFieldsConfig.billType)\r\n        if(getFkResult.rc>0){\r\n            return res.json(getFkResult)\r\n        }\r\n    }\r\n\r\n    // console.log(`converted result is ${JSON.stringify(arrayResult)}`)\r\n\r\n    //5. 对db执行操作\r\n    let result=await billTypeDbOperation.create(arrayResult)\r\n    if(result.rc>0){\r\n        return res.json(result)\r\n    }\r\n\r\n    //6. 检查是否需要populate\r\n    let populateResult=await populateSingleDoc(result.msg[0],populateOpt.billType,populatedFields.billType)\r\n\r\n    return res.json(returnResult(populateResult))\r\n}\r\n\r\nbillType['update']=async function(req,res,next){\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.billType,true,maxFieldNum.billType)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(req.body.values)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n\r\n    //4 上级不能设成自己\r\n    if(id===convertedResult.parentBillType){\r\n        return res.json(returnResult(pageError.billType.parentCantBeSelf))\r\n    }\r\n    //console.log(`convertedResult is  ${JSON.stringify(convertedResult)}`)\r\n    //console.log(`before get ${JSON.stringify(convertedResult)}`)\r\n    //4.5 如果外键存在，获得外键的额外字段\r\n    // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.billType)}`)\r\n    let getFkResult=await getFkAdditionalFields(convertedResult,fkAdditionalFieldsConfig.billType)\r\n    if(getFkResult.rc>0){\r\n        return res.json(getFkResult)\r\n    }\r\n    //console.log(`after get ${JSON.stringify(convertedResult)}`)\r\n\r\n    //5 检查输入的更新字段中，是否有需要被删除的字段（设为null的字段）\r\n    validateFunc.constructUpdateCriteria(convertedResult)\r\n    // console.log(`after check null field ${JSON.stringify(convertedResult)}`)\r\n    //6 检查外键是否存在\r\n    if(null!==convertedResult.parentBillType && undefined!==convertedResult.parentBillType){\r\n        let result=await checkIdExist(coll.billType,coll.billType,'parentBillType',convertedResult.parentBillType)\r\n        // console.log(`fk result is ${JSON.stringify(result)}`)\r\n        if(0<result.rc){\r\n            // console.log('department fail')\r\n            return res.json(returnResult(result))\r\n        }\r\n    }\r\n    //7 执行db操作\r\n    let result=await billTypeDbOperation.update(id,convertedResult)\r\n    if(result.rc>0){\r\n        return res.json(returnResult(result))\r\n    }\r\n    //null说明没有执行任何更新\r\n    console.log(`billtype update is ${JSON.stringify(result)}`)\r\n    if(null===result.msg){\r\n        return res.json(returnResult(pageError.billType.billTypeNotExists))\r\n    }\r\n    //8 执行可能的populate操作\r\n    // console.log(`db update result is ${JSON.stringify(result)}`)\r\n    let populateResult=await populateSingleDoc(result.msg,populateOpt.billType,populatedFields.billType)\r\n    return res.json(returnResult(populateResult))\r\n\r\n    // return res.json(returnResult(result))\r\n}\r\n\r\n\r\nbillType['remove']=async function(req,res,next){\r\n    //delete传参数的方式和get类似，只能放在URL中，为了复用sanityValue函数，需要将参数转换成{field:{value:'val'}}\r\n    let inputResult={}\r\n    console.log(`delete params is ${JSON.stringify(req.params.id)}`)\r\n    let checkResult=validateFunc.validateDeleteInput(req.params.id)\r\n    console.log(`delete check result is ${JSON.stringify(checkResult)}`)\r\n    if(checkResult.rc>0){\r\n        return res.json(returnResult(checkResult))\r\n    }\r\n    inputResult['_id']={value:req.params.id}\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    let sanitizedInputValue=await sanityInput(inputResult,inputRule.billType,true,maxFieldNum.billType)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(inputResult)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3 提取数据\r\n    let id=convertedResult._id\r\n    delete convertedResult._id\r\n    // console.log(`id is ${id}`)\r\n    let result=await billTypeDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\nbillType['readAll']=async function(req,res,next){\r\n    let result=await billTypeDbOperation.readAll(populateOpt.billType)\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\nbillType['readName']=async function(req,res,next){\r\n    let recorder\r\n    console.log(`parems is ${JSON.stringify(req.params.name)}`)\r\n    if(req.params.name){\r\n        console.log(`name is ${req.params.name}`)\r\n        let constructedValue={name:{value:req.params.name}}\r\n        let validateResult=validateFunc.checkSearchValue(constructedValue,inputRule.billType)\r\n        console.log(`search result check is ${JSON.stringify(validateResult)}`)\r\n        if(validateResult['name']['rc']>0){\r\n            return res.json(validateResult['name'])\r\n        }\r\n        recorder=await billTypeDbOperation.readName(req.params.name)\r\n    }else{\r\n        recorder=await billTypeDbOperation.readName()\r\n    }\r\n\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)\r\n}\r\n\r\nbillType['search']=async function(req,res,next){\r\n    //let recorder\r\n    // console.log(`search input is ${JSON.stringify(req.body.values)}`)\r\n/*    console.log(`escap result is ${miscFunc.escapeRegSpecialChar(req.body.values.name[0])}`)\r\n    let escapeChar=miscFunc.escapeRegSpecialChar(req.body.values.name[0])\r\n    let reg=new RegExp(escapeChar)\r\n    console.log(`reg is ${reg}`)\r\n    let str='123'\r\n    let matchRes=str.match(reg)\r\n    console.log(matchRes)*/\r\n    let sanitizedInputValue=await sanitySearchInput(req.body.values,fkAdditionalFieldsConfig.billType,coll.billType,inputRule)\r\n    // console.log(`santiy result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    let searchParams=validateFunc.genNativeSearchCondition(req.body.values,coll.billType,fkAdditionalFieldsConfig.billType,inputRule)\r\n    console.log(`convert search params id ${JSON.stringify(searchParams)}`)\r\n    let recorder=await billTypeDbOperation.search(searchParams)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    //return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)m\r\n}\r\n\r\n/*********************  bill  ******************************\r\n * 部门\r\n * */\r\nlet bill={}\r\nbill['create']=async function (req,res,next){\r\n    //console.log(`before san ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(req.body.values,inputRule.bill,false,maxFieldNum.bill)\r\n    //console.log(`1st san ${JSON.stringify(sanitizedInputValue)}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n    //2 采用insertMany，所有输入必须是数组\r\n    let arrayResult=[]\r\n    //从{name:{value:'11'}}====>{name:'11'}\r\n    //     console.log(`before sant ${sanitizedInputValue.msg}`)\r\n    //  console.log(`after sant ${validateFunc.convertClientValueToServerFormat(req.body.values)}`)\r\n    arrayResult.push(validateFunc.convertClientValueToServerFormat(req.body.values))\r\n    //3 检查外键是否存在\r\n    for(let doc of arrayResult){\r\n        /*        let fkReimburserResult=await employeeDbOperation.findById(doc.reimburser)\r\n         let fkBillTypeResult=await billTypeDbOperation.findById(doc.billType)*/\r\n        //同时执行，尽快得到结果\r\n        let [fkReimburserResult,fkBillTypeResult]=await Promise.all([checkIdExist(coll.employee,coll.bill,'reimburser',doc.reimburser),checkIdExist(coll.billType,coll.bill,'billType',doc.billType)])\r\n//console.log(`fkReimburserResult result is ${JSON.stringify(fkReimburserResult)}`)\r\n//        console.log(`fkBillTypeResult result is ${JSON.stringify(fkBillTypeResult)}`)\r\n        if(fkReimburserResult.rc>0){\r\n            return res.json(returnResult(fkReimburserResult))\r\n        }\r\n        if(fkBillTypeResult.rc>0){\r\n            return res.json(returnResult(fkBillTypeResult))\r\n        }\r\n\r\n    }\r\n\r\n    //4 删除null的字段（null说明字段为空，所以无需传入db\r\n    for(let doc of arrayResult){\r\n        validateFunc.constructCreateCriteria(doc)\r\n    }\r\n    //4.5 如果外键存在，获得外键的额外字段\r\n    // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.billType)}`)\r\n    for(let idx in arrayResult) {\r\n        // console.log(`idx is ${idx}`)\r\n        let doc = arrayResult[idx]\r\n        let getFkResult=await getFkAdditionalFields(doc,fkAdditionalFieldsConfig.bill)\r\n        if(getFkResult.rc>0){\r\n            return res.json(getFkResult)\r\n        }\r\n    }\r\n    //5. 对db执行操作\r\n    let result=await billDbOperation.create(arrayResult)\r\n    if(result.rc>0){\r\n        return res.json(result)\r\n    }\r\n\r\n    //6. 检查是否需要populate\r\n    let populateResult=await populateSingleDoc(result.msg[0],populateOpt.bill,populatedFields.bill)\r\n\r\n    return res.json(returnResult(populateResult))\r\n}\r\n\r\nbill['update']=async function (req,res,next) {\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue = await sanityInput(req.body.values, inputRule.bill, true, maxFieldNum.bill)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    // console.log(`update sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    if (sanitizedInputValue.rc > 0) {\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult = validateFunc.convertClientValueToServerFormat(req.body.values)\r\n    //3， 提取数据并执行操作\r\n    let id = convertedResult._id\r\n    delete convertedResult._id\r\n    //4 检查输入的更新字段中，是否有需要被删除的字段（设为null的字段）\r\n    validateFunc.constructUpdateCriteria(convertedResult)\r\n    //5. 检查可能的外键（billType/reimburser）\r\n    if (convertedResult.billType) {\r\n        let fkBillTypeResult = await checkIdExist(coll.billType, coll.bill, 'billType', convertedResult.billType)\r\n        if (fkBillTypeResult.rc > 0) {\r\n            return res.json(returnResult(fkBillTypeResult))\r\n        }\r\n        //4.5 如果外键存在，获得外键的额外字段\r\n        // console.log(`config is ${JSON.stringify(fkAdditionalFieldsConfig.billType)}`)\r\n        let getFkResult = await getFkAdditionalFields(convertedResult, fkAdditionalFieldsConfig.bill)\r\n        if (getFkResult.rc > 0) {\r\n            return res.json(getFkResult)\r\n        }\r\n        //console.log(`after get ${JSON.stringify(convertedResult)}`)\r\n\r\n        //5 检查输入的更新字段中，是否有需要被删除的字段（设为null的字段）\r\n        validateFunc.constructUpdateCriteria(convertedResult)\r\n        if (null !== convertedResult.reimburser && undefined !== convertedResult.reimburser) {\r\n            // console.log(`san result is ${JSON.stringify(sanitizedInputValue)}`)\r\n            let fkReimburserResult = await checkIdExist(coll.employee, coll.bill, 'reimburser', convertedResult.reimburser)\r\n            // console.log(`check result is ${JSON.stringify(fkReimburserResult)}`)\r\n            if (fkReimburserResult.rc > 0) {\r\n                return res.json(returnResult(fkReimburserResult))\r\n            }\r\n        }\r\n\r\n\r\n        // console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n\r\n\r\n//6 执行db操作\r\n        let result = await billDbOperation.update(id, convertedResult)\r\n        if (result.rc > 0) {\r\n            return res.json(returnResult(result))\r\n        }\r\n        //null说明没有执行任何更新\r\n        if (null === result.msg) {\r\n            return res.json(returnResult(pageError.bill.billNotExist))\r\n        }\r\n        //7 执行可能的populate操作\r\n        let populateResult = await populateSingleDoc(result.msg, populateOpt.bill, populatedFields.bill)\r\n        return res.json(returnResult(populateResult))\r\n\r\n        // return res.json(returnResult(result))\r\n    }\r\n}\r\n\r\nbill['remove']=async function (req,res,next){\r\n    //delete传参数的方式和get类似，只能放在URL中，为了复用sanityValue函数，需要将参数转换成{field:{value:'val'}}\r\n    let inputResult={}\r\n    console.log(`delete params is ${JSON.stringify(req.params.id)}`)\r\n    let checkResult=validateFunc.validateDeleteInput(req.params.id)\r\n    //console.log(`delete check result is ${JSON.stringify(checkResult)}`)\r\n    if(checkResult.rc>0){\r\n        return res.json(returnResult(checkResult))\r\n    }\r\n    inputResult['_id']={value:req.params.id}\r\n    //1 检查输入的参数，并作转换（如果是字符串）\r\n    //console.log(`sanity result is ${JSON.stringify(req.body.values)}`)\r\n    let sanitizedInputValue=await sanityInput(inputResult,inputRule.bill,true,maxFieldNum.bill)\r\n    //console.log(`sanity result is ${JSON.stringify(sanitizedInputValue)}`)\r\n    //console.log(`update sanity result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    //2. 将client输入转换成server端的格式\r\n    let convertedResult=validateFunc.convertClientValueToServerFormat(req.body.values)\r\n    //console.log(`convert result is ${JSON.stringify(convertedResult)}`)\r\n    //3， 提取数据并执行操作\r\n    let id=convertedResult._id\r\n    //console.log(`id is ${id}`)\r\n    let result=await billDbOperation.remove(id)\r\n    //console.log(`db op result is ${result}`)\r\n\r\n    return res.json(returnResult(result))\r\n}\r\n\r\n\r\n\r\nbill['readAll']=async function (req,res,next){\r\n    let result=await billDbOperation.readAll(populateOpt.bill)\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    return res.json(returnResult(result))\r\n    //return JSON.stringify(result)\r\n}\r\nbill['search']=async function(req,res,next){\r\n    //let recorder\r\n    // console.log(`search input is ${JSON.stringify(req.body.values)}`)\r\n    /*    console.log(`escap result is ${miscFunc.escapeRegSpecialChar(req.body.values.name[0])}`)\r\n     let escapeChar=miscFunc.escapeRegSpecialChar(req.body.values.name[0])\r\n     let reg=new RegExp(escapeChar)\r\n     console.log(`reg is ${reg}`)\r\n     let str='123'\r\n     let matchRes=str.match(reg)\r\n     console.log(matchRes)*/\r\n    let sanitizedInputValue=await sanitySearchInput(req.body.values,fkAdditionalFieldsConfig.billType,coll.billType,inputRule)\r\n    // console.log(`santiy result is ${sanitizedInputValue}`)\r\n    if(sanitizedInputValue.rc>0){\r\n        return res.json(returnResult(sanitizedInputValue))\r\n    }\r\n\r\n    let searchParams=validateFunc.genNativeSearchCondition(req.body.values,coll.billType,fkAdditionalFieldsConfig.billType,inputRule)\r\n    console.log(`convert search params id ${JSON.stringify(searchParams)}`)\r\n    let recorder=await billDbOperation.search(searchParams)\r\n\r\n    return res.json(returnResult(recorder))\r\n    //console.log(`db op result is ${JSON.stringify(result)}`)\r\n\r\n    //return res.json(returnResult(recorder))\r\n    //return JSON.stringify(result)m\r\n}\r\n\r\n\r\n\r\nmodule.exports={\r\n    common,\r\n    debug,\r\n    user,\r\n    department,\r\n    employee,\r\n    billType,\r\n    bill,\r\n}"]}