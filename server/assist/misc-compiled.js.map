{"version":3,"sources":["misc.js"],"names":[],"mappings":"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","file":"misc-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2015-09-07.\r\n * 可以和generalFunction合并\r\n */\r\n'use strict'\r\nrequire(\"babel-polyfill\");\r\nrequire(\"babel-core/register\")\r\n\r\nvar fs=require('fs')\r\n//var general=require('../assist/general').general\r\nvar miscError=require('../define/error/nodeError').nodeError.assistError.misc\r\nvar gmError=require('../define/error/nodeError').nodeError.assistError.gmImage\r\n//var input_validate=require('../error_define/input_validate').input_validate\r\n\r\nvar randomStringType=require('../define/enum/node').node.randomStringType\r\nvar userStateEnum=require('../define/enum/node').node.userState\r\nvar regex=require('../define/regex/regex').regex\r\n\r\n/*var ioredis=require('ioredis')\r\nvar ioredisClient=new ioredis()*/\r\nvar LuaSHA=require('../define/enum/Lua').LuaEnum\r\nvar redisError=require('../define/error/redisError').redisError\r\n\r\n/*      for CRUDGlobalSetting       */\r\nvar defaultSetting=require('../config/global/defaultGlobalSetting').defaultSetting\r\n//use redis to save get golbalSetting\r\nvar ioredisClient=require('../model/redis/connection/redis_connections').ioredisClient\r\n/*var dataTypeCheck=require('../../../assist/misc').func.dataTypeCheck\r\nvar redisError=require('../../../define/error/redisError').redisError*/\r\n//var inputValid=require('./valid').inputValid\r\n\r\n/*              for input valid         */\r\n//var regex=require('../define/regex/regex').regex.regex\r\nvar validateError=require('../define/error/nodeError').nodeError.assistError.misc.validate\r\n\r\n/*var dataTypeCheck=require('../assist/misc').func.dataTypeCheck\r\nvar ruleTypeCheck=require('../assist/misc').func.ruleTypeCheck*/\r\n\r\n//var fs=require('fs')\r\nvar dataType=require('../define/enum/validEnum').enum.dataType\r\nvar ruleType=require('../define/enum/validEnum').enum.ruleType\r\nvar clientRuleType=require('../define/enum/validEnum').enum.clientRuleType\r\n\r\nvar otherFiledNameEnum=require('../define/enum/validEnum').enum.otherFiledName\r\n//var rightResult={rc:0}\r\n//var CRUDGlobalSetting=require('../model/redis/common/CRUDGlobalSetting').CRUDGlobalSetting\r\n//var async=require('async')\r\nvar redisWrapAsync=require('./wrapAsync/db/redis/wrapAsyncRedis.js')\r\n\r\nvar rightResult={rc:0,msg:null}\r\n\r\nvar checkInterval=function(req,cb){\r\n    let identify\r\n    if(req.session && req.session.id){\r\n        identify=req.session.id\r\n    }\r\n    //req.ip和req.ips，只有在设置了trust proxy之后才能生效，否则一直是undefined\r\n    if(req.ips && req.ips[0]){\r\n        identify= req.ips[0]\r\n    }\r\n    if(undefined===identify){\r\n        return cb(null,miscError.checkInterval.unknownRequestIdentify)\r\n    }\r\n    ioredisClient.evalsha(LuaSHA.Lua_check_interval,1,identify,new Date().getTime(),function(err,checkResult){\r\n        //ioredisClient.eval('../model/redis/lua_script/Lua_check_interval.lua',1,ip,new Date().getTime(),function(err,checkResult){\r\n        //ioredisClient.script('load','../model/redis/lua_script/Lua_check_interval.lua',function(err,sha){\r\n        //    ioredisClient.evalsha(sha,1,ip,new Date().getTime(),function(err,checkResult) {\r\n        if (err) {\r\n            //console.log(err)\r\n            return cb(null, redisError.general.luaFail)\r\n        }\r\n        //let result=checkResult.split(':')\r\n        //if(result[0]==checkResult){\r\n        //console.log(checkResult)\r\n        switch (checkResult[0]) {\r\n            case 0:\r\n                return cb(null, {rc: 0})\r\n            case 10:\r\n                let rc = {}\r\n                rc['rc'] = miscError.checkInterval.tooMuchReq.rc\r\n                rc['msg'] = `${miscError.checkInterval.forbiddenReq.msg.client}，请在${checkResult[1]}秒后重试`\r\n                //console.log(rc)\r\n                return cb(null, rc)\r\n            case 11:\r\n                //console.log(intervalCheckBaseIPNodeError.between2ReqCheckFail)\r\n                return cb(null, miscError.checkInterval.between2ReqCheckFail)\r\n                break;\r\n            case 12:\r\n                //console.log(intervalCheckBaseIPNodeError.exceedMaxTimesInDuration)\r\n                return cb(null, miscError.checkInterval.exceedMaxTimesInDuration)\r\n                break;\r\n            default:\r\n        }\r\n        //})\r\n    })\r\n}\r\n\r\n/*//本来先作为路由句柄，但是此功能无法在router上使用（而只能在app上使用）\r\n//可以作为中间件使用，但是不够灵活（get的时候出错，希望返回页面，post/put/delete的时候返回错误，希望在当前页面跳出对话框提示）。中间件只能对所有方式单一处理。\r\nvar checkIntervalMid=function(req,res,next){\r\n    let identify\r\n    if(req.session && req.session.id){\r\n        identify=req.session.id\r\n    }else if(req.ips && req.ips[0]){\r\n        identify= req.ips[0]\r\n    }\r\n    if(undefined===identify){\r\n        //return {rc:}\r\n    }\r\n    ioredisClient.evalsha(LuaSHA.Lua_check_interval,1,identify,new Date().getTime(),function(err,checkResult){\r\n        //ioredisClient.eval('../model/redis/lua_script/Lua_check_interval.lua',1,ip,new Date().getTime(),function(err,checkResult){\r\n        //ioredisClient.script('load','../model/redis/lua_script/Lua_check_interval.lua',function(err,sha){\r\n        //    ioredisClient.evalsha(sha,1,ip,new Date().getTime(),function(err,checkResult) {\r\n        if (err) {\r\n            console.log(err)\r\n            return res.json(null, redisError.general.luaFail)\r\n        }\r\n        //let result=checkResult.split(':')\r\n        /!*console.log(checkResult)\r\n         //if(result[0]==checkResult){\r\n         switch (checkResult[0]) {\r\n         case 0:\r\n         //console.log('next')\r\n         next()\r\n         break;\r\n         //return cb(null, {rc: 0})\r\n         case 10:\r\n         let rc = {}\r\n         rc['rc'] = intervalCheckBaseIPNodeError.tooMuchReq.rc\r\n         rc['msg'] = `${intervalCheckBaseIPNodeError.forbiddenReq.msg}，请在${checkResult[1]}秒后重试`\r\n         //console.log(rc)\r\n         return res.json(rc)\r\n         case 11:\r\n         //console.log(intervalCheckBaseIPNodeError.between2ReqCheckFail)\r\n         return res.json( intervalCheckBaseIPNodeError.between2ReqCheckFail)\r\n         break;\r\n         case 12:\r\n         //console.log(intervalCheckBaseIPNodeError.exceedMaxTimesInDuration)\r\n         return res.json(intervalCheckBaseIPNodeError.exceedMaxTimesInDuration)\r\n         break;\r\n         default:\r\n         }*!/\r\n\r\n        //})\r\n    })\r\n}*/\r\n\r\nfunction sleep(numberMillis) {\r\n    var now = new Date();\r\n    var exitTime = now.getTime() + numberMillis;\r\n    while (true) {\r\n        now = new Date();\r\n        if (now.getTime() > exitTime)\r\n            return;\r\n    }\r\n}\r\n\r\n/*\r\n* 数值123.0复制后，实际变成123，影响程序处理方式\r\n* */\r\nvar dataTypeCheck= {\r\n    //是否已经赋值\r\n    isSetValue(variant){\r\n        return (undefined !== variant && null !== variant)\r\n    },\r\n    //已经赋值，赋的值是不是为空（string:空字符串；object:{},array:[]）\r\n    isEmpty(value) {\r\n        if (undefined === value || null === value) {\r\n            return true\r\n        }\r\n        switch (typeof value) {\r\n            case \"string\":\r\n                return ( \"\" === value || 0 === value.length || \"\" === value.trim());\r\n                break;\r\n            case \"object\":\r\n                if (true === this.isArray(value)) {\r\n                    return 0 === value.length\r\n                } else {\r\n                    return 0 === Object.keys(value).length\r\n                }\r\n                break;\r\n        }\r\n        return false\r\n    },\r\n\r\n    isArray(obj) {\r\n        return obj && typeof obj === 'object' &&\r\n            Array == obj.constructor;\r\n    },\r\n\r\n    isObject(obj){\r\n        return obj && typeof obj === 'object' && Object == obj.constructor;\r\n    },\r\n    isString(value){\r\n        return typeof value === 'string'\r\n    },\r\n//检查是否有效日期; 返回false或者转换后的日期\r\n    isDate(date) {\r\n        let parsedDate=new Date(date)\r\n        if(parsedDate.toLocaleString() ===  'Invalid Date'){\r\n            return false\r\n        }\r\n        return parsedDate;\r\n        //}\r\n    },\r\n    isInt(value) {\r\n        //首先检查类型，只对number或者string进行处理（否则parseInt对array也起作用）\r\n        let tmpType=typeof value\r\n        if(tmpType!='number' && tmpType!='string'){\r\n            return false\r\n        }\r\n        let parsedInt=parseInt(value)\r\n        if(true===isNaN(parsedInt)){\r\n            return false\r\n        }\r\n        //对于字符来说，如果小数点之后是全0，认为不是整数（即'1.0'不等于'1'）\r\n        if (typeof value == 'string') {\r\n            /*console.log(`${value} is string`)\r\n             console.log(parseInt(value).toString()===value)*/\r\n            if(parsedInt.toString() !== value){\r\n                return false\r\n            }\r\n        }\r\n        if (typeof value == 'number') {\r\n            //对于数值来说，如果小数点之后是全0，认为是整数（即1.0等于1）\r\n            if( parsedInt !== value){\r\n                return false\r\n            }\r\n        }\r\n        return parsedInt\r\n        //return false\r\n    },\r\n    //整数，但是超出int所能表示的范围（无法处理，大数会变成科学计数法，从而无法用regex判断）。所以只能处理string类型\r\n    isNumber(value) {\r\n        if('string' !== typeof value){\r\n            //value=value.toString()\r\n            return false //无法处理数字，因为大数字在赋值时被转换成科学计数法，从而无法用regex判断\r\n        }\r\n        return regex.number.test(value)\r\n    },\r\n\r\n    //对于大的数字，parseFloat会转换成科学计数法(1.23e+56)\r\n    isFloat(value){\r\n        //首先检查类型，只对number或者string进行处理（否则parseInt对array也起作用）\r\n        let tmpType=typeof value\r\n        if(tmpType!='number' && tmpType!='string'){\r\n            return false\r\n        }\r\n        let parsedValue=parseFloat(value)\r\n        if(true===isNaN(parsedValue)){\r\n            return false\r\n        }\r\n        if('string' === typeof value){\r\n            //==，string隐式转换成数字进行比较\r\n            if( parsedValue!=value){\r\n                return false\r\n            }\r\n        }\r\n\r\n        if (typeof value == 'number') {\r\n            if(parsedValue !== value){\r\n                return false\r\n            }\r\n        }\r\n\r\n        return parsedValue\r\n    },\r\n\r\n\r\n    isPositive(value) {\r\n\r\n        let parsedValue = parseFloat(value)\r\n/*        if(isNaN(parsedValue)){\r\n            return false\r\n        }*/\r\n        return parsedValue > 0\r\n    },\r\n    isFolder(path) {\r\n        return fs.statSync(path).isDirectory()\r\n    },\r\n\r\n    isFile(file) {\r\n        return fs.statSync(file).isFile()\r\n    },\r\n}\r\n\r\n\r\n//无法确保带检测的值的类型（在rule定义的文件中，type可以是字符或者数值，甚至是array），所以需要函数对输入进行检测，排除不支持的类型\r\nvar ruleTypeCheck= {\r\n    exceedMaxLength(value, maxLength) {\r\n        //length属性只能在数字/字符/数组上执行\r\n        if(false===dataTypeCheck.isArray(value) && false===dataTypeCheck.isInt(value) && false===dataTypeCheck.isFloat(value) && dataTypeCheck.isString(value)){\r\n            return false\r\n        }\r\n        //数字需要转换成字符才能执行length\r\n        if(false!==dataTypeCheck.isFloat(value) || false!==dataTypeCheck.isInt(value)){\r\n            return value.toString().length > maxLength\r\n        }\r\n        return value.length > maxLength\r\n    },\r\n\r\n    exceedMinLength(value, minLength) {\r\n        if(false===dataTypeCheck.isArray(value) && false===dataTypeCheck.isInt(value) && false===dataTypeCheck.isFloat(value) && dataTypeCheck.isString(value)){\r\n            return false\r\n        }\r\n        //数字需要转换成字符才能执行length\r\n        if(dataTypeCheck.isFloat(value) || dataTypeCheck.isInt(value)){\r\n            return value.toString().length < minLength\r\n        }\r\n        return value.length < minLength\r\n    },\r\n\r\n    exactLength(value, exactLength) {\r\n        if(false===dataTypeCheck.isArray(value) && false===dataTypeCheck.isInt(value) && false===dataTypeCheck.isFloat(value) && dataTypeCheck.isString(value)){\r\n            return false\r\n        }\r\n        //数字需要转换成字符才能执行length\r\n        if(dataTypeCheck.isFloat(value) || dataTypeCheck.isInt(value)){\r\n            return value.toString().length === exactLength\r\n        }\r\n        return value.length === exactLength\r\n    },\r\n\r\n    //广义比较，包括null和undefined的比较\r\n    equalTo(value, equalToValue) {\r\n        //return (false===dataTypeCheck.isEmpty(value) && value===equalToValue)\r\n        if(value instanceof Date && equalToValue instanceof Date){\r\n            return value.toLocaleString()===equalToValue.toLocaleString()\r\n        }\r\n        return value === equalToValue\r\n    },\r\n\r\n    format(value, format) {\r\n        return format.test(value)\r\n    },\r\n\r\n    //以下函数只能支持数值，必须由调用者确保参数的类型\r\n    exceedMax(value, definedValue) {\r\n        return parseFloat(value) > parseFloat(definedValue)\r\n    },\r\n    exceedMin(value, definedValue) {\r\n        return parseFloat(value) < parseFloat(definedValue)\r\n    },\r\n\r\n    isFileFolderExist(value) {\r\n        return fs.existsSync(value)\r\n    },\r\n}\r\n\r\nvar CRUDGlobalSetting={\r\n\r\n/*    _constructNull(){\r\n        let result={}\r\n        for(let item in defaultSetting){\r\n            result[item]={}\r\n            for (let subItem in defaultSetting[item]){\r\n                result[item][subItem]={}\r\n                result[item][subItem]['value']=null\r\n            }\r\n        }\r\n        return result\r\n    },*/\r\n\r\n    setDefault(){\r\n        //let emptyValue=this._constructNull()\r\n        //预先构建结构\r\n        let result={}\r\n        for(let item in defaultSetting){\r\n            result[item]={}\r\n            for (let subItem in defaultSetting[item]){\r\n                result[item][subItem]={}\r\n                result[item][subItem]['value']=null\r\n            }\r\n        }\r\n\r\n        for (let item in defaultSetting){\r\n            //for(let subItem in defaultSetting[item]){\r\n            let checkResult=validate.checkInput(result[item],defaultSetting[item])\r\n\r\n            for (let subItem in checkResult){\r\n                if(checkResult[subItem]['rc']>0){\r\n                    // console.log(checkResult)\r\n                    return checkResult\r\n                }\r\n            }\r\n\r\n            //}\r\n        }\r\n\r\n        for(let item in defaultSetting){\r\n//console.log(item)\r\n            for (let subItem in defaultSetting[item]){\r\n//console.log(subItem)\r\n                //Is object but not an array, then change value to string\r\n                //for array, change to string automatically\r\n                let val=defaultSetting[item][subItem]['default']\r\n//console.log(`val:${val}`)\r\n                if(typeof val =='object' && !dataTypeCheck.isArray(val)){\r\n                    val=JSON.stringify(val)\r\n                    //console.log(val.toString())\r\n                }\r\n                //redisClient.select(1,function(err){\r\n                ioredisClient.hset([item,subItem,val])\r\n                //})\r\n            }\r\n        }\r\n        //})\r\n\r\n    },\r\n\r\n\r\n\r\n//直接返回subItem的值\r\n/*    getSingleSetting(item,subItem,cb){\r\n        //redisClient.on('ready',function(){\r\n        ioredisClient.hexists(item,subItem,function(err,exist){\r\n//console.log(exist)\r\n            if(1===exist){\r\n                ioredisClient.hget(item,subItem,function(err,result){\r\n                    if(err){return cb(null,redisError.general.getError)}\r\n                    //redis value are string, check if object(JSON)\r\n\r\n                    if(0===result.indexOf('{') && result[ result.length-1]=='}'){\r\n\r\n                        result=JSON.parse(result)\r\n                        //console.log(result)\r\n                    }\r\n                    //array\r\n                    else if(-1!==result.indexOf(',')){\r\n                        result=Array.from(result.split(','))\r\n                    }\r\n\r\n                    return cb(null,{rc:0,msg:result})\r\n                })\r\n            }else{\r\n                return cb(null,redisError.general.keyNotExist)\r\n            }\r\n        })\r\n        //})\r\n    },*/\r\n    async getSingleSetting(key,subKey){\r\n        //redisClient.on('ready',function(){\r\n        // return await redisWrapAsync.asyncHget('search','maxKeyNum')\r\n        let exist=await redisWrapAsync.asyncHexists(key,subKey)\r\n        if(exist.rc>0){\r\n            return exist\r\n        }\r\n        if(1===exist.msg){\r\n            let result=await redisWrapAsync.asyncHget(key,subKey)\r\n            let value=result.msg\r\n            \r\n            if(0===value.indexOf('{') && value[ value.length-1]=='}'){\r\n\r\n                value=JSON.parse(value)\r\n                //console.log(result)\r\n            }\r\n            //array\r\n            else if(-1!==value.indexOf(',')){\r\n                value=Array.from(value.split(','))\r\n                // console.log(value)\r\n            }\r\n            rightResult.msg=value\r\n\r\n            return rightResult\r\n        }else{\r\n            return redisError.other.notExist(key,subKey)\r\n        }\r\n        /*ioredisClient.hexists(key,subKey,function(err,exist){\r\n//console.log(exist)\r\n            if(1===exist){\r\n                ioredisClient.hget(key,subKey,function(err,result){\r\n                    if(err){return cb(null,redisError.general.getError)}\r\n                    //redis value are string, check if object(JSON)\r\n\r\n                    if(0===result.indexOf('{') && result[ result.length-1]=='}'){\r\n\r\n                        result=JSON.parse(result)\r\n                        //console.log(result)\r\n                    }\r\n                    //array\r\n                    else if(-1!==result.indexOf(',')){\r\n                        result=Array.from(result.split(','))\r\n                    }\r\n\r\n                    return cb(null,{rc:0,msg:result})\r\n                })\r\n            }else{\r\n                return cb(null,redisError.general.keyNotExist)\r\n            }\r\n        })*/\r\n        //})\r\n    },\r\n//获得数据项下所有子项的数据,并构成{item:{subItem1:value1,subItem2;value2}}的格式\r\n    async getItemSetting(item){\r\n        var wholeResult={};\r\n        wholeResult[item]={}\r\n        //计算item总数，以便确定合适可以返回全部（因为每读一次，都是异步）\r\n/*        var totalSubItemNum=0;\r\n        //获得数据项下所有子项的数量\r\n        if(undefined!==defaultSetting[item]){\r\n            wholeResult[item]={}\r\n            totalSubItemNum+=Object.keys(defaultSetting[item]).length\r\n            /!*        for (let subItem in  defaultSetting[item]){\r\n             totalSubItemNum++\r\n             }*!/\r\n        }else{\r\n            return cb(null,{rc:0,msg:wholeResult})\r\n        }*/\r\n//console.log(new Date().getTime())\r\n        //redisClient.on('ready',function(){\r\n//console.log(new Date().getTime())\r\n        for (let subItem in  defaultSetting[item]){\r\n            let result=await this.getSingleSetting(item,subItem)\r\n            if(result.rc && result.rc>0){\r\n                return result\r\n            }\r\n            // console.log(result)\r\n            wholeResult[item][subItem]=result.msg\r\n/*            this.getSingleSetting(item,subItem,function(err,result){\r\n//console.log(result)\r\n                if(result.rc && result.rc>0){\r\n                    return cb(null,result)\r\n                }\r\n                wholeResult[item][subItem]=result.msg\r\n                totalSubItemNum--\r\n                if(0===totalSubItemNum){\r\n                    cb(null,{rc:0,msg:wholeResult})\r\n                }\r\n                //console.log(wholeResult)\r\n            })*/\r\n        }\r\n        rightResult.msg=wholeResult\r\n        return rightResult\r\n        //})\r\n    },\r\n/*    getAllSetting(cb){\r\n        var wholeResult={};\r\n        //计算item总数，以便确定合适可以返回全部（因为每读一次，都是异步）\r\n        var totalSubItemNum=0;\r\n        for(let item in defaultSetting){\r\n            totalSubItemNum+=Object.keys(defaultSetting[item]).length\r\n        }\r\n        for(let item of Object.keys(defaultSetting)){\r\n            if(undefined===wholeResult[item]){\r\n                wholeResult[item]={}\r\n            }\r\n            for (let subItem of  Object.keys(defaultSetting[item])){\r\n                this.getSingleSetting(item,subItem,function(err,result){\r\n                    if(result.rc && result.rc>0){\r\n                        return cb(null,result)\r\n                    }\r\n                    wholeResult[item][subItem]=result.msg\r\n                    totalSubItemNum--\r\n                    if(0===totalSubItemNum){\r\n                        cb(null,{rc:0,msg:wholeResult})\r\n                    }\r\n                    //console.log(wholeResult)\r\n                })\r\n            }\r\n        }\r\n    },*/\r\n    async getAllSetting(){\r\n        var wholeResult={};\r\n        //计算item总数，以便确定合适可以返回全部（因为每读一次，都是异步）\r\n        // var totalSubItemNum=0;\r\n/*        for(let item in defaultSetting){\r\n            totalSubItemNum+=Object.keys(defaultSetting[item]).length\r\n        }*/\r\n        for(let item in defaultSetting){\r\n            if(undefined===wholeResult[item]){\r\n                wholeResult[item]={}\r\n            }\r\n            for (let subItem of  Object.keys(defaultSetting[item])){\r\n                console.log(`${item} ${subItem}`)\r\n                let result=await this.getSingleSetting(item,subItem)\r\n\r\n                // console.log(result)\r\n                // this.getSingleSetting(item,subItem,function(err,result){\r\n                if(result.rc && result.rc>0){\r\n                    // return cb(null,result)\r\n                    return result\r\n                }\r\n                wholeResult[item][subItem]=result.msg\r\n                    // totalSubItemNum--\r\n                    // if(0===totalSubItemNum){\r\n                    //     cb(null,{rc:0,msg:wholeResult})\r\n                    // }\r\n                    //console.log(wholeResult)\r\n                // })\r\n            }\r\n        }\r\n        // console.log(wholeResult)\r\n        return wholeResult\r\n    },\r\n\r\n    setSingleSetting(item,subItem,newValue){\r\n        //redisClient.on('ready',function(){\r\n        if(typeof newValue =='object' && !dataTypeCheck.isArray(newValue)){\r\n            newValue=JSON.stringify(newValue)\r\n        }\r\n        //console.log(item+subItem+newValue)\r\n        ioredisClient.hset([item,subItem,newValue])\r\n        //})\r\n    },\r\n//setAllSetting不能代替setDefault，因为setAllSetting读取的是{item1:{subItem1:{value:val1}}（和普通的input结构一致）,而setDefault读取的是{item1:{subItem1:{default:val1,type:'int',max:'',client:{}}}}\r\n    setAllSetting(newValueObj){\r\n\r\n        //读取固定键\r\n        //console.log(newValueObj)\r\n        for (let item in newValueObj) {\r\n            for (let subItem in  newValueObj[item]) {\r\n                let newValue=newValueObj[item][subItem];\r\n                /*                if (!newValueObj[item][subItem]) {\r\n                 newValue = newValueObj[item][subItem]\r\n                 }*/\r\n                //判断是否对象\r\n                if (typeof newValue == 'object' && !dataTypeCheck.isArray(newValue)) {\r\n                    newValue = JSON.stringify(newValue)\r\n                }\r\n                this.setSingleSetting(item, subItem, newValue)\r\n            }\r\n        }\r\n        //})\r\n    }\r\n}\r\n\r\n\r\n//len:产生字符串的长度\r\n//type: basic(0-9A-Z)；normal(0-9A-Za-z); complicated(normal+特殊字符)\r\nvar generateRandomString=function(len=4,type=randomStringType.normal){\r\n/*    if(undefined===len || false===dataTypeCheck.isInt(len)){\r\n        len=4\r\n    }*/\r\n/*    strict= strict ? true:false\r\n    let validString='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n    let result=''\r\n    if(true===strict){validString+=`${validString}!@#$%^&*()+={}[]|\\?/><`}*/\r\n    let validString\r\n    let basicString='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n    switch (type){\r\n        case randomStringType.basic:\r\n            validString=basicString\r\n            break;\r\n        case randomStringType.normal:\r\n            validString=`${basicString}abcdefghijklmnopqrstuvwxyz`\r\n            break;\r\n        case randomStringType.complicated:\r\n            validString=basicString+'abcdefghijklmnopqrstuvwxyz'+\"`\"+`!@#%&)(_=}{:\"><,;'[]\\^$*+|?.-`\r\n            break;\r\n    }\r\n    //console.log(validString)\r\n    let validStringLen=validString.length\r\n    let result='';\r\n    for(let i=0;i<len;i++){\r\n        result+=validString.substr(parseInt(Math.random()*validStringLen,10),1);\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n/*var generateSimpleRandomString=function(num){\r\n    var validString='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n    var len=validString.length\r\n    var randomIdx,result='';\r\n    for(var i=0;i<num;i++){\r\n        randomIdx=Math.round(Math.random()*(len-1));\r\n        result+=validString[randomIdx]\r\n    }\r\n    return result\r\n}*/\r\n\r\n//计算当天剩下的毫秒数\r\nvar leftMSInDay=function(){\r\n    let day=new Date().toLocaleDateString()\r\n    let endTime='23:59:59'\r\n    //毫秒\r\n    //let ttlTime=parseInt(new Date(`${day} ${endTime}`).getTime())-parseInt(new Date().getTime())\r\n    let ttlTime=new Date(`${day} ${endTime}`).getTime()-new Date().getTime()\r\n    //console.log(ttlTime)\r\n    return ttlTime\r\n}\r\n\r\nvar leftSecondInDay=function(){\r\n    //console.log(leftMSInDay)\r\n    return Math.round(parseInt(leftMSInDay())/1000)\r\n}\r\n\r\n/**\r\n * Created by wzhan039 on 2015-11-18.\r\n */\r\n\r\n//解析GM返回的文件大小，返回数值和单位（GM返回Ki，Mi，Gi.没有单位，是Byte。除了Byte，其他都只保留1位小数，并且四舍五入。例如：1.75Ki=1.8Ki）\r\n//1.8Ki，返回1.8和“ki”；900，返回900\r\n//解析失败，或者单位是Gi，返回对应的错误\r\n//{ rc: 0, msg: { sizeNum: '200', sizeUnit: 'Ki' } }\r\nvar parseGmFileSize=function(fileSize){\r\n    var p=/(\\d{1,}(\\.\\d{1,})?)([KkMmGg]i)?/ //1.8Ki\r\n    var parseResult=fileSize.match(p)\r\n    if(null===parseResult){\r\n        return gmError.cantParseGmFileSize\r\n    }\r\n    if(parseResult[0]!==fileSize ){\r\n        return gmError.cantParseGmFileSize\r\n    }\r\n    var fileSizeNum=parseFloat(parseResult[1])\r\n    if(isNaN(fileSizeNum)){\r\n        return  gmError.cantParseGmFileSizeNum\r\n    }\r\n    //单位是Gi，直接返回大小超限\r\n    if('Gi'===parseResult[3]){ //正则中的第二个子表达式只是用来把小数及之后的数字 放在一起做判断，而无需取出使用\r\n        return gmError.exceedMaxSize\r\n    }\r\n    return {rc:0,msg:{sizeNum:parseResult[1],sizeUnit:parseResult[3]}}\r\n}\r\n\r\n//把GM返回的fileSize转换成Byte，以便比较\r\n//{ rc: 0, msg: 204800 }\r\nvar convertImageFileSizeToByte=function(fileSizeNum,fileSizeUnit){\r\n    var imageFileSizeInByte,imageFileSizeNum //最终以byte为单位的大小； GM得到的size的数值部分\r\n    if(undefined===fileSizeUnit ){\r\n        imageFileSizeInByte=parseInt(fileSizeNum)\r\n        if(isNaN(imageFileSizeInByte)){\r\n            return gmError.cantParseGmFileSizeNum\r\n        }\r\n        if(imageFileSizeInByte>1024 || imageFileSizeInByte<0){\r\n            return gmError.invalidFileSizeInByte\r\n        }\r\n        return isNaN(imageFileSizeInByte) ?  gmError.fileSizeEmpty:{rc:0,msg:imageFileSizeInByte}\r\n    }\r\n    if('Ki'===fileSizeUnit){\r\n//console.log('k')\r\n        imageFileSizeNum =parseFloat(fileSizeNum)\r\n        return isNaN(imageFileSizeNum) ? gmError.cantParseGmFileSizeNum:{rc:0,msg:parseInt(fileSizeNum*1024)}\r\n    }\r\n    if('Mi'===fileSizeUnit){\r\n        imageFileSizeNum=parseFloat(fileSizeNum)\r\n        return isNaN(imageFileSizeNum) ? gmError.cantParseGmFileSizeNum:{rc:0,msg:parseInt(fileSizeNum*1024*1024)}\r\n    }\r\n    if('Gi'===fileSizeUnit){\r\n        imageFileSizeNum=parseFloat(fileSizeNum)\r\n        return isNaN(imageFileSizeNum) ? gmError.cantParseGmFileSizeNum:{rc:0,msg:parseInt(fileSizeNum*1024*1024*1024)}\r\n    }\r\n\r\n    return gmError.invalidSizeUnit\r\n}\r\n\r\nvar getPemFile=function(pemPath){\r\n    for(var i= 0,n=pemPath.length;i<n;i++){\r\n        if(true===fileExist(pemPath[i])){\r\n            //console.log(pemPath[i])\r\n            return pemPath[i]\r\n\r\n            //break\r\n        }\r\n    }\r\n    return\r\n}\r\n\r\n\r\n\r\n//1. 搜索字符串中的+转换成空格\r\n//2. 截取规定的字符数量\r\nvar convertURLSearchString=function(searchString,cb){\r\n    var tmpStr=searchString.split('+');\r\n    //console.log(tmpStr)\r\n    CRUDGlobalSetting.getSingleSetting('search','totalKeyLen',function(err,totalLen){\r\n        if(0<totalLen.rc){\r\n            return cb(null,totalLen)\r\n        }\r\n        var strNum=tmpStr.length\r\n        var curStrLen=0;//计算当前处理的字符长度\r\n        var curStr='';//转换后的搜索字符串（使用空格分隔）\r\n        for(var i=0;i<strNum;i++){\r\n            //第一个key就超长，直接截取20个字符\r\n            if(0===i && tmpStr[0].length>totalLen){\r\n                curStr=tmpStr[0].substring(0,totalLen)\r\n                return cb(null,{rc:0,msg:curStr.trim()})\r\n            }\r\n            //如果当前已经处理的字符串+下一个要处理的字符串的长度超出，返回当前已经处理的字符串，舍弃之后的字符串\r\n            //-i:忽略空格的长度\r\n            if(curStr.length+tmpStr[i].length-i>totalLen){\r\n                return cb(null,{rc:0,msg:curStr.trim()})\r\n            }\r\n            curStr+=tmpStr[i]\r\n            curStr+=' ';\r\n\r\n        }\r\n        return cb(null,{rc:0,msg:curStr.trim()})\r\n    })\r\n}\r\n\r\n//获得当前用户的信息，以便在toolbar上显示对应的信息\r\nvar getUserInfo=function(req){\r\n    var result\r\n    if(req.session.state===userStateEnum.login){\r\n        result=req.session.userName\r\n        //result.userId=req.session.userId\r\n    }\r\n    //console.log(result)\r\n    return result\r\n}\r\n\r\n/*var quit=function(req){\r\n req.session.state=2\r\n req.session.userName=undefined\r\n req.session.userId=undefined\r\n\r\n }*/\r\n \r\n\r\n\r\n\r\nvar checkUserState=function(req){\r\n    //需要检测状态,如果不是1或者2,就没有session,后续的代码也就不必执行\r\n    if(userStateEnum.notLogin!=req.session.state && userStateEnum.login!=req.session.state){\r\n        return miscError.user.notLogin\r\n    }\r\n    return rightResult\r\n}\r\n\r\n//直接在page中使用valid函数进行判断\r\n/*var checkUserIdFormat=function(req){\r\n    return input_validate.user._id.type.define.test(req.session.userId) ? rightResult:input_validate.user._id.type.client\r\n}*/\r\n\r\nvar checkUserLogin=function(req){\r\n    return req.session.state===userStateEnum.login ? rightResult:miscError.user.notLogin\r\n}\r\n\r\n//state只要不是undefine就可以\r\nvar checkUserStateNormal=function(req){\r\n    return (userStateEnum.login===req.session.state || userStateEnum.notLogin===req.session.state) ? rightResult:miscError.user.stateWrong\r\n}\r\n\r\n/*\r\n//新版本,使用新的逻辑\r\n//不管是request post还是get,都要和session中的lastPost/lastGet比较(如果session中有),然后保存\r\nvar checkInterval=function(req){\r\n    //console.log('in')\r\n    var curTime=new Date().getTime();//毫秒数\r\n\r\n    var durationSinceLastPost;//当前时间和上次POST的间隔\r\n    var durationSinceLastGet;//当前时间和上次GET的间隔\r\n    var reqType;\r\n    //获得必要的参数\r\n    if (true===req.route.methods.get){\r\n        reqType=\"GET\"\r\n    }\r\n    if (true===req.route.methods.post){\r\n        reqType=\"POST\"\r\n    }\r\n    if(undefined===reqType){\r\n        return runtimeNodeError.general.unknownRequestType;\r\n    }\r\n\r\n\r\n    if( undefined !=req.session.lastPost){\r\n        durationSinceLastPost=curTime-req.session.lastPost\r\n    }\r\n    if( undefined !=req.session.lastGet){\r\n        durationSinceLastGet=curTime-req.session.lastGet\r\n    }\r\n    //检查\r\n    if(\"POST\"===reqType){\r\n        if(undefined!==durationSinceLastPost){\r\n            if(durationSinceLastPost<general.sameRequestInterval) {\r\n                return runtimeNodeError.general.intervalPostPostWrong\r\n            }\r\n            if( durationSinceLastPost<general.differentRequestInterval){\r\n\r\n                return  runtimeNodeError.general.intervalPostGetWrong\r\n            }\r\n        }\r\n        req.session.lastPost=curTime\r\n        return rightResult\r\n    }\r\n    if(\"GET\"===reqType){\r\n        if(undefined!==durationSinceLastGet){\r\n            if(durationSinceLastGet<general.sameRequestInterval) {\r\n\r\n                return runtimeNodeError.general.intervalGetGetWrong\r\n            }\r\n            if( durationSinceLastGet<general.differentRequestInterval){\r\n                return  runtimeNodeError.general.intervalGetPostWrong\r\n            }\r\n        }\r\n        req.session.lastGet=curTime\r\n        return rightResult\r\n    }\r\n}\r\n*/\r\n\r\n// 检查\r\n// 1. 用户是否通过get获得页面(req.session.state=1 or 2)\r\n// 2. 根据user是否已经登陆，决定是否检查用户session中的用户id是否正确\r\n// 3. 检查interval\r\n// forceCheckUserLogin:true：强制检查用户已经登录； false：不检查用户是否已经登录\r\nvar preCheck=function(req, forceCheckUserLogin){\r\n    var result=checkUserStateNormal(req)\r\n    if(result.rc>0){\r\n        return result\r\n    }\r\n\r\n    if(true===forceCheckUserLogin){\r\n        if(userStateEnum.login!==req.session.state){\r\n            return miscError.user.notLogin\r\n        }\r\n    }\r\n\r\n    if(1===req.session.state){\r\n        result=regex.objectId.test(req.session.userId)\r\n        if(result.rc>0){\r\n            return miscError.user.userIdFormatWrong\r\n        }\r\n    }\r\n    return checkInterval(req)\r\n}\r\n\r\n/*\r\nconsole.log(generateRandomString(4,randomStringType.basic))\r\nconsole.log(generateRandomString(4,randomStringType.normal))\r\nconsole.log(generateRandomString(4,randomStringType.complicated))*/\r\n//根据defaultGlobalSetting的结构，构造空值，以便使用checkInput时，强制对default值进行检测\r\n\r\n/*\r\nexports.CRUDGlobalSetting={\r\n    setDefault:setDefault,\r\n    getSingleSetting:getSingleSetting,\r\n    constructNull:constructNull,\r\n    getItemSetting:getItemSetting,//用来获得当个item下所有数据\r\n    getAllSetting:getAllSetting,\r\n    setAllSetting:setAllSetting\r\n};*/\r\n\r\n\r\n\r\n\r\n/**\r\n * Created by wzhan039 on 2016-02-25.\r\n * 把前端传入的input的检查工作全部放在一个文件进行处理\r\n * 2部分：input的定义（require,minLength,maxLength,exactLength,format,equalTo），format只在server处理\r\n * 新增定义：min，max，file，folder：min/max：整数大小；file/folder：文件/文件夹是否存在\r\n *         对应的函数处理\r\n */\r\n/*          rulw        */\r\n/*1. 至少定义3个字段：chineseName/type/require\r\n* 2\r\n* */\r\n/*          value\r\n* 1. 如贵value=notSet，那么require=true && default isSet，value=default\r\n* 2. 如果value=notSet，那么require=true && default notSet，返回错误\r\n* 3. 如果value=notSet，那么require=false,返回rc=0\r\n* */\r\nvar validate={\r\n    _private:{\r\n        generateErrorMsg:{\r\n            //itemDefine无用，只是为了格式统一\r\n            require(chineseName,itemDefine,useDefaultValueFlag){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                return `${chineseName}${defaultMsg}不能为空`\r\n            },\r\n            maxLength(chineseName,itemDefine,useDefaultValueFlag){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                return  `${chineseName}${defaultMsg}所包含的字符数不能超过${itemDefine}个`\r\n            },\r\n            minLength(chineseName,itemDefine,useDefaultValueFlag){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                return  `${chineseName}${defaultMsg}包含的字符数不能少于${itemDefine}个`\r\n            },\r\n            exactLength(chineseName,itemDefine,useDefaultValueFlag){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                return  `${chineseName}${defaultMsg}包含的字符数不等于${itemDefine}个`\r\n            },\r\n            max(chineseName,itemDefine,useDefaultValueFlag,unit){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                unit= (undefined===unit || null===unit) ? '':unit\r\n                return  `${chineseName}${defaultMsg}的值不能大于${itemDefine}${unit}`\r\n            },\r\n            min(chineseName,itemDefine,useDefaultValueFlag,unit){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                unit= (undefined===unit || null===unit) ? '':unit\r\n                return  `${chineseName}${defaultMsg}的值不能小于${itemDefine}${unit}`\r\n            },\r\n            equalTo(chineseName,equalToChineseName){\r\n                return `${chineseName}和${equalToChineseName}不相等`\r\n            },\r\n            format(chineseName,itemDefine,useDefaultValueFlag){\r\n                if(undefined===useDefaultValueFlag || null===useDefaultValueFlag){\r\n                    useDefaultValueFlag=false\r\n                }\r\n                let defaultMsg= useDefaultValueFlag ? '的默认值':'';\r\n                switch(itemDefine){\r\n                    case regex.strictPassword:\r\n                        return `${chineseName}${defaultMsg}的格式不正确，必须由6至20个字母数字和特殊符号组成`\r\n                    //break;\r\n                    case regex.loosePassword:\r\n                        return `${chineseName}${defaultMsg}的格式不正确，必须由2至20个字母数字组成`\r\n                    //break;\r\n                    case regex.userName:\r\n                        return `${chineseName}${defaultMsg}的格式不正确，必须由2至20个字符组成`\r\n                    case regex.mobilePhone:\r\n                        return `${chineseName}${defaultMsg}的格式不正确，必须由11至13个数字组成`\r\n                    case regex.originalThumbnail:\r\n                        return `${chineseName}${defaultMsg}的格式不正确，文件名由2到20个字符组成`\r\n                    //hashedThumbnail不用单独列出，是内部检查，使用default错误消息即可\r\n                    default:\r\n                        return `${chineseName}${defaultMsg}的格式不正确`\r\n                }\r\n            },\r\n        },\r\n        //require,maxLength,minLength,exactLength,min,max,format\r\n        //返回值：true/false/unknownDataType\r\n        checkDataTypeBaseOnTypeDefine(value,type){\r\n            switch (type){\r\n                case dataType.int:\r\n                    return dataTypeCheck.isInt(value)   //返回false或者int\r\n                case dataType.float:\r\n                    return dataTypeCheck.isFloat(value)   //返回false或者int\r\n                case dataType.string:\r\n                    return dataTypeCheck.isString(value)\r\n                case dataType.date:\r\n                    return dataTypeCheck.isDate(value)\r\n                case dataType.array:\r\n                    return dataTypeCheck.isArray(value)\r\n                case dataType.object:\r\n                    return true\r\n                case dataType.file:\r\n                    return (ruleTypeCheck.isFileFolderExist(value) && dataTypeCheck.isFile(value));\r\n                case dataType.folder:\r\n                    return (ruleTypeCheck.isFileFolderExist(value) && dataTypeCheck.isFolder(value))\r\n                case dataType.number:\r\n                    return dataTypeCheck.isNumber(value)\r\n                default:\r\n                    return validateError.unknownDataType\r\n            }\r\n        },\r\n        //对rule定义进行检查\r\n        //返回值\r\n        checkRuleBaseOnRuleDefine(inputRules){\r\n            let rc={}\r\n            for(let inputRule in inputRules){\r\n                //1 检查必须的field\r\n                let mandatoryFields=['chineseName','type','require']\r\n                for(let mandatoryField of mandatoryFields){\r\n                    //console.log(inputRules[inputRule][mandatoryField])\r\n                    if(false===dataTypeCheck.isSetValue(inputRules[inputRule][mandatoryField])){\r\n                        rc['rc']=validateError.mandatoryFiledNotExist.rc\r\n                        rc['msg']=`${inputRule}的字段${mandatoryField}${validateError.mandatoryFiledNotExist.msg}`\r\n                        //console.log(rc)\r\n                        return rc\r\n                        //return validateError.mandatoryFiledNotExist\r\n                    }\r\n                }\r\n                //1.5 检查chineseName是否为字符，是否空，type是否在指定范围内（require由后面的rule check统一处理）\r\n                if(false===dataTypeCheck.isString(inputRules[inputRule]['chineseName'])){\r\n                    rc['rc']=validateError.chineseNameNotString.rc\r\n                    rc['msg']=`${inputRule}的${validateError.chineseNameNotString.msg}`\r\n                    return rc\r\n                }\r\n                if(dataTypeCheck.isEmpty(inputRules[inputRule]['chineseName'])){\r\n                    rc['rc']=validateError.chineseNameEmpty.rc\r\n                    rc['msg']=`${inputRule}的${validateError.chineseNameEmpty.msg}`\r\n                    return rc\r\n                }\r\n                //2 关联字段是否存在\r\n                //console.log(inputRules[inputRule]['type'])\r\n                switch (inputRules[inputRule]['type']){\r\n\r\n                    case dataType.int:\r\n\r\n                        if(false===dataTypeCheck.isSetValue(inputRules[inputRule]['min'])){\r\n                                rc['rc']=validateError.needMin.rc\r\n                                rc['msg']=`${inputRule}的${validateError.needMin.msg}`\r\n                                return rc\r\n\r\n                        }\r\n                        if( false===dataTypeCheck.isSetValue(inputRules[inputRule]['max'])){\r\n                            rc['rc']=validateError.needMax.rc\r\n                            rc['msg']=`${inputRule}的${validateError.needMax.msg}`\r\n                            return rc\r\n                        }\r\n                        break;\r\n                    case dataType.number:\r\n                        //console.log(inputRules[inputRule]['maxLength'])\r\n                        if(false===dataTypeCheck.isSetValue(inputRules[inputRule]['maxLength'])){\r\n                            rc['rc']=validateError.needMaxLength.rc\r\n                            rc['msg']=`${inputRule}的${validateError.needMaxLength.msg}`\r\n                            //console.log(rc)\r\n                            return rc\r\n                        };\r\n                        break\r\n                    default:\r\n                        break;\r\n                }\r\n                //3 rule字段的定义是否合格\r\n                /*        let rules=['require','maxLength','minLength','exactLength','min','max','format','equalTo']\r\n                 let rulesLength=rules.length*/\r\n                //不用forEach，因为其参数为function，遇到错误，return，只是退出forEach的function，而不是整个function\r\n                //for (let i=0;i<rulesLength;i++){\r\n                for (let singleRule in ruleType){\r\n                    //console.log('in')\r\n                    //let singleRule=rules[i]\r\n                    if(true===dataTypeCheck.isSetValue(inputRules[inputRule][singleRule])){\r\n                        if(false===dataTypeCheck.isSetValue(inputRules[inputRule][singleRule]['define'])){\r\n                            //console.log(inputRules[inputRule][singleRule])\r\n                            rc['rc']=validateError.ruleDefineNotDefine.rc\r\n                            rc['msg']=`${inputRule}的${singleRule}的${validateError.ruleDefineNotDefine.msg}`\r\n                            return rc\r\n                            //return  validateError.ruleDefineNotDefine\r\n                        }\r\n                        if(false===dataTypeCheck.isSetValue(inputRules[inputRule][singleRule]['error'])){\r\n                            rc['rc']=validateError.errorFieldNotDefine.rc\r\n                            rc['msg']=`${inputRule}的${singleRule}的${validateError.errorFieldNotDefine.msg}`\r\n                            return rc\r\n                            //return validateError.errorFieldNotDefine\r\n                        }\r\n                        if(false===dataTypeCheck.isSetValue(inputRules[inputRule][singleRule]['error']['rc'])){\r\n                            rc['rc']=validateError.rcFieldNotDefine.rc\r\n                            rc['msg']=`${inputRule}的${singleRule}的${validateError.rcFieldNotDefine.msg}`\r\n                            return rc\r\n                            //return validateError.rcFieldNotDefine\r\n                        }\r\n                        if(false===dataTypeCheck.isSetValue(inputRules[inputRule][singleRule]['error']['msg'])){\r\n                            rc['rc']=validateError.msgFieldNotDefine.rc\r\n                            rc['msg']=`${inputRule}的${singleRule}的${validateError.msgFieldNotDefine.msg}`\r\n                            return rc\r\n                            //return validateError.msgFieldNotDefine\r\n                        }\r\n\r\n                        let singleRuleDefine=inputRules[inputRule][singleRule]['define']\r\n\r\n                        switch (singleRule){\r\n                            case 'require':\r\n                                if(false!==singleRuleDefine && true!==singleRuleDefine){\r\n                                    rc['rc']=validateError.requireDefineNotBoolean.rc\r\n                                    rc['msg']=`${inputRule}的${validateError.requireDefineNotBoolean.msg}`\r\n                                    return rc\r\n                                }\r\n                                break;\r\n                            case 'minLength':\r\n                                if(false===dataTypeCheck.isInt(singleRuleDefine)){\r\n                                    rc['rc']=validateError.minLengthDefineNotInt.rc\r\n                                    rc['msg']=`${inputRule}的${validateError.minLengthDefineNotInt.msg}`\r\n                                    return rc\r\n                                }\r\n                                break;\r\n                            case 'maxLength':\r\n                                if(false===dataTypeCheck.isInt(singleRuleDefine)){\r\n                                    rc['rc']=validateError.maxLengthDefineNotInt.rc\r\n                                    rc['msg']=`${inputRule}的${validateError.maxLengthDefineNotInt.msg}`\r\n                                    return rc\r\n                                }\r\n                                break;\r\n                            case 'exactLength':\r\n                                if(false===dataTypeCheck.isInt(singleRuleDefine)){\r\n                                    rc['rc']=validateError.exactLengthDefineNotInt.rc\r\n                                    rc['msg']=`${inputRule}的${validateError.exactLengthDefineNotInt.msg}`\r\n                                    return rc\r\n                                }\r\n                                break;\r\n                            case 'min':\r\n                                if(false===dataTypeCheck.isInt(singleRuleDefine)){\r\n                                    rc['rc']=validateError.minDefineNotInt.rc\r\n                                    rc['msg']=`${inputRule}的${validateError.minDefineNotInt.msg}`\r\n                                    return rc\r\n                                }\r\n                                break;\r\n                            case 'max':\r\n                                if(false===dataTypeCheck.isInt(singleRuleDefine)){\r\n                                    rc['rc']=validateError.maxDefineNotInt.rc\r\n                                    rc['msg']=`${inputRule}的${validateError.maxDefineNotInt.msg}`\r\n                                    return rc\r\n                                }\r\n                                break;\r\n                            case 'format':\r\n                                break;\r\n                            case 'equalTo':\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n    //                检测error['rc']是否定义\r\n/*                        if(undefined===inputRules[inputRule][singleRule]['error'] || null===undefined===inputRules[inputRule][singleRule]['error'] ){\r\n                            return validateError.errorFieldNotDefine\r\n                        }\r\n                        if(undefined===inputRules[inputRule][singleRule]['error']['rc'] || null===undefined===inputRules[inputRule][singleRule]['error']['rc'] ){\r\n                            return validateError.rcFieldNotDefine\r\n                        }*/\r\n                        /*                if(false===defineOkFlag){\r\n\r\n                         }*/\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            return rightResult\r\n\r\n        },\r\n        //必须在checkRuleBaseOnRuleDefine通过之后执行\r\n        //对rule的define转换成正确的类型，便于后续操作(无需执行类型转换)\r\n        sanityRule(rules){\r\n            for(let singleRule in rules){\r\n                for(let singleFiled in rules[singleRule]){\r\n                    //let singleRuleField\r\n                    switch (singleFiled){\r\n                        case 'chineseName': //无需sanity\r\n                            break\r\n                        case 'default': //根据type进行sanity\r\n                            rules[singleRule][singleFiled]=validate._private.checkDataTypeBaseOnTypeDefine(rules[singleRule][singleFiled],rules[singleRule]['type'])\r\n                            break;\r\n                        case 'type':  //无需sanity\r\n                            break;\r\n                        case 'require':  //无需sanity，checkRuleBaseOnRuleDefine已经判断过\r\n                            break\r\n                        case 'minLength':\r\n                            //console.log(rules[singleRule][singleFiled])\r\n                            rules[singleRule][singleFiled]['define']=validate._private.checkDataTypeBaseOnTypeDefine(rules[singleRule][singleFiled]['define'],dataType.int)\r\n                            break;\r\n                        case 'maxLength':\r\n                            rules[singleRule][singleFiled]['define']=validate._private.checkDataTypeBaseOnTypeDefine(rules[singleRule][singleFiled]['define'],dataType.int)\r\n                            break;\r\n                        case 'exactLength':\r\n                            rules[singleRule][singleFiled]['define']=validate._private.checkDataTypeBaseOnTypeDefine(rules[singleRule][singleFiled]['define'],dataType.int)\r\n                            break;\r\n                        case 'min':\r\n                            rules[singleRule][singleFiled]['define']=validate._private.checkDataTypeBaseOnTypeDefine(rules[singleRule][singleFiled]['define'],dataType.int)\r\n                            break;\r\n                        case 'max':\r\n                            rules[singleRule][singleFiled]['define']=validate._private.checkDataTypeBaseOnTypeDefine(rules[singleRule][singleFiled]['define'],dataType.int)\r\n                            break;\r\n                        case 'format':  //无需sanity\r\n                            break;\r\n                        case 'equalTo': //无需sanity\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /*********************************************/\r\n    /*         主函数，检测input并返回结果        */\r\n    /*********************************************/\r\n//inputValue:{username:{value:xxx},password:{value:yyy}}\r\n//inputItemDefine： adminLogin。每个页面有不同的定义\r\n    checkInput(inputValue,inputItemDefine){\r\n        let rc={}\r\n        let tmpResult\r\n        //检查参数的更是，必需是Object，且含有key\r\n        if(false===dataTypeCheck.isSetValue(inputValue)){\r\n/*            rc['rc']=validateError.valueNotDefine.rc\r\n            rc['msg']=`${inputV}validateError`*/\r\n            return validateError.valueNotDefine\r\n        }\r\n        if(dataTypeCheck.isEmpty(inputValue)){\r\n            return validateError.valueEmpty\r\n        }\r\n        //检查rule是否合格\r\n        tmpResult=validate._private.checkRuleBaseOnRuleDefine(inputItemDefine)\r\n        if(0<tmpResult.rc){\r\n            return tmpResult\r\n        }\r\n        //将rule中的define转换成合适的类型（之后进行判断的时候就不用再次转换）\r\n        validate._private.sanityRule(inputItemDefine)\r\n//console.log(inputItemDefine)\r\n\r\n        for (let itemName in inputValue ){\r\n            rc[itemName]={}\r\n            rc[itemName]['rc']=0\r\n            //无法确定inputValue[itemName]['value']是否undefined，如果是，会报错。所以不适用变量赋值，而在之后的函数中直接传入\r\n            //var currentItemValue=inputValue[itemName]['value']\r\n            //0 当前待检测的value，有没有对应的检测rule定义\r\n            if(false===dataTypeCheck.isSetValue(inputItemDefine[itemName])){\r\n                rc[itemName]['rc']=validateError.valueRelatedRuleNotDefine.rc\r\n                rc[itemName]['msg']=`${itemName}${validateError.valueRelatedRuleNotDefine.msg}`\r\n                return rc\r\n                //return validateError.noRelatedItemDefine\r\n            }\r\n            let currentItemRule=inputItemDefine[itemName]\r\n\r\n            let currentChineseName=inputItemDefine[itemName]['chineseName']\r\n            //先行判断输入值是否empty，然后赋值给变量；而不是多次使用isEmpty函数。如此，可以加快代码执行速度\r\n            //let emptyFlag=(false=== dataTypeCheck.isSetValue(inputValue[itemName]) &&  false===dataTypeCheck.isSetValue(inputValue[itemName]['value']))\r\n            let emptyFlag=false\r\n            if(false===dataTypeCheck.isSetValue(inputValue[itemName])){\r\n                emptyFlag=true\r\n            }else{\r\n                if(false===dataTypeCheck.isSetValue(inputValue[itemName]['value'])){\r\n                    emptyFlag=true\r\n                }\r\n            }\r\n\r\n            //let currentItemValue=dataTypeCheck.isEmpty(inputValue[itemName]['value']) ? undefined:inputValue[itemName]['value']\r\n            let currentItemValue\r\n            //1. 是否用default代替空的inputValue\r\n            //1 如果是require，但是value为空，那么检查是否有default设置，有的话，inputValue设成default\r\n            let useDefaultValueFlag=false\r\n\r\n/*            console.log(inputValue[itemName])\r\n            console.log(dataTypeCheck.isSetValue(inputValue[itemName]))\r\n            console.log( dataTypeCheck.isSetValue(inputValue[itemName]['value']))*/\r\n/*            console.log(inputValue[itemName]['value'])\r\n            console.log(emptyFlag)*/\r\n            /*          value\r\n             * 1. 如贵value=notSet，且require=true && default isSet，value=default\r\n             * 2. 如果value=notSet，且require=true && default notSet，返回错误\r\n             * 3. 如果value=notSet，且require=false,返回rc=0\r\n             * 4. 如果value=set,require=false,继续检测\r\n             * */\r\n            //如果必须有值，但是只没有设；如果default存在，用default的值设置变量currentItemValue；否则用原始的inputValue设置（也就是undefined或者null）\r\n            //if(currentItemRule['require'] && true===currentItemRule['require']['define']){\r\n            if(true===emptyFlag){\r\n                //console.log(currentItemRule)\r\n                if(true===currentItemRule['require']['define']){\r\n//console.log('require defined')\r\n                    if(currentItemRule['default'] && false===dataTypeCheck.isEmpty(currentItemRule['default'])){\r\n//console.log('default  defined')\r\n                        useDefaultValueFlag=true;\r\n                        currentItemValue=currentItemRule['default']\r\n\r\n                        //重新计算emptyFlag\r\n                        emptyFlag=dataTypeCheck.isEmpty(currentItemValue)\r\n                    }else{\r\n//console.log('default not defined')\r\n                        rc[itemName]['rc']=validateError.valueNotDefineWithRequireTrue.rc\r\n                        rc[itemName]['msg']=`${itemName}${validateError.valueNotDefineWithRequireTrue.msg}`\r\n                        //return validateError.valueNotDefineWithRequireTrue\r\n                        continue\r\n                    }\r\n                }else{\r\n                    continue\r\n                }\r\n\r\n            }else{\r\n                //value不为空，付给变量，以便后续操作\r\n                currentItemValue=inputValue[itemName]['value']\r\n            }\r\n\r\n//console.log(currentItemValue)\r\n            //如果currentItemValue为空，说明没有获得default，或者require为false\r\n            //2. 如果有maxLength属性，首先检查（防止输入的参数过于巨大）\r\n            if(currentItemRule['maxLength'] && currentItemRule['maxLength']['define']){\r\n                let maxLengthDefine=currentItemRule['maxLength']['define']\r\n                if(false===emptyFlag && true===ruleTypeCheck.exceedMaxLength(currentItemValue,maxLengthDefine)){\r\n                    rc[itemName]['rc']=currentItemRule['maxLength']['error']['rc']\r\n                    rc[itemName]['msg']=validate._private.generateErrorMsg.maxLength(currentChineseName,maxLengthDefine,useDefaultValueFlag)\r\n                    continue\r\n                    //return rc\r\n                }\r\n            }\r\n\r\n            /*        if(rc[itemName] && rc[itemName]['rc']>0){\r\n             break\r\n             return rc\r\n             }*/\r\n\r\n            //3. 检查value的类型是否符合type中的定义\r\n/*console.log(currentItemValue)\r\nconsole.log(currentItemRule['type'])*/\r\n            let result = validate._private.checkDataTypeBaseOnTypeDefine(currentItemValue,currentItemRule['type'])\r\n//console.log(result)\r\n            if(result.rc && 0<result.rc){\r\n                rc[itemName]['rc']=result.rc\r\n                rc[itemName]['msg']=`${itemName}${result.msg}`\r\n                continue\r\n            }\r\n            if(false===result){\r\n                rc[itemName]['rc']=validateError.typeWrong.rc\r\n                rc[itemName]['msg']=`${itemName}${validateError.typeWrong.msg}`\r\n                continue\r\n            }\r\n\r\n            //    4. 检查出了maxLength之外的每个rule进行检测\r\n            for(let singleItemRuleName in currentItemRule){\r\n                if('chineseName'!==singleItemRuleName && 'default'!==singleItemRuleName && 'type'!==singleItemRuleName && 'unit'!== singleItemRuleName){\r\n                    let ruleDefine=currentItemRule[singleItemRuleName]['define']\r\n                    switch (singleItemRuleName){\r\n                        case \"require\":\r\n                            if(ruleDefine){\r\n                                if(true===emptyFlag){\r\n                                    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                    rc[itemName]['msg']=validate._private.generateErrorMsg.require(currentChineseName,ruleDefine,useDefaultValueFlag) //参数ruleDefine无用，只是为了函数格式统一\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"minLength\":\r\n                            if(false===emptyFlag ){\r\n                                /*                            if(false===dataTypeCheck.isInt(ruleDefine)){\r\n                                 return validateError.minLengthDefineNotInt\r\n                                 }*/\r\n                                if(true===ruleTypeCheck.exceedMinLength(currentItemValue,ruleDefine)){\r\n                                    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                    rc[itemName]['msg']=validate._private.generateErrorMsg.minLength(currentChineseName,ruleDefine,useDefaultValueFlag)\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"maxLength\":\r\n                            if(false===emptyFlag){\r\n                                /*                            if(false===dataTypeCheck.isInt(ruleDefine)){\r\n                                 return validateError.maxLengthDefineNotInt\r\n                                 }*/\r\n                                if(true===ruleTypeCheck.exceedMaxLength(currentItemValue,ruleDefine)){\r\n                                    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                    rc[itemName]['msg']=validate._private.generateErrorMsg.maxLength(currentChineseName,ruleDefine,useDefaultValueFlag)\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"exactLength\":\r\n                            if(false===emptyFlag){\r\n                                /*                            if(false===dataTypeCheck.isInt(ruleDefine)){\r\n                                 return validateError.exactLengthDefineNotInt\r\n                                 }*/\r\n                                if(false===ruleTypeCheck.exactLength(currentItemValue,ruleDefine)){\r\n                                    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                    rc[itemName]['msg']=validate._private.generateErrorMsg.exactLength(currentChineseName,ruleDefine,useDefaultValueFlag)\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'max':\r\n                            if(false===emptyFlag){\r\n                                /*                            if(false===dataTypeCheck.isInt(ruleDefine)){\r\n                                 return validateError.maxDefineNotInt\r\n                                 }*/\r\n\r\n                                if(true===ruleTypeCheck.exceedMax(currentItemValue,ruleDefine)){\r\n                                    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                    rc[itemName]['msg']=validate._private.generateErrorMsg.max(currentChineseName,ruleDefine,useDefaultValueFlag,inputItemDefine[itemName]['unit'])\r\n                                    /*                                if('expireTimeOfRejectTimes'===itemName){\r\n                                     console.log(rc)\r\n                                     console.log(inputItemDefine[itemName]['unit'])\r\n                                     }*/\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'min':\r\n                            if(false===emptyFlag){\r\n                                /*                            if(false===dataTypeCheck.isInt(ruleDefine)){\r\n                                 return validateError.minDefineNotInt\r\n                                 }*/\r\n                                //if(true===ruleTypeCheck.exceedMin(currentItemValue,ruleDefine,inputItemDefine[itemName]['unit'])){\r\n                                if(true===ruleTypeCheck.exceedMin(currentItemValue,ruleDefine)){\r\n                                    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                    rc[itemName]['msg']=validate._private.generateErrorMsg.min(currentChineseName,ruleDefine,useDefaultValueFlag,inputItemDefine[itemName]['unit'])\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"format\":\r\n                            if(false===emptyFlag && false===ruleTypeCheck.format(currentItemValue,ruleDefine)){\r\n                                rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                rc[itemName]['msg']=validate._private.generateErrorMsg.format(currentChineseName,ruleDefine,useDefaultValueFlag)\r\n                            }\r\n                            break;\r\n                        case \"equalTo\":\r\n                            //1\r\n                            let equalToFiledName=inputItemDefine[itemName][singleItemRuleName]['define']\r\n                            //if(false===emptyFlag){\r\n                            //    rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                            //    rc[itemName]['msg']=generateErrorMsg.format(currentChineseName,ruleDefine,useDefaultValueFlag)\r\n                            //}\r\n                            if(true===emptyFlag || true===dataTypeCheck.isEmpty(inputValue[equalToFiledName]['value']) || inputValue[itemName]['value']!==inputValue[equalToFiledName]['value']){\r\n                                rc[itemName]['rc']=inputItemDefine[itemName][singleItemRuleName]['error']['rc']\r\n                                rc[itemName]['msg']=validate._private.generateErrorMsg.equalTo(currentChineseName,inputItemDefine[equalToFiledName]['chineseName'])\r\n                            }\r\n                            break;\r\n                        default:\r\n\r\n                    }\r\n                }\r\n                //检查出错误后，不在继续检测当前item的其它rule，而是直接检测下一个item\r\n                if(0!==rc[itemName].rc){\r\n//console.log('skip')\r\n                    break\r\n                }\r\n\r\n\r\n\r\n            }\r\n            //没有检测出错误，对inpputValue的value进行sanity操作\r\n            let tmpType=inputItemDefine[itemName]['type']\r\n/*            console.log(tmpType)\r\n            console.log(currentItemValue)*/\r\n            if(tmpType===dataType.int || tmpType===dataType.float || tmpType===dataType.date){\r\n                //对默认值或者inputValue进行sanity\r\n                inputValue[itemName]['value']=validate._private.checkDataTypeBaseOnTypeDefine(currentItemValue,tmpType)\r\n                //console.log(inputValue)\r\n            }\r\n\r\n//console.log(rc)\r\n\r\n        }\r\n\r\n        return rc\r\n//    注意，返回的结果是对象，结构和inputValue类型，不是{rc;xxx,msg:xxx}的格式\r\n    }\r\n}\r\n\r\n\r\n\r\n/*根据server端rule define，生成客户端input的属性，以便angularjs对input进行检查\r\n * obj:server端item的rule define( /server/define/validateRule/inputRule)\r\n * level：深度（2）\r\n * resultObj: 因为采用递归调用，所以结果参数，而不是直接return结果\r\n */\r\nvar generateClientDefine=function(obj,level,resultObj){\r\n    // let resultObj={}\r\n    if('object'===typeof obj){\r\n        for(let key in obj){\r\n            resultObj[key]={}\r\n            //深度为1，到达最底层\r\n            if(1===level){\r\n                let tmpChineseName=obj[key]['chineseName']\r\n                let temInputDataType\r\n                switch (obj[key]['type']){\r\n                    case dataType.number:\r\n                        temInputDataType='number';\r\n                        break;\r\n                    case dataType.float:\r\n                        temInputDataType='number';\r\n                        break;\r\n                    case dataType.int:\r\n                        temInputDataType='number';\r\n                        break;                    \r\n                    case dataType.password:\r\n                        temInputDataType='password';\r\n                        break;\r\n                    case dataType.date:\r\n                        temInputDataType='date';\r\n                        break;\r\n                    default:\r\n                        temInputDataType='text'\r\n                }\r\n                resultObj[key]={value:'',originalValue:'',blur:false,focus:true,inputDataType:temInputDataType,inputIcon:\"\",chineseName:tmpChineseName,errorMsg:\"\",validated:'undefined'}\r\n                //obj[key]['chineseName']=tmpChineseName\r\n            }else{\r\n                //如果值是对象，递归调用\r\n                if('object'===typeof obj[key]){\r\n                    let currentLvl=level-1\r\n                    //console.log(currentLvl)\r\n                    generateClientDefine(obj[key],currentLvl,resultObj[key])\r\n                }\r\n                /*                else{\r\n                 obj[key]={}\r\n                 //func()\r\n                 }*/\r\n            }\r\n        }\r\n    }\r\n    // return resultObj\r\n}\r\n\r\n/*根据server端rule define，生成客户端rule define\r\n* obj:server端item的rule define( /server/define/validateRule/inputRule)\r\n* level：深度（2）\r\n* resultObj: 因为采用递归调用，所以结果参数，而不是直接return结果\r\n*/\r\nvar generateClientRule=function(obj,level,resultObj){\r\n    // let resultObj={}\r\n    if('object'===typeof obj){\r\n        for(let key in obj){\r\n            resultObj[key]={}\r\n            //深度为1,达到subItem\r\n            if(1===level){\r\n                for(let field in clientRuleType){\r\n                    //rule有定义\r\n                    if(undefined!==obj[key][field] && null!==obj[key][field]){\r\n                        //读取rule定义\r\n                        if(undefined!==obj[key][field]['define'] && null!==obj[key][field]['define']){\r\n                            resultObj[key][field]={}\r\n                            resultObj[key][field]['define']=obj[key][field]['define']\r\n                            //产生错误信息，以便angularjs检查input错误时使用\r\n                            resultObj[key][field]['msg']=validate._private.generateErrorMsg[field](obj[key]['chineseName'],obj[key][field]['define'],obj[key]['default'])\r\n                        }\r\n                    }\r\n                }\r\n                /*                let tmpChineseName=obj[key]['chineseName']\r\n                 obj[key]={}\r\n                 obj[key]['chineseName']=tmpChineseName*/\r\n            }else{\r\n                //如果值是对象，递归调用\r\n                if('object'===typeof obj[key]){\r\n                    let currentLvl=level-1\r\n                    generateClientRule(obj[key],currentLvl,resultObj[key])\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    // return resultObj\r\n}\r\n\r\n//根据skipList提供的key，在origObj删除对应key\r\n//专门使用：使用generateClientRule或者generateClientDefine，是从mongodb structure中直接转换，但是其中有些字段，例如cDate，是后台自动创建，无需前台检测，所以需要删除\r\n//origObj: generateClientRule或者generateClientDefine产生的结果\r\n//skipList:需要删除的字段\r\n//处理完成返回true\r\nvar deleteNonNeededObject=function(origObj,skipList){\r\n    if(false===dataTypeCheck.isObject(origObj)) {\r\n        return miscError.deleteNonNeededObject.origObjTypeWrong\r\n    }\r\n    if(false===dataTypeCheck.isObject(skipList)){\r\n        return miscError.deleteNonNeededObject.skipListTypeWrong\r\n    }\r\n    for(let coll in origObj){\r\n        //对应的collection没有需要删除的字段\r\n        if(undefined===skipList[coll]){\r\n            continue\r\n        }else{\r\n            //对应的coll有对应的删除字段，查找出对应的字段，并删除\r\n            for(let field in origObj[coll]){\r\n                if(-1!==skipList[coll].indexOf(field)){\r\n                    delete origObj[coll][field]\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return rightResult\r\n}\r\n\r\n//collection的某些字段是ObjectId，需要对应到具体的字段（例如department.parentDepartment在client实际显示的department name，而不是objectID）\r\n//origObj: generateClientRule或者generateClientDefine产生的结果\r\n//matchList：指定对应的filed连接到的coll.field(db中字段是objectID，但是用作外键，实际代表字符等，所以需要修改checkRule和inputAttr的chineseName)\r\nvar objectIdToRealField=function(origObj,matchList){\r\n    if(false===dataTypeCheck.isObject(origObj)) {\r\n        return miscError.objectIdToRealField.origObjTypeWrong\r\n    }\r\n    if(false===dataTypeCheck.isObject(matchList)){\r\n        return miscError.objectIdToRealField.skipListTypeWrong\r\n    }\r\n    let tmp,tmpColl,tmpField\r\n    //let tmpValue\r\n    for(let coll in matchList){\r\n        if(undefined===matchList[coll]){\r\n            continue\r\n        }\r\n        for (let field in matchList[coll]){\r\n\r\n            tmp=matchList[coll][field].split('.')\r\n            tmpColl=tmp[0]\r\n            tmpField=tmp[1]\r\n/*            console.log(tmpColl)\r\n            console.log(tmpField)*/\r\n            //如果是attr（通过判断是否有chineseName），保存原始的chineseName，但是inputDataType换成相关字段的类型\r\n            if(origObj[coll][field]['chineseName']){\r\n                origObj[coll][field]['inputDataType']=origObj[tmpColl][tmpField]['inputDataType']\r\n/*                tmpValue=origObj[coll][field]['chineseName']\r\n                console.log(tmpValue)\r\n                origObj[coll][field]=origObj[tmpColl][tmpField]\r\n\r\n                origObj[coll][field]['chineseName']=tmpValue\r\n                console.log(origObj[coll][field])*/\r\n            }else{//否则就是ruleDefine\r\n                //遍历关联字段的rule\r\n/*                console.log(coll)\r\n                 console.log(field)\r\n                console.log(origObj[tmpColl][tmpField])*/\r\n                for(let rule in origObj[tmpColl][tmpField]){\r\n                    //console.log(rule)\r\n                    //require还是使用原始的定义\r\n                    if('require'===rule){\r\n                        continue\r\n                    }\r\n                    //console.log(tmpField+\" \"+rule)\r\n                    //其他rule的定义和msg采用关联字段的定义和msg（在客户端使用，没有rc）\r\n                    //如果关联字段中 有某个rule，但是原始字段中 没有，那么在原始字段设置一个空rule\r\n                    if(undefined===origObj[coll][field][rule]){\r\n                        origObj[coll][field][rule]={}\r\n                    }\r\n                    //console.log(origObj[tmpColl][tmpField][rule]['define'])\r\n                    origObj[coll][field][rule]['define']=origObj[tmpColl][tmpField][rule]['define']\r\n                    origObj[coll][field][rule]['msg']=origObj[tmpColl][tmpField][rule]['msg']\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return rightResult\r\n}\r\n\r\n\r\nvar encodeHtml = function(s){\r\n    if(undefined===s){return \"\";}\r\n    if('string'!=typeof(s)){s= s.toString();};\r\n    if(0=== s.length){return \"\";};\r\n    var returnHtml='';\r\n\r\n    return s.replace(regex.encodeHtmlChar,function(char){\r\n        var c=char.charCodeAt(0),r='&#';\r\n        c=(32===c) ? 160 : c;\r\n        return r+c+';';\r\n    })\r\n    /*    s = (s != undefined) ? s : s.toString();\r\n     return (typeof(s) != \"string\") ? s :\r\n     s.replace(this.REGX_HTML_ENCODE,\r\n     function($0){\r\n     var c = $0.charCodeAt(0), r = [\"&#\"];\r\n     c = (c == 0x20) ? 0xA0 : c;\r\n     r.push(c); r.push(\";\");\r\n     return r.join(\"\");\r\n     });*/\r\n};\r\n\r\nexports.func={\r\n    dataTypeCheck,\r\n    ruleTypeCheck,\r\n    CRUDGlobalSetting,\r\n    generateRandomString,\r\n    leftMSInDay,\r\n    leftSecondInDay,\r\n\r\n    parseGmFileSize,\r\n    convertImageFileSizeToByte,\r\n    convertURLSearchString,\r\n    getUserInfo,\r\n    //generateSimpleRandomString:generateSimpleRandomString,\r\n    checkUserState,\r\n    //checkUserIdFormat:checkUserIdFormat,\r\n    checkInterval,// use Lua instead of session(although sesssion use redis too)\r\n    preCheck,\r\n    getPemFile,\r\n    //objectIndexOf:objectIndexOf,\r\n    //extractKey:extractKey,\r\n    validate,\r\n    generateClientDefine,\r\n    generateClientRule,\r\n    deleteNonNeededObject,\r\n    objectIdToRealField,\r\n\r\n    encodeHtml,\r\n}\r\n\r\n// CRUDGlobalSetting.setDefault()\r\n/*CRUDGlobalSetting.getSingleSetting('search','maxKeyNum1',function(err,result){\r\n    console.log(err)\r\n    console.log(result)\r\n})*/\r\n\r\n\r\n//console.log(test())\r\n//test()"]}