{"version":3,"sources":["shaLua.js"],"names":[],"mappings":"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","file":"shaLua-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-09-23.\r\n */\r\n/*\r\n*  把redis的Lua脚本sha化，存入内存\r\n*  单独一个文件，容易调试\r\n* */\r\n'use strict'\r\nrequire(\"babel-polyfill\");\r\nrequire(\"babel-core/register\")\r\nvar asyncFs=require('../wrapAsync/node/wrapAsyncNode').asyncFs\r\nvar ioredisError=require('../../define/error/redisError').redisError.cmdError\r\nvar LuaError=require('../../define/error/redisError').redisError.LuaError\r\nvar ioredisClient=require('../../model/redis/connection/redis_connection').ioredisClient\r\nvar regex=require('../../define/regex/regex').regex\r\n\r\n//将文件的 内容 sha化\r\nfunction shaFileContent(scriptContent){\r\n    return new Promise(function(resolve,reject){\r\n        ioredisClient.script('load',scriptContent,(err,sha)=>{\r\n            if(err){reject(ioredisError.shaFail())}\r\n            resolve(sha)\r\n        })\r\n    })\r\n}\r\n\r\n//sha单个Lua脚本\r\nasync function shaSingleFile(file){\r\n    // let fileExist=await asyncFs.asyncIsDir(file)\r\n    // console.log(fileExist)\r\n    // fileExist.then((v)=>console.log(v),(e)=>console.log(e))\r\n\r\n    let content=await asyncFs.asyncReadFile(file)\r\n    // console.log(content)\r\n    let sha=await shaFileContent(content)\r\n    return sha\r\n}\r\n\r\n//sha文件或者目录\r\nasync function shaLuaFileOrDir(path){\r\n    let allShaResult={}\r\n    let singleShaResult=''\r\n    let isDir,isFile\r\n    isDir=await asyncFs.asyncIsDir(path)\r\n    if(isDir){\r\n        let dirContent=await asyncFs.asyncReadDir(path)\r\n        for(let singleFileDir of dirContent){\r\n            //需要提供路径（目录+文件名）\r\n            let tmpFileDir=`${path}/${singleFileDir}`\r\n            isFile=await asyncFs.asyncIsFile(tmpFileDir)\r\n            if(isFile){\r\n                singleShaResult=await shaSingleFile(tmpFileDir)\r\n                allShaResult[tmpFileDir]=singleShaResult\r\n                // console.log(tmpFileDir+':'+singleShaResult)\r\n                continue\r\n            }\r\n            isDir=await asyncFs.asyncIsDir(tmpFileDir)\r\n            if(isDir){\r\n                let dirResult=await shaLuaFileOrDir(tmpFileDir)\r\n                for(let key in dirResult){\r\n                    allShaResult[key]=dirResult[key]\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return allShaResult\r\n}\r\n\r\n\r\n//执行指定的Lua脚本(用于测试)\r\nasync function execLua(fileOrDir,fileTobeExec,params){\r\n     //console.log(params)\r\n    let shaResult=await shaLuaFileOrDir(fileOrDir)\r\n    for(let filePath in shaResult){\r\n        // console.log(filePath)\r\n        if(-1!==filePath.indexOf(fileTobeExec)){\r\n\r\n            return new Promise(function(reslove,reject){\r\n                if(params){\r\n                    //为了能使Lua将字符串（对象转换）转换成table，key不能由括号（无论单还是双）括起\r\n                    params=params.replace(regex.lua.paramsConvert,'$1$2')\r\n                }\r\n                ioredisClient.evalsha(shaResult[filePath],0,params,function(err,result){\r\n                    if(err){console.log(`sha err is ${err}`);reject(LuaError.LueExecFail(fileTobeExec))}\r\n                    console.log(`sha result is ${result}`);reslove(result)\r\n                })\r\n            })\r\n\r\n        }\r\n    }\r\n    // return shaResult\r\n}\r\n\r\n//执行sha后的lua脚本（实际使用）\r\nfunction execSHALua(sha,params){\r\n    return new Promise(function(reslove,reject){\r\n        if(params){\r\n            if('string'!==typeof params && 'object'!==typeof params){\r\n                reject(LuaError.LueParamNotObject(sha))\r\n            }\r\n            if('object'===typeof params){\r\n                params=JSON.stringify(params)\r\n            }\r\n            //为了能使Lua将字符串（对象转换）转换成table，key不能由括号（无论单还是双）括起\r\n            params=params.replace(regex.lua.paramsConvert,'$1$2')\r\n        }\r\n/*        console.log(`sha is ${sha}`)\r\n        console.log(`params is ${params}`)*/\r\n        //统一格式，没有key（key num为0），参数是对象转换的字符串\r\n        ioredisClient.evalsha(sha,0,params,function(err,result){\r\n            if(err){\r\n                console.log(`sha err is ${err}`);\r\n                console.log(`parsed sha err is ${LuaError.LueExecFail(sha)}`);\r\n\r\n                reject(LuaError.LueExecFail(sha))\r\n            }else{\r\n                //console.log(`type of result ${typeof result}`);\r\n                console.log(`sha result is ${result}`);\r\n                if(result && result!==''){\r\n                    //result=\r\n                    reslove(JSON.parse(result))\r\n                }\r\n            }\r\n\r\n        })\r\n    })\r\n    // return shaResult\r\n}\r\n\r\nmodule.exports={\r\n    shaSingleFile,\r\n    shaLuaFileOrDir,\r\n    execLua,\r\n    execSHALua,\r\n}\r\n"]}