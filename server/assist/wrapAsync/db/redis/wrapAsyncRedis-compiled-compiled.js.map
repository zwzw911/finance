{"version":3,"sources":["wrapAsyncRedis-compiled.js"],"names":[],"mappings":"AAAA;;;AAGA;;;;;;AAMA;;;AAGA;;AAEA,IAAI,gBAAgB,QAAQ,qDAAR,EAA+D,aAAnF;AACA,IAAI,aAAa,QAAQ,qCAAR,EAA+C,UAAhE;;AAEA,IAAI,UAAU,EAAE,IAAI,CAAN,EAAd;;AAEA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,MAAxB,EAAgC;AAC5B;AACA,WAAO,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C;AACA,sBAAc,IAAd,CAAmB,CAAC,GAAD,EAAM,MAAN,CAAnB,EAAkC,UAAU,GAAV,EAAe,IAAf,EAAqB;AACnD,gBAAI,GAAJ,EAAS;AACL,uBAAO,WAAW,QAAX,CAAoB,SAA3B;AACH,aAFD,MAEO;AACH;AACA,wBAAQ,GAAR,GAAc,IAAd;AACA,wBAAQ,OAAR;AACH;AACJ,SARD;AASA;;;AAGH,KAdM,CAAP;AAeH;;AAED,SAAS,YAAT,CAAsB,GAAtB,EAA2B,MAA3B,EAAmC;AAC/B,WAAO,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C;AACA;AACA,sBAAc,OAAd,CAAsB,CAAC,GAAD,EAAM,MAAN,CAAtB,EAAqC,UAAU,GAAV,EAAe,IAAf,EAAqB;AACtD,gBAAI,GAAJ,EAAS;AACL,uBAAO,WAAW,QAAX,CAAoB,UAA3B;AACH,aAFD,MAEO;AACH,wBAAQ,GAAR,GAAc,IAAd;AACA,wBAAQ,OAAR;AACH;AACJ,SAPD;AAQA;;;;AAIH,KAfM,CAAP;AAgBH;;AAED,OAAO,OAAP,GAAiB;AACb,eAAW,SADE;AAEb,kBAAc;AAFD,CAAjB;;AAKA","file":"wrapAsyncRedis-compiled-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-07-29.\r\n */\n/*\r\n* ioredis的方法本身已经支持返回Promise，理论上可以直接使用await，但是现在需要格式化返回的结果，所以采用ioredis的callback方式，自己包装成Pormise的格式\r\n* error：转换成{rc:xxx,msg}     result: {rc:0,msg：null}\r\n*\r\n* */\n\n/*\r\n* ioredis中，获得数据没有回调（set/hset等）\r\n* */\n'use strict';\n\nvar ioredisClient = require('../../../../model/redis/connection/redis_connection').ioredisClient;\nvar redisError = require('../../../../define/error/redisError').redisError;\n\nvar rcRight = { rc: 0 };\n\nfunction asyncHget(key, subKey) {\n    // console.log('subkey is'+subKey)\n    return new Promise(function (resolve, reject) {\n        // try{\n        ioredisClient.hget([key, subKey], function (err, data) {\n            if (err) {\n                reject(redisError.cmdError.hgetError);\n            } else {\n                // console.log(data)\n                rcRight.msg = data;\n                resolve(rcRight);\n            }\n        });\n        /*        }catch(e){\r\n                    reject('hget fail')\r\n                }*/\n    });\n}\n\nfunction asyncHexists(key, subKey) {\n    return new Promise(function (resolve, reject) {\n        // try{\n        // reject('test')\n        ioredisClient.hexists([key, subKey], function (err, data) {\n            if (err) {\n                reject(redisError.cmdError.existsFail);\n            } else {\n                rcRight.msg = data;\n                resolve(rcRight);\n            }\n        });\n        /*        }\r\n                catch(e){\r\n                    reject(redisError.general.hexistsFail)\r\n                }*/\n    });\n}\n\nmodule.exports = {\n    asyncHget: asyncHget,\n    asyncHexists: asyncHexists\n};\n\n//# sourceMappingURL=wrapAsyncRedis-compiled.js.map"]}