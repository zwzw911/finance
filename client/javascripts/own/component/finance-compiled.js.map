{"version":3,"sources":["finance.js"],"names":[],"mappings":"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","file":"finance-compiled.js","sourcesContent":["/**\r\n * Created by ada on 2016/9/15.\r\n */\r\n'use strict'\r\nvar app=angular.module('finance',['component','contDefine']);\r\n\r\napp.factory('financeCRUDHelper',function($http,$q,inputAttrHelper,commonHelper,cont){\r\n/*    //根据inputAttr的内容，生成合适的values，以便server处理\r\n    var generateInputValue=function(inputAttr){\r\n        let values={}\r\n        for(let key in inputAttr){\r\n            if(inputAttr[key] && inputAttr[key]['value']){\r\n                values[key]={}\r\n                values[key]['value']=inputAttr[key]['value']\r\n            }\r\n        }\r\n        return values\r\n    }*/\r\n\r\n    //在angular侧对数据的操作O,对所有页面都是通用的\r\n    var _angularDataOp={\r\n        //inputAttr：当前的一条记录中所有field的信息\r\n        //recorder: 数组，当前所有记录\r\n        'create':function(singleReturnRecorder,inputAttr,recorder){\r\n            inputAttrHelper.initAllFieldInputAttrCreate(inputAttr)\r\n            //加入angular端的数据集合\r\n            recorder.push(singleReturnRecorder)\r\n        },\r\n        'delete':function(idx,recorder){\r\n\r\n            recorder.splice(idx,1)\r\n        },\r\n        'update':function(idx,inputAttr,recorder){\r\n            for(var field in inputAttr){\r\n                recorder[idx][field]=inputAttr[field]['value']\r\n                //清除不必要的数据\r\n                // inputAttr[field]['value']=''\r\n                inputAttr[field]['originalValue']=''\r\n            }\r\n        },\r\n        //newGetRecorder: 从server获得的数据\r\n        //recorder：angular维护的数组，用来存储\r\n        'read':function(newGetRecorder,recorder){\r\n\r\n        }\r\n    }\r\n\r\n    var dataOperator=\r\n    {\r\n        billType: {\r\n            //idx无用，只是为了统一使用参数(create和update同样在modal上操作，使用同一个按钮)\r\n            'create': function (idx, inputAttr, recorder,selectAC) {\r\n                //首先加入db（加入db时，angular已经执行过value的检测，因此无需再次执行inputCheck）\r\n                //从inputAttr提取数据，转换成{field1:{value1:xxx},field2:{value2:yyy}}\r\n                let value = inputAttrHelper.convertedInputAttrFormatCreate(inputAttr)\r\n                //转换外键的格式\r\n                inputAttrHelper.convertSingleACFormat('parentBillType',selectAC,value)\r\n                $http.post('/billType', {values: value}).success(function (data, status, header, config) {\r\n                    if (0 === data.rc) {\r\n                        //对server返回的数据中的日期进行格式化\r\n                        //只返回一个数据，而不是数组，所以只要判断是否null\r\n                        if(null!==data.msg){\r\n                            commonHelper.convertDateTime(data.msg, cont.dateField.billType)\r\n                            //检查外键是否存在，存在的话，将外键object转换成字符\r\n                            console.log(`before FK format result ${JSON.stringify(data.msg)}`)\r\n                            if(data.msg.parentBillType && data.msg.parentBillType.name){\r\n                                data.msg.parentBillType=data.msg.parentBillType.name\r\n                            }\r\n                            console.log(`after FK format result ${JSON.stringify(data.msg)}`)\r\n                                recorder.push(data.msg)\r\n                        }\r\n\r\n                        //console.log(`date format result ${JSON.stringify(returnResult.msg)}`)\r\n                    }\r\n                }).error(function () {\r\n                    console.log('err')\r\n                })\r\n                //然后加入client数据，防止多次返回\r\n                //_angularDataOp.create(idx,inputAttr,recorder)\r\n            },\r\n            'delete': function (idx, recorder) {\r\n                //首先更新数据到db\r\n                //设置要发送的数据（objId）\r\n                //let value={}\r\n                //value['_id']=recorder[idx]['_id']\r\n                //console.log(`construct delete values is ${JSON.stringify(value)}`)\r\n                $http.delete('/billType/'+recorder[idx]['_id'],{}).success(function (data, status, header, config) {\r\n                    if (0 === data.rc) {\r\n                        recorder.splice(idx,1)\r\n                    }\r\n                }).error(function(data, status, header, config){\r\n\r\n                })\r\n                //然后更新client端数据\r\n                //_angularDataOp.delete(idx, recorder)\r\n            },\r\n            'update': function (idx, inputAttr, recorder,selectAC) {\r\n                //首先更新数据到db（更新db时，angular已经执行过value的检测，因此无需再次执行inputCheck）\r\n                //将修改过的值上传修改\r\n                let value = inputAttrHelper.convertedInputAttrFormatCreate(inputAttr)\r\n\r\n                //将外键的id转换成server可以接收的格式\r\n                inputAttrHelper.convertSingleACFormat('parentBillType',selectAC,value)\r\n                console.log(`value 1 is ${JSON.stringify(value)}`)\r\n                //添加要更新记录的_id。必须使用_id（server只认识_id）\r\n                console.log(`idx is ${idx},recorder is ${JSON.stringify(recorder[idx])}`)\r\n                value['_id']={value:recorder[idx]['_id']}\r\n                console.log(`value 2 is ${JSON.stringify(value)}`)\r\n                //Object.assign(value,selectAC)\r\n                $http.put('/billType', {values: value}).success(function (data, status, header, config) {\r\n                    if (0 === data.rc) {\r\n                        //对server返回的数据中的日期进行格式化\r\n                        //console.log(`before date format result ${JSON.stringify(returnResult.msg)}`)\r\n                        commonHelper.convertDateTime(data.msg, cont.dateField.billType)\r\n                        // recorder.push(data.msg)\r\n                        if(data.msg.parentBillType && data.msg.parentBillType.name){\r\n                            data.msg.parentBillType=data.msg.parentBillType.name\r\n                        }\r\n                        for (let singleField in data.msg) {\r\n\r\n                            recorder[idx][singleField] = data.msg[singleField]\r\n                        }\r\n                        //console.log(`date format result ${JSON.stringify(returnResult.msg)}`)\r\n                    }\r\n                }).error(function () {\r\n                    console.log('err')\r\n                })\r\n            },\r\n            'read': function (recorder) {\r\n                $http.get('/billType', {}).success(function (data, status, header, config) {\r\n                    if (0 === data.rc) {\r\n                        //对server返回的数据中的日期进行格式化\r\n                        //console.log(`read result is ${JSON.stringify(data.msg)}`)\r\n\r\n                        data.msg.forEach(function (e) {\r\n                            commonHelper.convertDateTime(e, cont.dateField.billType)\r\n                            if(e.parentBillType && e.parentBillType.name){\r\n                                console.log('in')\r\n                                e.parentBillType=e.parentBillType.name\r\n                            }\r\n                            recorder.push(e)\r\n                        })\r\n                        // recorder=data.msg\r\n                        //console.log(`date format result ${JSON.stringify(returnResult.msg)}`)\r\n                    }\r\n                }).error(function () {\r\n                    console.log('err')\r\n                })\r\n            },\r\n            'readName': function (name,suggest_state) {\r\n                return $http.get('/billType/name/'+name, {})\r\n            },\r\n        },\r\n        department: {\r\n            //idx无用，只是为了统一使用参数\r\n            'create': function (idx, inputAttr, recorder) {\r\n                //首先加入db\r\n                // console.log(inputAttr)\r\n                var defer = $q.defer()\r\n                $http.post('/department', {values: generateInputValue(inputAttr)}, {}).success(function (data, status, header, config) {\r\n                    //console.log(data)\r\n                    if (data.rc === 0) {\r\n                        //使用insertmany，所以返回数组\r\n                        let returnRec = data.msg[0]\r\n                        console.log(inputAttr)\r\n                        for (var singleField in returnRec) {\r\n                            if ('_id' !== singleField && returnRec[singleField]) {\r\n                                inputAttr[singleField]['value'] = returnRec[singleField]\r\n                            }\r\n                        }\r\n                        _angularDataOp.create(idx, inputAttr, recorder)\r\n                    }\r\n                }).error(function (data, status, header, config) {\r\n                    console.log(data)\r\n                })\r\n                //然后加入client数据，防止多次返回\r\n\r\n            },\r\n            'delete': function (idx, recorder) {\r\n                //首先更新数据到db\r\n\r\n                //然后更新client端数据\r\n                _angularDataOp.delete(idx, recorder)\r\n            },\r\n            'update': function (idx, inputAttr, recorder) {\r\n                //首先更新数据到db\r\n\r\n\r\n                //然后更新client端数据\r\n                _angularDataOp.update(idx, inputAttr, recorder)\r\n            },\r\n            'read': function () {\r\n                _angularDataOp.read()\r\n            },\r\n        },\r\n        employee: {\r\n            //idx无用，只是为了统一使用参数\r\n            'create': function (idx, inputAttr, recorder) {\r\n                //首先加入db\r\n\r\n                //然后加入client数据，防止多次返回\r\n                // console.log(inputAttr)\r\n                _angularDataOp.create(idx, inputAttr, recorder)\r\n            },\r\n            'delete': function (idx, recorder) {\r\n                //首先更新数据到db\r\n\r\n                //然后更新client端数据\r\n                _angularDataOp.delete(idx, recorder)\r\n            },\r\n            'update': function (idx, inputAttr, recorder) {\r\n                //首先更新数据到db\r\n\r\n\r\n                //然后更新client端数据\r\n                _angularDataOp.update(idx, inputAttr, recorder)\r\n            },\r\n            'read': function () {\r\n                _angularDataOp.read()\r\n            },\r\n        },\r\n        bill: {\r\n            //idx无用，只是为了统一使用参数\r\n            'create': function (idx, inputAttr, recorder) {\r\n                //首先加入db\r\n\r\n                //然后加入client数据，防止多次返回\r\n                _angularDataOp.create(idx, inputAttr, recorder)\r\n            },\r\n            'delete': function (idx, recorder) {\r\n                //首先更新数据到db\r\n\r\n                //然后更新client端数据\r\n                _angularDataOp.delete(idx, recorder)\r\n            },\r\n            'update': function (idx, inputAttr, recorder) {\r\n                //首先更新数据到db\r\n\r\n\r\n                //然后更新client端数据\r\n                _angularDataOp.update(idx, inputAttr, recorder)\r\n            },\r\n            'read': function () {\r\n                _angularDataOp.read()\r\n            },\r\n        },\r\n    }\r\n\r\n    /*  说明：用来完成自动匹配功能。参数只能采用function(term)的格式。\r\n    *   term:输入的关键字（用来查找匹配的值）\r\n    */\r\n    //\r\n    var suggest_state=\r\n    {\r\n        billType:{\r\n            name:function (term) {\r\n                //return [{label:'typebill1',value:'typebill1'},{label:'typebill2',value:'typebill2'}]\r\n /*               var q = term.toLowerCase().trim();\r\n                var results = [];\r\n/!*                $http.get('/billType/'+name, {}).success(function (data, status, header, config) {\r\n                    if (0 === data.rc) {\r\n                        //对server返回的数据中的日期进行格式化\r\n                        // console.log(`read result is ${JSON.stringify(data.msg)}`)\r\n\r\n\r\n                        data.msg.forEach(function (e) {\r\n                            inputAttrHelper.convertDateTime(e, cont.dateField.billType)\r\n                            recorder.push(e)\r\n                        })\r\n                        // recorder=data.msg\r\n                        //console.log(`date format result ${JSON.stringify(returnResult.msg)}`)\r\n                    }\r\n                }).error(function () {\r\n                    console.log('err')\r\n                })*!/\r\n                var states = ['billType1', 'Alaska', 'California', /!* ... *!/];\r\n                // Find first 10 states that start with `term`.\r\n                for (var i = 0; i < states.length && results.length < 10; i++) {\r\n                    var state = states[i];\r\n                    if (state.toLowerCase().indexOf(q) === 0)\r\n                        results.push({label: state, value: state});\r\n                }\r\n\r\n                return results;*/\r\n            },\r\n\r\n        },\r\n        employee:{\r\n            name:function (term) {\r\n                var q = term.toLowerCase().trim();\r\n                var results = [];\r\n                var states = ['employee1', 'Alaska', 'California', /* ... */];\r\n                // Find first 10 states that start with `term`.\r\n                for (var i = 0; i < states.length && results.length < 10; i++) {\r\n                    var state = states[i];\r\n                    if (state.toLowerCase().indexOf(q) === 0)\r\n                        results.push({label: state, value: state});\r\n                }\r\n                return results;\r\n            },\r\n        },\r\n        department:{\r\n            name:function (term) {\r\n                var q = term.toLowerCase().trim();\r\n                var results = [];\r\n                var states = ['department1', 'Alaska', 'California', /* ... */];\r\n                // Find first 10 states that start with `term`.\r\n                for (var i = 0; i < states.length && results.length < 10; i++) {\r\n                    var state = states[i];\r\n                    if (state.toLowerCase().indexOf(q) === 0)\r\n                        results.push({label: state, value: state});\r\n                }\r\n\r\n                return results;\r\n            },\r\n        },\r\n        bill:{\r\n            title:function (term) {\r\n                var q = term.toLowerCase().trim();\r\n                var results = [];\r\n                var states = ['bill1', 'Alaska', 'California', /* ... */];\r\n                // Find first 10 states that start with `term`.\r\n                for (var i = 0; i < states.length && results.length < 10; i++) {\r\n                    var state = states[i];\r\n                    if (state.toLowerCase().indexOf(q) === 0)\r\n                        results.push({label: state, value: state});\r\n                }\r\n\r\n                return results;\r\n            },\r\n        },\r\n    }\r\n\r\n\r\n    return {dataOperator,suggest_state}\r\n})"]}