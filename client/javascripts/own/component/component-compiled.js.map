{"version":3,"sources":["component.js"],"names":[],"mappings":"AAAA;;;AAGI;;AACJ,IAAI,MAAI,QAAQ,MAAR,CAAe,WAAf,EAA2B,EAA3B,CAAR;AACA,IAAI,OAAJ,CAAY,aAAZ,EAA0B,YAAU;AAChC,WAAO;AACH,uBAAe;AACX,sBAAU,kBAAU,KAAV,EAAiB;AACvB,uBAAO,MAAM,WAAW,KAAX,CAAN,CAAP;AACH;;AAHU;AADZ,KAAP;AAQH,CATD;AAUA,IAAI,OAAJ,CAAY,QAAZ,EAAqB,UAAS,WAAT,EAAqB;AACtC,WAAO;;AAEH;;;;;;AAMA,qBAAY,qBAAS,YAAT,EAAsB,aAAtB,EAAmG;AAAA,gBAA/D,MAA+D,yDAAxD,EAAC,YAAW,CAAZ,EAAc,WAAU,CAAxB,EAA0B,aAAY,CAAtC,EAAwC,cAAa,CAArD,EAAwD;;AAC3G,gBAAI,WAAS;AACT,6BAAY,qBAAS,KAAT,EAAe;AACvB,2BAAO,EAAC,IAAG,CAAJ,EAAM,oBAAN,EAAP;AACH,iBAHQ;AAIT,gCAAe,wBAAS,KAAT,EAAe;AAC1B,2BAAO,EAAC,IAAG,CAAJ,EAAM,qBAAN,EAAP;AACH;AANQ,aAAb;;AASA;AACA;;;;;;;;;AASA,gBAAI,aAAW,SAAS,cAAT,CAAwB,YAAxB,CAAf;AACA,gBAAG,cAAY,UAAf,EAA0B;AACtB,uBAAQ,SAAS,WAAT,CAAqB,YAArB,CAAR;AACH;AACD,gBAAI,cAAY,SAAS,cAAT,CAAwB,aAAxB,CAAhB;AACA,gBAAG,cAAY,WAAf,EAA2B;AACvB,uBAAQ,SAAS,WAAT,CAAqB,aAArB,CAAR;AACH;;AAED;AACA,iBAAI,IAAI,GAAR,IAAe,MAAf,EAAsB;AAClB,oBAAG,YAAY,aAAZ,CAA0B,QAA1B,CAAmC,OAAO,GAAP,CAAnC,CAAH,EAAmD;AAAC,2BAAO,SAAS,cAAT,CAAwB,GAAxB,CAAP;AAAoC;AAC3F;;AAED;AACA;AACA;AACZ;;;;;;;;;;;AAYY;AACZ;;;;AAIA;;;;AAIY,wBAAY,KAAZ,CAAkB,QAAlB,GAA2B,UAA3B;AACA,wBAAY,KAAZ,CAAkB,IAAlB,GAAuB,WAAW,UAAX,GAAsB,OAAO,UAA7B,GAAwC,IAA/D;AACA,wBAAY,KAAZ,CAAkB,GAAlB,GAAsB,WAAW,SAAX,GAAqB,OAAO,SAA5B,GAAsC,IAA5D;AACA,wBAAY,KAAZ,CAAkB,KAAlB,GAAwB,WAAW,WAAX,GAAuB,OAAO,WAA9B,GAA0C,IAAlE;AACA,wBAAY,KAAZ,CAAkB,MAAlB,GAAyB,WAAW,YAAX,GAAwB,OAAO,YAA/B,GAA4C,IAArE;AACZ;;;;AAMS;AA7EE,KAAP;AA+EH,CAhFD","file":"component-compiled.js","sourcesContent":["/**\r\n * Created by wzhan039 on 2016-08-18.\r\n */\r\n    'use strict'\r\nvar app=angular.module('component',[]);\r\napp.factory('basicHelper',function(){\r\n    return {\r\n        dataTypeCheck: {\r\n            isNumber: function (value) {\r\n                return isNaN(parseFloat(value))\r\n            }\r\n\r\n        },\r\n    }\r\n})\r\napp.factory('helper',function(basicHelper){\r\n    return {\r\n\r\n        /*\r\n        * leftOffset:覆盖元素的left和当前元素left 之间的offset。可正可负。\r\n        * topOffset：覆盖元素的top和当前元素top 之间的offset。可正可负。\r\n        * widthOffset：覆盖元素的width和当前元素width 之间的offset。可正可负。\r\n        * heightOffset：覆盖元素的height和当前元素height 之间的offset。可正可负。\r\n        * */\r\n        setCoverEle:function(currentEleId,coveringEleId,offset={leftOffset:0,topOffset:0,widthOffset:0,heightOffset:0}){\r\n            let errorMsg={\r\n                eleNotExist:function(eleId){\r\n                    return {rc:1,msg: `元素$(eleId)不存在`}\r\n                },\r\n                paramNotNumber:function(eleId){\r\n                    return {rc:2,msg: `元素$(eleId)不是数值`}\r\n                },\r\n            }\r\n\r\n            //1. 检测输入参数\r\n            /*             let eleId={'currentEleId':currentEleId,'coveringEleId':coveringEleId}\r\n           //只用getElementById用来判断元素是否存在，获取元素的属性使用jQuery\r\n            //因为getElementById获得的元素在上级可以获得CSS属性，但是此函数无法获得。奇怪\r\n            //jQuery可以稳定工作\r\n            for(let singleEle in eleId){\r\n                if(undefined===document.getElementById(eleId[singleEle])){\r\n                    return  errorMsg.eleNotExist(singleEle)\r\n                }\r\n            }*/\r\n            let currentEle=document.getElementById(currentEleId)\r\n            if(undefined===currentEle){\r\n                return  errorMsg.eleNotExist(currentEleId)\r\n            }\r\n            let coveringEle=document.getElementById(coveringEleId)\r\n            if(undefined===coveringEle){\r\n                return  errorMsg.eleNotExist(coveringEleId)\r\n            }\r\n\r\n            // let offset={'leftOffset':leftOffset,'topOffset':topOffset,'widthOffset':widthOffset,'heightOffset':heightOffset}\r\n            for(let key in offset){\r\n                if(basicHelper.dataTypeCheck.isNumber(offset[key])){return errorMsg.paramNotNumber(key)}\r\n            }\r\n\r\n            //offsetXXX（例如offsetLeft）在上级函数可以获得值，但是在此函数只能获得0.所以使用jQuery来获得元素的属性\r\n            //let offsetParam={'offsetLeft':leftOffset,'offsetTop':topOffset,'offsetWidth':widthOffset,'offsetHeight':heightOffset}\r\n            // let offsetParam={'left':leftOffset,'top':topOffset,'width':widthOffset,'height':heightOffset}\r\n/*            let currentEleParam={},coveringEleParam={}\r\n            // let currentEle=$('#'+currentEleId),coveringEle=$('#'+coveringEleId)\r\n\r\n            //for(let key in offsetParam){\r\n                //2. 获得当前ele的left/top/width/height\r\n                //currentEleParam['left']=currentEle.left()\r\n            //console.log(currentEleParam)\r\n                //3. 计算覆盖元素的left/top/width/height\r\n                coveringEleParam[key]=currentEleParam[key]+offsetParam[key]\r\n            //}*/\r\n\r\n\r\n            //4. 设置覆盖元素参数\r\n/*            coveringEle.style.display='absolute'\r\n            for(let key in offsetParam){\r\n                coveringEle.style[key]=coveringEleParam[key]+'px'\r\n            }*/\r\n/*            console.log(currentEle.offsetLeft)\r\n            console.log(currentEle.offsetTop)\r\n            console.log(currentEle.offsetWidth)\r\n            console.log(currentEle.offsetHeight)*/\r\n            coveringEle.style.position='absolute'\r\n            coveringEle.style.left=currentEle.offsetLeft+offset.leftOffset+'px'\r\n            coveringEle.style.top=currentEle.offsetTop+offset.topOffset+'px'\r\n            coveringEle.style.width=currentEle.offsetWidth+offset.widthOffset+'px'\r\n            coveringEle.style.height=currentEle.offsetHeight+offset.heightOffset+'px'\r\n/*            console.log(coveringEle.style.left)\r\n            console.log(coveringEle.style.top)\r\n            console.log(coveringEle.style.width)\r\n            console.log(coveringEle.style.height)*/\r\n\r\n\r\n        }\r\n    }\r\n})"]}